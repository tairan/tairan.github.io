<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Technology on Tairan&#39;s Story</title>
    <link>https://tairan.net/tags/technology/</link>
    <description>Recent content in Technology on Tairan&#39;s Story</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Copyright 2019 Tairan Wang</copyright>
    <lastBuildDate>Sun, 21 Jul 2019 12:28:12 +0800</lastBuildDate>
    
	<atom:link href="https://tairan.net/tags/technology/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用 Hugo 写作</title>
      <link>https://tairan.net/posts/2019-07-21-write-blog-by-hugo/</link>
      <pubDate>Sun, 21 Jul 2019 12:28:12 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2019-07-21-write-blog-by-hugo/</guid>
      <description> 当做一件事情的时候，若动机不纯，大概率会失败，或者坚持不下去。之前，借着学习GraphQL之名，重拾在GitHub上写作，现在放弃了。
作为一个技术爱好者，掌握了很多技能，而且还对刚出现的技术怀有热情之心，可在实际工作中会用到的确实其中一小部分。当然，高层次的技术和原理还是经常用到， 如：设计模式、架构，数据结构、算法等。但技术细节，可能在工作中永远也用不到。
最近在公司里扮演的角色是后端开发，若要用到GraphQL，则需要前端配合，若要前端配合，要说服很多人，而且还要替他们踏平日常工作中可能会遇到的坑。
太烦，于是使用Gatsby写博客之事，就搁浅了。
博客，中断了多年，但写作并没有，文字分散在博客，豆瓣，知乎，简书等各处。
近年来，国内站点使用越来越痛苦，自己的内容还是由自己来控制吧。重新回归到GitHub是必要的。
虽说互联网是有记忆的，但中国的互联网除外。
时代在进步，现在静态站点生成工具数不胜数，现在我选择Hugo, 内容依然是Markdown, 但环境配置实在是简单，跨平台，单一可执行文件。模板主题也很多。
如上，自己的内容要掌握在自己的手里，源码和产品分离。源码托管我自己的Gitea站点上，细心呵护。
不忘初心，只是写作。
参考连接  GraphQL Hugo Gatsby Gitea 使用hugo搭建个人blog  </description>
    </item>
    
    <item>
      <title>使用 Octopress 写博客</title>
      <link>https://tairan.net/posts/2012-04-23-write-blog-using-octopress/</link>
      <pubDate>Mon, 23 Apr 2012 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2012-04-23-write-blog-using-octopress/</guid>
      <description>Git改变了众多程序员的生活，让写代码真正的成为了生活的一部分。GitHub让团队合作变得更容易。除了代码，博客也可以如此。
Jekyll就是将博客托管到Github的一个工具，它把你的博客从Markdown或者Textile格式转成HTML页面，Github 提供的 Pages则负责了博客的发布工作。
Octopress 则是在 Jekyll 的基础上提供了显示样式和一些插件，让博客变得更美，部署更容易。
Github 支持 CNAME ，允许你将自己的独立域名解析过来。
使用 Octopress 写博客的流程通常是：
 在Github上创建特定名称的仓库如 tairan.github.com 其中 tairan 是我的 Github 登录帐号, 注意: 在此仓库的管理员页面是没有 gh-page 选项的
 从 octopress 把代码克隆到自己的仓库中
  git clone https://octopress.github.com/ tairan.github.com   更新 octopress  bundle update   将代码 Push 到自己的仓库中  git remote add origin http://tairan.github.com git push -a source origin   写博客  rake new_post[&#39;this is a test blog&#39;]  默认 master 分支是用来存放最终生成的静态页面</description>
    </item>
    
    <item>
      <title>使用 Go 调用 Windows API</title>
      <link>https://tairan.net/posts/2012-04-15-the-go-with-win32-api/</link>
      <pubDate>Sun, 15 Apr 2012 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2012-04-15-the-go-with-win32-api/</guid>
      <description>Go 通过 cgo 可以利用现有C语言库
例如在 Windows 中使用 Go 调用 Win32 API
首先安装必要的工具
 Go MingW  %GOPATH% +- src +- w32api +- kernel.go +- testapp +- main.go +- bin # go install testapp +- testapp.exe +- pkg # go install w32api +- windows_386 +- testapp.exe  包装 Windows API
package w32api // #define WIN32_LEAN_AND_MEAN // #include &amp;lt;windows.h&amp;gt; import &amp;quot;C&amp;quot; import &amp;quot;syscall&amp;quot; func GetCurrentDirectory() string { if bufLen := C.GetCurrentDirectoryW(0, nil); bufLen !</description>
    </item>
    
    <item>
      <title>独立程序员接定制软件开发项目总结</title>
      <link>https://tairan.net/posts/2011-06-28-dev-for-custom-software/</link>
      <pubDate>Tue, 28 Jun 2011 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2011-06-28-dev-for-custom-software/</guid>
      <description>定制软件开发中陷阱重重，主要的原因是客户对自己的需求不清楚。很奇怪吧？ 客户竟然对自己想要什么东西说不清楚。事实上，在软件开发领域这是常有的事情。软件这玩意抽象，看得见摸不着，甚至看都看不见。让对技术一无所知的人来描述自己想要什么样的软件，太困难了。 这样的事实对乐天派的程序员来讲就是一个噩梦，这里引用西乔姐在 Twitter 上发表的一段话： @arthur369: 千万不要相信那些在谈需求的时候说：“做一个和XX一样的就行了” 的人。其实这种人最好就不要和他一起做事。因为最后结果只有2种，1、你白做了（需求一定会变动数次）；2、做出来一个垃圾。” 
最近我就接到一个这样的项目，刚开始的版本是对照着某软件的前一个发行版做，然后又变成了要具有此软件当前版本的某些功能，最后又发现客户的客户已经有一个类似的软件，于是乎又开始向模仿此软件+改进的方向前进，漫漫长路多折腾，如此多的波折才算拿到最终的需求。真正的需求拿到了开始加班加点的做了，可麻烦的事情还有。
这是一个远程的项目，我在南边，客户在北面, 还好在同一个国家，都说中国话。沟通的次数那叫一个寒碜，三、五天都不一定能接上头，接头的方式基本是邮件和IM，电联不多，软件本身的开发经费就不高，如果直接电联估计都支援给中国移动了。
在项目进行中第一次改变需求的时候，我是做好了心理准备的，毕竟那么多前辈的经验摆在那里。此时我在想借由着自己快速迭代，不断的改进软件原型来拿到真正的需求，理论上这种方式是可行的，总会拿到最终的需求，然后做下去就是了。可现实是残酷的，没有充足的时间，即使你承接项目不要多少钱，客户那边随着时间的流逝也会损失很多本该赚到的利润，咱都是凡人，耗不起呐。
和此类不甚明白软件开发的客户打交道还有个问题，软件里面的实现似乎并那么重要，漂亮好用的UI才是让他们看起来软件是如此美妙的东西。作为独立工作的程序员，大多对外在美没有多少的品味，黑客们更是喜欢默默无闻、稳定可靠后台运行的程序。缺少在美的层次上的交流，后端代码交流更是一团糟，客户说在这里加个东西然后这样动，你后端的东西写的不好则会伤筋动骨。
总之，定制软件开发的项目成本很高，劳神费力不讨好。因为程序员不但要保证有一个很快的开发速度来适应软件的变化，同时也要担负起教育客户的重任，还要培养出对美欣赏的品味。通常此类软件开发过程中得到的物质报酬不多，好处是对于软件开发的新手来讲，通过那么几次定制软件开发的折腾可以快速成长，怎么说也能成为一个快速山寨的熟手。如果你是一个拿着不错的薪水的在职人员，我看还是算了，与其浪费如此之多的精力和少的可怜的报酬，还不如好好钻研自己本身工作上的业务，或者干脆多陪陪身边的人吧。</description>
    </item>
    
    <item>
      <title>为Fedora 15安装64位的FlashPlayer - Update</title>
      <link>https://tairan.net/posts/2011-06-20-install-flashplayer-64bit-for-fedora-15/</link>
      <pubDate>Mon, 20 Jun 2011 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2011-06-20-install-flashplayer-64bit-for-fedora-15/</guid>
      <description>Update 现在Adobe已经提供正式版本下载 http://get.adobe.com/flashplayer/  总的来说，复制下面的代码并执行就可以将64位的flashplayer安装到fedora 15 x86_64上去了。截至目前为止，Adobe 依然没有官方的正式版flashplayer 64bit版本释放出来，只有在http://labs.adobe.com 能拿到测试版本。不管怎样，测试版本在fedora上工作的也不错。:-)
INSTALL
#!/usr/bin/env bash FLASH=http://download.macromedia.com/pub/labs/flashplayer10/flashplayer10_2_p3_64bit_linux_111710.tar.gz cd /tmp wget -c $FLASH tar zxf flashplayer10_2_p3_64bit_linux_111710.tar.gz # apply plugins for firefox cp libflashplayer.so /usr/lib64/mozilla/plugins/libflashplayer.so # remove cache rm -rf libflashplayer.so rm -rf flashplayer10_2_p3_64bit_linux_111710.tar.gz  UNINSTALL
rm -rf /usr/lib64/mozilla/plugins/libflashplayer.so  </description>
    </item>
    
    <item>
      <title>转战亚马逊EC2</title>
      <link>https://tairan.net/posts/2011-04-14-move-on-amazon-ec2/</link>
      <pubDate>Thu, 14 Apr 2011 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2011-04-14-move-on-amazon-ec2/</guid>
      <description>EC2 Nginx PHP FastCGI MySQL WordPress
关于 Amazon EC2 的教程已经铺天盖地了，有英文也有中文。现在EC2对新注册的用户有优惠，及Micro Instance级别的会有1年的免费份额。注意只是对新注册用户，如果你已经注册了 AWS 账户，即使并没有开通任何服务也不属于新注册用户，意思就是只要你使用就没有免费的。这一点我是用了$2美金的账单换来的教训。网上也有其他同学遇到，看来不仔细阅读文档就是没文化的代表。这里是账单查询地址https://aws-portal.amazon.com/gp/aws/developer/account/index.html?ie=UTF8&amp;action=activity-summary 一旦发现产生莫名其妙的费用，赶紧查。
我这次使用 Amazon EC2 的目的是把即将到期的博客迁移到这里，并且让手中的一些闲置域名也利用起来。其中还有一个更重要的目的就是为部署一个很重要的网站，基于Django的。
首先要做的是迁移博客。 进入 EC2 后需要安装一些软件，因为Micro Instance只能使用Amazon Linux(redhat系)，所以包管理器使用的是yum。
sudo yum install mysql mysql-libs mysql-server php php-mysql spawn-fcgi nginx  启动MySQL后，并更改root用户的密码
sudo service mysqld start /usr/bin/mysqladmin -u root -p -h localhost password &#39;newpassword&#39;  配置 Nginx， 在这里我遇到了一些问题，折腾了一天才搞定。这里要十分的感谢网友 hfw_1984 的帮助。遇到的问题主要集中在fastcgi部分，如果要让Nginx支持我博客的URL格式如http://www.tairan.net/index.php/2011/03/30/follow-the-right-way/ 则必须参照以下配置：
location ~ ^.+\.php { fastcgi_split_path_info ^(.+\.php)(/.+)$; # 这一行必须放在 SCRIPT_FILENAME 上面，否则会被覆盖。 fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; #fastcgi_param PATH_INFO $fastcgi_path_info; # 这两行并不需要 #fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info; include /etc/nginx/fastcgi_params; fastcgi_pass 127.</description>
    </item>
    
    <item>
      <title>守规矩才能行的方便</title>
      <link>https://tairan.net/posts/2011-03-30-follow-the-right-way/</link>
      <pubDate>Wed, 30 Mar 2011 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2011-03-30-follow-the-right-way/</guid>
      <description>规矩是无处不在的，使用工具也有使用工具的规矩，就像你不能拿个榔头去拧螺丝一样。 就算是软件也有其使用的规矩， 经常看到有人抱怨某个软件怎么样的难用，其实大多数情况下他是用使用其他软件的习惯去使用另一个软件，也就是因为没有遵守使用此软件的规矩而带来的诸多不便。当然也有极少部分的软件真的很难用，那么就打破规矩，重新建立一个。
举几个例子， Windows 上的软件管理，如果不用第三方的软件管理工具的话，那么使用MSI安装，卸载就是它的规矩。 Debian/Ubuntu 则是 apt-get 进行软件的管理，如果你使用咒语的话 ./configure &amp;amp; make &amp;amp; make install 那么就要自己去管理软件的诸多文件。 Mercurial 如果你要删除或者移动文件那么就使用 hg rm / hg mv 的命令来做，而不是直接的 rm / mv</description>
    </item>
    
    <item>
      <title>如何判断程序是安装后第一次执行</title>
      <link>https://tairan.net/posts/2011-03-26-is-first-run/</link>
      <pubDate>Sat, 26 Mar 2011 00:00:01 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2011-03-26-is-first-run/</guid>
      <description>有时我们需要在程序第一次启动的时候进行一些初始化工作，如何识别程序是部署后第一次运行呢？ .net framework就提供了这样的功能。
参考这里 http://msdn.microsoft.com/zh-cn/library/system.deployment.application.applicationdeployment.isfirstrun.aspx 
这里还有更多的关于.net 程序部署相关的技术说明 。http://msdn.microsoft.com/zh-cn/library/system.deployment.application.aspx</description>
    </item>
    
    <item>
      <title>如何在Alwaysdata上部署Django应用</title>
      <link>https://tairan.net/posts/2011-02-24-how-to-deploy-django-app-on-alwaysdata/</link>
      <pubDate>Thu, 24 Feb 2011 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2011-02-24-how-to-deploy-django-app-on-alwaysdata/</guid>
      <description>Alwaysdata是一个法国的ISP，提供相当不错的VPS，共享主机等服务，而且免费的项目也相当的好，可惜你需要在墙外才能享受到如此高档的服务。
在Alwaysdata的wiki上已经详细说明了如何部署Django的应用，但是如果一丝不苟的依葫芦画瓢你未必能一次成功，因为这篇文档还遗漏了一点。
你还需要在project的根目录中放一个.htaccess 如下
project |-- apps |-- public |-- django.fcgi |-- .htaccess |-- .htaccess |-- settings.py |-- manage.py  而这个 .htaccess 的内容是：
AddHandler fastcgi-script .fcgi RewriteEngine On RewriteCond %{REQUEST_FILENAME} !-f RewriteRule ^(.*)$ public/django.fcgi/$1 [QSA,L]  </description>
    </item>
    
    <item>
      <title>安全与易用</title>
      <link>https://tairan.net/posts/2010-10-21-security-and-ease-of-use/</link>
      <pubDate>Thu, 21 Oct 2010 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2010-10-21-security-and-ease-of-use/</guid>
      <description>今天在公司里出现了一件事情，让我认真的思考了下Windows平台的易用性和安全。
事情是这样的，我们需要远程登录到一台德语的机器上工作。为了设置可以同时有两个相同用户名的用户远程登录，我们修改了组策略。两个德语文盲想当然的把一个和英语环境相同位置的选项给禁止了，然而那是拒绝远程用户登录的选项。刚改好的时候还很高兴马上用另外一台机器远程登录试用，很不幸将另外一个已经在上面的用户踢掉后自己也无法登录。
根据以前使用Windows的经验加上问Google，发现Windows远程维护是如此的强大。不仅仅是远程注册表编辑，还可以远程编辑组策略，AD，等等一大堆的东西。这一切在MMC中就可以完成。
如此强大的远程管理，却把我引入到为什么Windows不安全的地方去了。因为如果这是在Linux上把唯一的SSH关闭了，我还真的没辙。
在Windows上的这些远程控制是可以管理的，你可以选择让它不提供这些服务，然而这一切是Windows的默认设置。没有不安全的系统，只有不靠谱的管理员。默认开启了如此之多的远程服务，又遇到了不靠谱的管理员，在互联网上这个服务器绝对是挂了。
为什么是互联网？互联网就是一个狂野丛林，一不小心就成了别人口中的美味。既然那么危险，为什么Windows还开启了那么多的默认服务？让我们来看看Windows的主要用户吧。企业用户，企业内部和外界的联系至少有道墙，或者根本就不和外界联系。个人用户，虽然它们经常暴露在外面，但是即使他们受到伤害，通常损失也不会太大。这两种用户都有共同点，就是不太关心计算机的技术问题。
了解了Windows的使用者，那么Microsoft&amp;reg;有足够的理由开启这些默认服务，让他们的客户更简单的使用Windows，如果遇到问题，可以让IT远程配置即可。这一切的代价就是开启了很多潜在风险。Microsoft&amp;reg;的人当然不都是傻瓜，解决不了问题，只是这个世界有条准则就是做的越多错的越多。在你不真正了解Windows的时候冒然用它作为互联网服务器，那你会得到很多不错的教训！
在这里我并不是声讨Microsoft&amp;reg;和Windows，而是想提醒自己和大家，浅尝辄止害死人！你懂的。</description>
    </item>
    
    <item>
      <title>使用App Engine跟踪ADSL外网IP</title>
      <link>https://tairan.net/posts/2010-10-12-get-adsl-ip-use-app-engine/</link>
      <pubDate>Tue, 12 Oct 2010 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2010-10-12-get-adsl-ip-use-app-engine/</guid>
      <description>在家使用ADSL拨号上网，并使用一台电脑作为Home Server，这样以来可以在工作的时候发现什么好东西，就可以远程连接到家中的电脑进行下载，也可以在家托管自己的代码仓库等，工作学习生活都不耽误。
使用ADSL有个问题，ADSL使用DHCP服务动态分配的，可能每一次拨号得到的IP都不一样。为了跟踪当前所获得的IP地址，我设计了一个简单的IP跟踪解决方案。下面是结构图：

整个架构分为3个部分 1. Home Server, 定时向 App Engine 发送请求告知自己当前的外网IP 2. Google App Engine, 管理用户和IP地址 3. 用户, 提供预定义的口令后就可以看到当前Home Server的外网IP
我的Home Server使用的是 Gentoo Linux, 每一个小时向 App Engine 发送一次请求，如果使用Windows XP，可以使用系统自带的计划任务，但计划任务的最小执行单位是每天。
Home Server 发送请求，是通过 cURL 来实现的，Windows 需要单独下载。我推荐在Windows上安装 GoW 来使用*nix命令提供的便利。 curl http://xxx.appspot.com/collector?key=GUID 
App Engine 预置了一个字典，用来记录使用者的信息以及GUID auth_data = {&amp;lsquo;auth_name&amp;rsquo;: GUID} 
用户访问 http://xxx.appspot.com/ ，填入自己的 auth_name 提交即可看到 App Engine 最后一次接收到IP信息。
这只是一个简单的解决方案，暂时够我使用。有兴趣研究 Google App Engine 的朋友可以来交流。</description>
    </item>
    
    <item>
      <title>我学习Kohana的方法</title>
      <link>https://tairan.net/posts/2010-06-23-my-way-for-learning-kohana/</link>
      <pubDate>Wed, 23 Jun 2010 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2010-06-23-my-way-for-learning-kohana/</guid>
      <description>Kohana 是一个PHP的开放框架，所以在学习之前需要深入了解PHP。另外Kohana也是一个遵循MVC模式的开发框架，同样在学习之前还需要深入了解什么是MVC，最好动手写过MVC模式的页面，一个练习也行。
接下来我们从那里开始呢？
在动手练习之前，需要阅读文档。先哲说：闲时读手册，忙时问Google。刚开始我们有充裕的时间，那么开始阅读文档吧。
作为入门，属于Getting Started的文档需要优先阅读。通过阅读What is Kohana?，来了解下Kohana都有哪些东西。而 Model View Controller则告诉你Kohana使用了一种改良型的MVC模式。接下来 Cascading Filesystem 告诉你这个改良型的MVC模式是怎么工作的。最后通过阅读Request Flow来了解从浏览器发出请求后Kohana在服务器端是怎么处理的。okay，通过阅读以上的文档就入门了。
阳明先生说，知是行之始，行是知之果，知行功夫不可离。意思是光看文档并不代表你知道，需要动手操练一番才算真知道。
Kohana安装还是很容易的，将整个工程放到web服务器上就可以工作了。如果遇到问题跑不起来怎么办？Fix it! 安迪教授也说了，当你在工作过程中没有得到想要的东西时你就获得了经验。
程序员动手的第一招是&amp;rdquo;Hello World&amp;rdquo;，Kohana已经提供了这一招，所以通过阅读源码来学习这一招是如何发出的，因为Kohana是改良的MVC(也就是HMVC)，那么需要多注意项目的目录结构，看看这些源文件是以什么样的方式组织的。在观摩Kohana提供的入门招数后，让我们来破解这个招式。尝试着修改文件名，类名，以及改变文件目录位置等来验证这一招在什么情况下会失效，这对你加深理解有帮助。
入门招数，学了也拆了，开始模拟演练吧。
新手入门第一课，留言板。很多前辈都推荐新手来实现一个留言板用以学习新的开发环境。动手之前，我们要有个蓝图，不用大，将期望了解的知识点囊括进去即可。web开发的知识点通常有，Session,Cookie的管理，数据库的操作，URL的管理，Ajax，表单验证，异常处理等。限定已经有了，那么就开始来实现留言板吧。
演练开始我们就忙了起来，这时Google就发挥作用了，遇到疑难杂症问Google。作为修炼内力，阅读API加深理解各个类是如何工作。
最后，先哲也说了，尽信书不如无书。文档也有bug，当实际操作和文档描述的行为不相符的时候，那么我们就要玩外科手术了。这就是开源的好处，有bug直接解剖，肚皮划开后一目了然！</description>
    </item>
    
    <item>
      <title>快速建立HTTP Server共享文件</title>
      <link>https://tairan.net/posts/2010-05-28-shared-by-simplehttpserver/</link>
      <pubDate>Fri, 28 May 2010 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2010-05-28-shared-by-simplehttpserver/</guid>
      <description>Python内置了一个简单的Web服务器可以用来建立一个HTTP Server来共享某个目录下的文件，尤其是在Unix-Like+windows的混合网络中更是方便快捷。
Server 假设 IP 为 192.168.1.1
首先进入到需要共享的目录，如 cd ~/share/ 
python -m SimpleHTTPServer 8000 #Python 2.6  OR python -m http.server 8000 #Python 3.0  Client 访问http://192.168.1.1:8000就可以看到Server共享出来的文件了。</description>
    </item>
    
    <item>
      <title>如何识别手机浏览器信息</title>
      <link>https://tairan.net/posts/2010-04-16-how-to-identify-mobile-browser/</link>
      <pubDate>Fri, 16 Apr 2010 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2010-04-16-how-to-identify-mobile-browser/</guid>
      <description>想作一个网站，根据不同的访问者提供不同的显示模板，如适合手机的模板，适合PC浏览器的模板。
从哪里识别访问者的信息，以及如何识别呢？
依据 HTTP 协议，客户端浏览网页的时候会提供一些信息给服务器端。下面是PC浏览器访问时的 $_SERVER 的 dump 信息。 (array) Array ( [ALL_HTTP] =&amp;gt; HTTP_CACHE_CONTROL:max-age=0 HTTP_CONNECTION:keep-alive HTTP_CONTENT_LENGTH:0 HTTP_ACCEPT:application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,/;q=0.5 HTTP_ACCEPT_CHARSET:ISO-8859-1,utf-8;q=0.7,*;q=0.3 HTTP_ACCEPT_ENCODING:gzip,deflate,sdch HTTP_ACCEPT_LANGUAGE:en-US,en;q=0.8 HTTP_COOKIE:__utmz=259664206.1262318873.1.1.utmcsr=google|utmccn=(organic)|utmcmd=organic|utmctr=51xna; __utma=259664206.724256099.1262318873.1262318873.1262318873.1 HTTP_HOST:www.51xna.com HTTP_USER_AGENT:Mozilla/5.0 (X11; U; Linux i686; en-US) AppleWebKit/533.2 (KHTML, like Gecko) Chrome/5.0.342.9 Safari/533.2
[HTTPS] =&amp;gt; off [SCRIPT_NAME] =&amp;gt; /private/Kohana/index.php [HTTP_COOKIE] =&amp;gt; __utmz=259664206.1262318873.1.1.utmcsr=google|utmccn=(organic)|utmcmd=organic|utmctr=51xna; __utma=259664206.724256099.1262318873.1262318873.1262318873.1 [AUTH_PASSWORD] =&amp;gt; [AUTH_TYPE] =&amp;gt; [AUTH_USER] =&amp;gt; [CONTENT_LENGTH] =&amp;gt; 0 [CONTENT_TYPE] =&amp;gt; [PATH_TRANSLATED] =&amp;gt; g:\wwwroot\51xna.com\wwwroot\mobile\index [QUERY_STRING] =&amp;gt; [REMOTE_ADDR] =&amp;gt; 221.227.130.23 [REMOTE_HOST] =&amp;gt; 221.227.130.23 [REMOTE_USER] =&amp;gt; [REQUEST_METHOD] =&amp;gt; GET [SERVER_NAME] =&amp;gt; www.</description>
    </item>
    
    <item>
      <title>基于(LFS)构建一个属于自己的Linux(一)</title>
      <link>https://tairan.net/posts/2010-02-22-building-the-linux-for-myself/</link>
      <pubDate>Mon, 22 Feb 2010 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2010-02-22-building-the-linux-for-myself/</guid>
      <description>想挑战LFS很久了，终于从今天开始动工制作了。以前虽然没有动手开始创建LFS，但是也积累了不少的相关信息，一切都还算顺利。
今天是第一天，主要的工作是编译工具链和一些系统工具为Building the LFS System作准备。
准备HOST(宿主)系统，没有使用LFS-LiveCD, 而是在虚拟机中安装LinuxMint(没有特殊的含义)，在开始之前需要在LinuxMint中安装编译LFS的相关工具。
sudo apt-get install build-essential bison  LFS 的版本为 6.5
LFS 提供了一个文件, 其中包含了构建LFS所有用到的源码下载链接 LFS-BOOK-6.5-wget-list
可以使用wget下载这些源码 wget -c -t 2 -i LFS-BOOK-6.5-wget-list -o down.log 
需要注意的是，Perl-5.10.0 的路径已经被移除，取而代之的是Perl-5.10.1。采用了新的版本Perl后，原来针对5.10.0的patch就不用了。
依照LFS-BOOK的指示，编译起来还是很顺利的。如果英文不好可以对照着金步国翻译的中文版的LFS-BOOK-6.2
通常编译的步骤如下，先解压源码包，如果有patch则应用patch
patch -Np1 -i path_of_the_patch  之后就是念咒语
./configure --prefix=/tools #需要根据文档指示 make make install  具体的编译还是应该参照文档，除非你运气真的很背，否则都会通过的。
编译是一件苦力活，根据机器的性能，也许会耗费你一天甚至更长的时间。其实也有自动化的操作，但是动手敲上一段咒语还是有很多额外的收获。
到此，编译了N个程序后准备工作就告一段落了，编译的这些程序是新世界的基础，很重要、也很费时！ 接下来进入 Building the LFS System</description>
    </item>
    
    <item>
      <title>天才，榜样</title>
      <link>https://tairan.net/posts/2010-02-20-genius-is-example/</link>
      <pubDate>Sat, 20 Feb 2010 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2010-02-20-genius-is-example/</guid>
      <description>每次看到这些大牛们的事迹，心难免都要加速跳动。爱迪生说没有那1%的灵感即使是99%的汗水也不一定能成功，可是付出那99%的汗水也是必要的，不然1%的灵感也只是耍耍小聪明而已！
相信Fabrice Bellard也一定是在不断的挥洒着汗水来实现那1%的灵感。
 计算的威力，智慧的传奇 —— Fabrice Bellard 作者：吕娜 这个世界从来不缺天才，只缺乏利用天分坚持理想和信念不断创新的人，这些人用恒心和努力缔造一个又一个传奇。法国人Fabrice Bellard 就是这样一个了不起的程序员。 Fabrice Bellard1972年生于法国，曾就读于巴黎高等综合理工学院和法国电信研究院。对计算机有着浓厚兴趣的他，高中时就崭露头角，编写出了LZEXE，这是DOS上第一个广泛使用的文件压缩程序。 Fabrice Bellard是一位计算机奇才，在业界有着重要的影响。1996年他编写了一个简洁但是完整的C编译器和一个Java虚拟机Harissa。Fabrice Bellard发明的TinyCC是GNU/Linux环境下最小的ANSI C语言编译器，是目前号称编译速度最快的C编译器。Fabrice Bellard杰作众多且涉及广泛，1998年编写了一个简洁的OpenGL实现TinyGL，2003年开发了Emacs克隆QEmacs，2005年还设计了一个廉价的数字电视系统。 Fabrice Bellard的一个重要杰作是在Linux内核上写了一个CPU模拟器QEMU，这套开放源码的模拟器软件与Bochs、PearPC近似，但具有后两者所不具备的高速度及跨平台等特性。QEMU可以在不同的机器上运行独自开发的操作系统与软件，经由KQEMU这个开源的加速器，能模拟至接近真实电脑的速度。QEMU构思巧妙， 效率极高， 在借助核心态的KQEMU加速器之后，模拟代码的执行速度甚至能够接近真实机器。QEMU已成为目前使用最广泛的模拟器，KVM和Google Android的模拟器都是基于QEMU的。 Fabrice Bellard 可谓博学多才，他另外一个重量级项目是FFmpeg。FFmpeg 单词中的FF 指的是Fast Forward，FFmpeg这个2000年发起著名的开源多媒体播放器项目， 是MPlayer的姊妹项目。这是一个如此重要的成就，没有这个项目，就没有我们今天广为使用的暴风影音等播放器。这个多平台、多功能的多媒体编码解码器由Fabrice Bellard发起并管理，现在是由Michael Niedermayer在进行维护。 天才的创新经常是离经叛道式的超越，Fabriced Bellard的一些项目让人感觉疯狂。比如他曾有一个项目是将带有VGA显卡的PC改装成DVB-T的信号发射器。这样一来，为了防止泄密，公司不仅要封声卡插口，还要焊上显卡插口。 Fabrice Bellard在圆周率算法方面也有着惊人的成就，1997年FabriceBellard提出最快圆周率算法公式。在计算圆周率的过程中，Fabrice Bellard使用改良后的查德诺夫斯基方程算法来进行圆周率的计算，并使用贝利-波温-劳夫算法来验证计算的结果。为了纪念他对圆周率算法所作出的杰出贡献，Fabrice Bellard所使用的改良型算法被命名为Fabrice Bellard算法，这种算法是目前所有圆周率算法中最快的一种，这个计算N位PI的公式比传统的BBQ算法要快47%。 2009年的最后一天，Fabrice Bellard宣布另一重大突破：他用桌面电脑打破了由超级计算机保持的圆周率运算记录。这是一个壮举， 他将PI计算到了小数点后2.7万亿位！更令人惊讶的是， 他使用的不过是价格不到2000欧元的个人PC，仅用了116天，就计算出了PI的小数点后第2.7万亿位，超过了由目前排名世界第47位的T2K Open超级计算机于2009年8月17日创造的世界纪录。新纪录比原纪录多出1200亿位，然而，他使用的这台桌面电脑的配置仅为：2.93GHz Core i7 CPU，6GB内存，7.5TB硬盘! 不过这次为了加快计算完成的速度保住排名第一的位置，Fabrice Bellard使用了9台联网的电脑来对数据进行验证， 若使用一台电脑来验证计算结果的话， 则需要额外增加13天的计算时间。 Fabrice Bellard在圆周率方面的辉煌成就， 使他创造多次圆周率单一位计算的世界纪录（计算10的整次幂位） ， 也曾因此而登上《科学美国人》法文版。 （本文来自《程序员》杂志2010年2月刊） </description>
    </item>
    
    <item>
      <title>谷歌要退出中国了</title>
      <link>https://tairan.net/posts/2010-01-13-google-considers-leaving-china/</link>
      <pubDate>Wed, 13 Jan 2010 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2010-01-13-google-considers-leaving-china/</guid>
      <description>今天互联网上最热的新闻就是谷歌要退出中国了，对于在中国境内的谷歌用户来说，这个无疑是一个巨大的噩耗。有人因此已经为谷歌准备好了谷歌墓志铭。
我本人是一个谷歌重度用户。 第一个是搜索，这个自不用多说，Google的搜索引擎一直是我忙时的最佳伴侣，它总是能给我我想要搜索的结果； 第二个是Google Docs，受够了隔三差五重装Windows时的备份工作，把自己的文档放在Google Docs上，不但有编辑的历史记录，还很方便跟朋友一起分享、共同编辑文档； 第三个就是Gmail了，Web版本的邮件系统Gmail是我使用最舒服的一个，因为在收发邮件的时候根本感觉不到Gmail的存在，一切都那么的如行云流水一般 ，而且还不在你的邮件中插广告；另外企业级的Gmail也很好用，可以使用自己的域名作为邮箱后缀，虽然别人也提供，但Google还是不错的，至少比Live Domain强！ 第四个是Google Reader，一个Online的RSS订阅工具，我的很多知识都是通过Google Reader去订阅获得的，因为很多有价值的信息都放在博客里，而Google Reader就提供了订阅博客以及搜索其中内容的服务。如Gmail一般的易用，如果显示器大点的话更好用，毕竟订阅的太多啦。:-) 第五个是Google Host，这个呢就是用来放一些自己和朋友随便写写的代码，也挺好用，速度也很快。 第六、七、八 &amp;hellip;&amp;hellip; Google为我带来的太多太多了，继续写下去只是会觉得更伤心
这次Google真的要走了，以后访问Google就变成了非法访问！在这个神奇的国度里，我只能努力学好翻墙术来报效祖国了！</description>
    </item>
    
    <item>
      <title>阿凡达 Avatar</title>
      <link>https://tairan.net/posts/2010-01-05-avatar/</link>
      <pubDate>Tue, 05 Jan 2010 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2010-01-05-avatar/</guid>
      <description>说啥呢？ 其实对于电影本身真的没啥好说的，有条件的去看IMAX+3D，没条件的看普通3D，剩下没条件的去创造条件到电影院看。
不在电影院看《Avatar》就等于没看过！
鼓吹完大家为美帝国贡献GDP之后，来谈谈Avatar背后的故事吧。
作为技术人员，研究一下电影背后的有关技术的话题，还是很有意思的。《Avatar》所带来的震撼是科技的进步！
　为了能百分百的表现潘多拉这个奇绝的梦幻世界，卡梅隆使用了三项突破性技术：虚拟摄像技术、表情抓取，和联合数字立体摄影机（fusion camera system）。 虚拟摄像机技术目前为止还主要用于3D虚拟世界游戏，比如《塞尔达传说》系列游戏，游戏者控制虚拟世界中自己的人工智能体，将人物行为信息实时双向反馈，人物所处的三维立体环境随着其动作位置变化实时发生变化。在《阿凡达》中，演员佩戴无数感应器进行“行动抓取”，电脑对抓取的数据直接进行处理，将其所代表的虚拟人物按预制比例直接显示在监控器上，从而使导演能实时观测虚拟人物与虚拟电子潘多拉世界的交互效果。 表情抓取指抓取演员表情的电脑图形技术。卡梅隆在洛杉矶的Playa Vista建立了一个比一般表演抓取工作室大5倍的专门舞台（the volume），安装了120个固定摄像头，全角度抓取演员表演的全部信息；扮演Na&#39;vi人的演员同时佩戴一个特制的帽子，由一部微型摄像机详细记录其在表演中面部表情的一切变化。卡梅隆希望借此传输95%的演员表演和面部表情信息到他或她的数码虚拟人物身上。结果便是无比逼真的成像效果，观众完全无法区别真人与虚拟人物的交互。 （http://www.popularmechanics.com/technology/industry/4339457.html） 联合数字立体摄影机则是导演卡梅隆和数字摄像技术创新者，摄像师Vince Page共同开创的3D立体摄像系统。此系统使用两台索尼HDC-F950 高清摄像镜头，如同人的左右眼一样距离大约70毫米同时拍摄，随着人物距离镜头远近的变化自动调整左右两个镜头之间的距离，并将数据传回相应的EVS XT[2]成像处理系统进行合成，制造出最类似人眼的立体景深感受。联合数字立体摄影机如今已被广泛用于了不少3D电影的拍摄，包括卡梅隆自己使用同一技术拍摄的3D纪录片《深海异形》。 （http://video.google.com/videoplay?docid=-241532803911842846#） 没有这三项技术创新就没有那种身临其境的潘多拉星体验，观众就不能切身体会那种神秘、迤逦、瑰奇，不能感受身骑龙鸟翱翔的速度、不能领会漫游夜森林的色彩，不能感知生命之树的呼吸与呢喃。而这一切的感受都是属于影院的，是确保故事逼真情感真切的关键。  作为程序员，当看到 Fenng 的这篇文章 制作《阿凡达》特效的超级计算机时，我的心加速跳动了几下。
是 Linux！ 
HP Cluster Platform 3000BL 集群平台作为其解决方案， 操作系统是 Linux！ 看到了吧，研究和使用Linux是大有前途的，可大(大型集群)、可小(嵌入式)，作为程序员的你，赶紧加入这趟Linux高铁吧！</description>
    </item>
    
    <item>
      <title>理解Drupal模块之Google</title>
      <link>https://tairan.net/posts/2009-12-02-understand-the-google-module-drupal-modules/</link>
      <pubDate>Wed, 02 Dec 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-12-02-understand-the-google-module-drupal-modules/</guid>
      <description>Google 是居家旅行、工作学习必备之搜索引擎，而且Google还可以给我们的网站带来收入。请看我细细道来：
Google的爬虫自不用说，不知道哪天就过来爬了你的网站，可这太依赖于运气，我们需要主动一点，向Google提交我们的网站信息帮助Google更好的索引我们的网站内容(?_? 咋就那么心甘情愿的交给Google呢)。同样Google为了方便我们提交资料，搞了个叫Sitemap的东西作为所有提交资料的规范格式。如此一说，我们对Drupal相关模块需求就了解了，我们需要一个能自动生成网站Sitemap的模块来供Google爬虫享用。
在Drupal模块页搜索&amp;rdquo;sitemap&amp;rdquo;， 首先映入眼帘的就是我们需要的那个啦 :-) 。下载、上传、启用模块不用罗嗦。Drupal Sitemap　模块中有５个功能，其中　Sitemap　是核心功能，必须滴！剩下的在仔细阅读说明后酌情启用！在51xna.com我启用了　XML sitemap engines　和　XML sitemap node　两个功能。这两个功能的用法还是蛮简单的，仔细阅读说明即可。
我们网站的资料都交给Google了，那么怎么知道网站都有哪些人来访问呢？这个问题Google也有解决方案，Google Analytics，顾名思义就是用来分析网站访问者的，如访问者的来源地、使用的浏览器、操作系统、访问页面、停留时间等等。
Drupal也有相关的模块来满足我们的这个需要，再次到Drupal模块页搜索“Analytics”，然后。。。（省略若干苦力活）在设置页面填上Google Analytics的帐号即可，其他的设置仔细阅读说明酌情操作。
最后，我们要从Google那里弄点米米养小站了。题外话，你该不是真的以为Google就是一个搜索引擎吧？其实Google是一广告机器，详细点说Google是一个跟广告有关的赚钱机器。Google Adsense 就是这部机器的关键部件之一。我们在Google Adsense上申请个账户，然后在自己的网站上提供广告位，然后Google利用你提供的广告位放广告，如果有人点击这些广告位上的广告，Google就按照专门的计算方式来给你分成，注意啦，分的是$美元。所以弄个Adsense的模块放在网站上是有必要的。
Drupal那里也有Google Adsense的相关模块（真的是要什么有什么:-)）
Adsense模块的功能还挺多，有7个。AdSense core 这个是核心模块必须启用，Managed ads 管理广告滴，负责显示广告区块的后面详述，其他的功能带 old 的说明是不推荐使用的。
进入到 首页 › 管理 › 站点设置 › AdSense 有一个Publish ID，这是用来输入Google Adsense帐号的，必须滴！现在用 Managed ads 来管理广告啦。在 首页 › 管理 › 站点设置 › AdSense 中设置 Adsense Blocks，这里输入一个正整数，用来表示你准备在页面上放多少个广告位的，先设置一个练练手。这时在 首页 › 管理 › 站点构建 › 区块 中就可以看到一个AdSense: unconfigured 0 的待设置的区块，在配置选项中配置好相应的设置以后，把这个区块放到某个地方，保存收工！</description>
    </item>
    
    <item>
      <title>近距离Drupal概览</title>
      <link>https://tairan.net/posts/2009-11-24-drupal-overview/</link>
      <pubDate>Tue, 24 Nov 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-11-24-drupal-overview/</guid>
      <description>面对国内用户，中文是必须的，因此需要安装中文语言包，目前6.x版本的中文语言包做的不错，下载后直接解压到drupal文件根目录即可。我是在使用drupal安装脚本配置之前就将中文语言包放到drupal所在的文件目录的，这样开始使用drupal安装脚本配置的时候会提示配置中文的。
Drupal 支持主题(Theme)和模块插件(Module)，如此一来给网站换马甲和增加武器装备就变得容易。
如果你浏览了Drupal的主题和模块下载页面，你一定会惊讶主题和模块的种类是如此的多。挑一个喜欢的，实用的下载后分别解压到 drupal/sites/all/{theme,modules}目录下，如果这两个目录没有先创建。把主题和模块放在这里是推荐设置，顾名思义，这是对所有site生效的设置（Drupal支持同一程序下多个站点）。当然如果非要放到Drupal核心模块和主题那里也是可以的，只是不推荐而已。
在确定网站需要的功能后先到module下载页找找，实在没有的话就自己写，如果自己写的还有其他人需要的，再反馈给drupal社区，良性循环！
这是我对Drupal的第一次仔细观察的印象，之前也安装了几次，一直就没仔细瞧过，惭愧。
参考：  Drupal 语言包 Drupal 主题 Drupal 模块  EOF</description>
    </item>
    
    <item>
      <title>Drupal</title>
      <link>https://tairan.net/posts/2009-11-23-setup-drupal/</link>
      <pubDate>Mon, 23 Nov 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-11-23-setup-drupal/</guid>
      <description>Drupal是一个出色的开源CMS系统，Whithouse也在使用。 现在把我今天配置Drupal的时候遇到一些问题以及解决办法记录在此，备查。
软件版本信息 Windows7 IIS7 + FastCGI php-5.3.1-nts-Win32-VC9-x86 drupal-6.14
在PHP官方文档中提供了IIS7如何使用FastCGI配置PHP，需要注意的是当启用php.ini-development作为php.ini配置环境时，在CGI部分默认的是无法工作的，需要做如下修改 cgi.force_redirect = 1 cgi.nph = 0 cgi.fix_pathinfo = 1 fastcgi.impersonate = 0 fastcgi.logging = 1 cgi.rfc2616_headers = 0 
在php.ini文件中需要启用的 extension extension=php_gd2.dll ;用来画图 extension=php_mbstring.dll ;多语言支持 extension=php_mysql.dll ;连接MySQL extension=php_pdo_mysql.dll ;使用PDO的方式连接MySQL，非Drupal必须 extension=php_sqlite3.dll ;连接sqlite3，非Drupal必须 extension=php_xmlrpc.dll ;xmlprc实现接口，非Drupal必须  使用PHP5.3会有遇到 Function ereg() is deprecated Error 在询问了万能的Google后并参考这篇文章Function ereg() is deprecated Error 错误对策，使用文章中提到的最后一种办法来解决这个问题： 在 drupal\includes\file.inc 第 902 行 //elseif ($depth &amp;gt;= $min_depth &amp;amp;&amp;amp; ereg($mask, $file)) { elseif ($depth &amp;gt;= $min_depth &amp;amp;&amp;amp; preg_match(&amp;lsquo;/&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>在linux上使用swap文件</title>
      <link>https://tairan.net/posts/2009-11-22-using-the-swap-file/</link>
      <pubDate>Sun, 22 Nov 2009 00:00:03 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-11-22-using-the-swap-file/</guid>
      <description>作为个人用户，为swap分一个磁盘分区有些浪费，其实我们可以使用swap file来替代swap 分区，而且还可以很方便的调整swap file文件的大小。
 To add a swap file: 1. Determine the size of the new swap file and multiple by 1024 to determine the block size. For example, the block size of a 64 MB swap file is 65536. 2. At a shell prompt as root, type the following command with count being equal to the desired block size: dd if=/dev/zero of=/swapfile bs=1024 count=65536  3. Setup the swap file with the command: mkswap /swapfile  4.</description>
    </item>
    
    <item>
      <title>云存储</title>
      <link>https://tairan.net/posts/2009-11-16-storage-on-cloud/</link>
      <pubDate>Mon, 16 Nov 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-11-16-storage-on-cloud/</guid>
      <description>过上云生活
如今的生活已经很难离开电脑了，上班在用电脑，下了班到家还是在用电脑，有些人的家里有不止一台电脑。如果有一些方便的工具把自己的一些不那么私密，又经常用到的资料，文件等在这些电脑中同步多好。
这里我有两个云存储要推荐给大家，其实我已经用上了。
一个是 Dropbox 选择Dropbox的原因是他已经可以跨平台，尤其是在Linux上表现不俗。而不像半死不活的liveMash那样只为Windows和Mac提供服务。新注册用户有2G的空间，完成指定的操作后，会给你加上250M，如果你还能邀请到其他人使用Dropbox的话，你的空间就可以升级到3G。如果只是放一些文字资料的话，这个容量还是够用的。
原来还比较担心Dropbox会遇到GFW的挑战，当看到Dropbox是基于Amazon S3的时候，稍微宽心了一点。 All files synced by Dropbox are encrypted and stored securely on Amazon&amp;rsquo;s Simple Storage Service (S3) over several data centers.
另一个是 SkyDrive 难得M$很慷慨的为我们提供了25G的存储空间，可M$到底是M$，在提供这么大空间后小家子气就犯了，不再提供其他的附加工具，你只能在Web上进行文件管理操作（IE当然首选）。不过可以借助第三方软件，把这个25G的网络存储空间当作本地硬盘来使用。如SkyDriveExplorerWindows Only!
这两个工具其实配合起来使用是佳选择，据我的体验来看，Dropbox的文件传输速度相对较快，适合放一些经常要用的资料。SkyDrive作为补充，放一些比较大，使用不是很频繁的资料，或者软件、AV什么的。
工具我给推荐完了，至于怎样用，发挥你的想象力吧！
最后,如果你看完这篇文章还是不知道什么是云存储，去问Google，什么是云存储。
EOF</description>
    </item>
    
    <item>
      <title>我的Linux-KVM</title>
      <link>https://tairan.net/posts/2009-10-14-my-linux-kvm/</link>
      <pubDate>Wed, 14 Oct 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-10-14-my-linux-kvm/</guid>
      <description>kvm Originally uploaded by tairan.wang   用Linux当HOST有很多好处，有很多自由的虚拟机软件可以使用。现在我选择的是 Kernel-based virtual machine &amp;ndash; KVM。</description>
    </item>
    
    <item>
      <title>TMD还是Linux的桌面好用</title>
      <link>https://tairan.net/posts/2009-10-10-linux-destop-is-very-nice/</link>
      <pubDate>Sat, 10 Oct 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-10-10-linux-destop-is-very-nice/</guid>
      <description>本人过着双重生活，白天在MS讨生活，夜晚沉浸在Linux的世界中。一直以来总是认为Windows的桌面环境，尤其是WIN7要比Linux的桌面要易用一些，毕竟Windows是傻瓜化的操作。可今天我才发现Linux的桌面其实更好用。
在本人的双重世界中，Linux的运行时的硬件总是距今有3－4年之久，而Windows的硬件却是当今主流中端配置。所以在在Linux上运行桌面时总感觉没那么的流畅，没有Windows的方便。当我给Linux一个当今低端配置时，Linux世界发生了翻天覆地的变化。输入法也不迟钝了，窗口切换也流畅了，高清电影播放ok了，再跑个Virtual Box玩XP也绰绰有余了。
如此的好处只能自己亲自体验才行，如果你不相信的话，赶紧装个Linux试试！
废话少说，有图为证：</description>
    </item>
    
    <item>
      <title>Linux 发行版漫游指南</title>
      <link>https://tairan.net/posts/2009-09-10-how-to-eat-linux-distribution/</link>
      <pubDate>Thu, 10 Sep 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-09-10-how-to-eat-linux-distribution/</guid>
      <description>平时大家口中所讲的Linux都是指Linux发行版，而真正的Linux则只是Linux kernel。
Linux发行版有很多，这么多的发行版让刚入门和还未入门的人觉得无所适从，不知道该选择哪一个发行版。
在选择发行版之前，对这么多的发行版做一个分析是有必要的。
Linux各个发行版本质的区别是包管理器的区别，相对次要的区别是软件和配置文件在文件系统中的组织方式。
包管理器决定着发行版的特色。
RPM 阵营 Redhat, Fedora, CentOS, OpenSuSE 原始的RPM包没有解决依赖关系，需要自己来安装相关的依赖 RPM新生代 yum, YaST 现在推荐使用这种方式安装
DEB 阵营 Debian, Ubuntu apt-get
ArchLinux 为I686而存在的发行版
源码 Gentoo, BSD Portage emerge 他们的包管理器是用来管理源码的，记录软件源码所在地，以及安装目录和编译选项。
古老的二进制发行版 Slackware 12.0 .tgz 13.0 .txz 目录风格跟BSD很像，同样也需要使用者自己解决依赖关系。
LFS 制作自己的发行版
在使用这些发行版的时候，最好是遵守发行版的包管理策略。如果你要安装的软件并不在现有的包中，最好的解决办法不是念咒语（configure &amp;amp; make &amp;amp; make install）而是是自己都手做一个包，然后再来安装。
众所周知没有万能的解决办法，每个发行版都各有特色，合适的才是最好的。
我最喜欢的桌面发行版 LinuxMint 基于ubuntu, UI定制细腻,稳定。让使用的时候更关注要做的事情，而不是一直的磨刀。</description>
    </item>
    
    <item>
      <title>博客改版记</title>
      <link>https://tairan.net/posts/2009-09-08-my-blog-update-theme/</link>
      <pubDate>Tue, 08 Sep 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-09-08-my-blog-update-theme/</guid>
      <description>我一直想拥有一个简洁的博客主题，因为我始终坚信简单就是美。在更换这个主题之前使用的是从WordPress下载的whitebox主题，选用WhiteBox主题的主要原因也是在于它的简单，虽然离我的要求还有点距离，不过也算是不错的了。
作为一个在互联网上公开的博客，主要目的就是写自己想说的话给别人看，当然有时仅仅是为了给自己看。无论如何，&amp;rdquo;看&amp;rdquo;，是博客对外的主要功能(对内的功能是写)。那么主题样式首先就应该为这个“看”所服务。让看客更方便、更舒服的去关注内容，而不是用脸上那一层厚厚的遮羞粉来刺激看客的视觉神经。
从WordPress的网站上没找到一个比WhiteBox更符合要求的主题了，既然没有现成的，那就自己动手做，合适的东西总是定制的。
在构思了几个草图之后就开始动手了，因为没有美工方面的技能无法从自上而下的实现构思，于是自下而上的用记事本来一转一瓦的堆切成了我的选择。自下而上的推进实在痛苦，在痛苦的间隙我在w3c的网站上找到了理想的样式。http://www.w3.org/html/
主题的样式找到了，可是这也不能直接就用。在对照着其他主题的源码，开始了自己开发WordPress主题之路。
WordPress主题的开发还是比较容易的，去实现几个特定的文件就可以有自己的主题了。
经过一天多的学习＋修补，总算可以投入使用了。做软件产品是一个渐进的过程，第一版上线之后还是有很大的改进空间以及也会有不少隐藏角落的Bug。随着时间的推进，慢慢的来优化这个主题吧。
在测试新样式的时候，IE浏览器总是给你刺激，明明按照标准来写的代码到了IE这里却变了样。一个网友说IE的容错性最好，一想到这个我就对着垃圾桶吐了口浓痰。
IE在容错方面的表现其实是用自己的财力制造壁垒，当大家都遵守标准开发的时候，IE没有什么优势。但是互联网的网站并不都是遵守标准开发的，有些人图省事自作聪明的把代码写的像狗屎一样，而且这样的人还不少。于是IE给这些写狗屎代码的人擦屁股，借此博得他们的好感，毕竟让他们可以更懒，更不负责人的写代码。此时MS的财力优势显示出来了，他可以雇佣大量的测试人员来发现不符合标准的写法，然后在现有的基础上强行的去兼容。就这样，大家看到了今天的IE，已经肥的拽不动了，而且还不好重写。
鉴于IE如此低劣的表现，以及垄断的事实，本博客也就勉强的兼容它了。博客主题的样式以Firefox和Chrome测试为主，除非有什么明显的IE上的失常表现，我才去修理它。所以这里推荐你使用Firefox 或者 Chrome 来浏览本博客。
声明：除了得到使用时的快感以外，本人没有得到任何其他来自Firefox或者Chrome的好处。</description>
    </item>
    
    <item>
      <title>妙用Apache虚拟主机</title>
      <link>https://tairan.net/posts/2009-08-30-the-tips-of-apache-virtualhost/</link>
      <pubDate>Sun, 30 Aug 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-08-30-the-tips-of-apache-virtualhost/</guid>
      <description>如果在本地要同时测试多个网站, 通过子目录的方式访问有些不方便. 而只通过IP地址访问则无法同时访问多个站点. 这里我们就通过httpd server的虚拟主机功能和修改本地DNS文件来模拟通过域名来访问本地的多个测试站点.
这里以apache2为例, 其他的httpd server只要支持虚拟主机也可以使用这样的方法.
首先修改本地DNS解析文件,这样我们就可以通过域名来访问本地站点.
Windows: C:\windows\system32\drivers\etc\hosts
Linux: ubuntu, fedora /etc/hosts
增加新的解析如: #ip url 192.168.1.1 www.tairan.net 192.168.1.1 www.51xna.com  Note: 这里的域名要跟虚拟主机配置中的ServerName保持一致
基于ServerName的虚拟主机配置 NameVirtualHost *:80 ServerName www.tairan.net ServerAdmin webmaster@tairan.net DocumentRoot /var/www/tairan.net ErrorLog logs/tairan.net-error_log CustomLog logs/tairan.net-access_log common  ServerName www.51xna.com ServerAdmin webmaster@51xna.com DocumentRoot /var/www/51xna.com ErrorLog logs/51xna.com-error_log CustomLog logs/51xna.com-access_log common  
设置完毕, 重启apache. 然后就可以通过我们指定的域名来访问在本地的网站了.
另外虚拟主机还可以基于IP设置, 在这里并不适合我们使用.
其他关于虚拟主机的配置参见 Apache document</description>
    </item>
    
    <item>
      <title>可以抛弃 Live Domain 了</title>
      <link>https://tairan.net/posts/2009-08-18-discard-live-domain/</link>
      <pubDate>Tue, 18 Aug 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-08-18-discard-live-domain/</guid>
      <description>Live Domain 在 Google Apps 面前变得如此鸡肋。
还没有使用 Google Apps 的赶快行动吧！ http://www.google.com/a</description>
    </item>
    
    <item>
      <title>本站最新网址</title>
      <link>https://tairan.net/posts/2009-07-06-the-latest-url-of-this-site/</link>
      <pubDate>Mon, 06 Jul 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-07-06-the-latest-url-of-this-site/</guid>
      <description>你是否知道现在搜索色情网站的关键字？ 不知道？ 我来告诉你本篇文章的标题其实就是一个搜索色情网站的关键字。你也许会怀疑，这个看上去和那个毫无关系的词怎么是搜索色情网站的关键词呢？ 看人家CCTV曝光的Google上搜索也是直接和身体器官相关的英文，你这个标题能行吗？
现在就先来说说这个标题为什么能成为搜索色情网站的关键字。
众所周知，色情网站在我国内是违法的。所以开办色情网站的服务器一般都放在国外，放在国外虽然可以在一定程度上躲避国内法律的追究，但是国外的网站很容易被GFW以及5毛党盯上。被盯上的后果大家都知道，被封IP，域名等。那么这些开办色情网站的人就开始和国内警方玩猫捉老鼠的游戏了。你封我一个IP，域名，我再换一个IP，域名。这样的躲猫猫游戏不可避免的会影响色情网站的流量，那么怎么让色狼们知道最新的网址呢？于是，他们就开始发一些垃圾信息，上面写着：本站最新网址 xxxxx
像黄色网站的这种和国内警方斗智斗勇的例子还有很多，有些网站是为国外华人提供的，那么他们也就不担心国内的用户能否访问。这样国内想访问的用户就练成了一身翻墙的好功夫。当然练习翻墙的人们并不全是为了发泄性欲，还有一个很重要的诱惑就是了解一些对于当前政府不利的信息，呼吸一下自由的空气。为了给这些人提供翻墙的手段，于是催生了一些翻墙的软件，免费而且质量绝对比那个4170万的绿坝强很多。
还有一些网站仅为了不被GFW抓住，采取了使用HTTS协议来提供信息，这是一个在传输过程中加密的协议，和银行用的没有两样。这样就可以避免了GFW的追踪，如果GFW连这个也不放过的话，那各位看官就要看紧自己的荷包了。
以上的种种躲猫猫的技术都是在互联网上广为使用的。促成这些技术的使用都是为了规避政府的追踪。因为互联网技术的特性，你用一种方法来堵，我就用另一种方法破，永无止境。我们的政府是一个有一定能力的政府，但是绝对不是一个聪明的政府。我个人认为聪明的政府绝对不会偷偷摸摸的去遮盖，而是应该制定规则，我给你生存的空间，你不能越界，否则严惩。像一些发达国家一样，允许文化的多样性，尊重人民。
最后，这个本站最新网址的关键字是不是真的有效？你去试试就知道了。</description>
    </item>
    
    <item>
      <title>安全的上网</title>
      <link>https://tairan.net/posts/2009-07-01-the-security-internet/</link>
      <pubDate>Wed, 01 Jul 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-07-01-the-security-internet/</guid>
      <description>我们需要安全和保护个人隐私，在单机时代我们所要作的保护主要集中在本地机器的密码方面。在现在的互联网时代，我们除了要面对本地计算机的账户密码安全之外，网络安全是绝对不容忽视的。
这里所说的网络安全主要是指在网络传输过程中的安全。我们浏览网页一般是通过HTTP 协议，而这个协议本身是个一个明文协议，因此就有很多手段来监听数据传输内容。同样也产生一些信息过滤工具。如果你浏览的信息对你来说是保密的或者是隐私信息，那么就需要使用HTTPS（Hypertext Transfer Protocol over Secure Socket Layer）协议了。使用这个协议的主要作用可以分为两种：一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性。
保证数据安全传输一般用在用户信息的确认方面，比如网银或者购物网站等的用户登录，如果网站内容整体都是私密信息，那么整个网站都采用HTTPS也可以。因为HTTPS协议增加了数据传输的验证，那么就带来一些额外的资源占用，在具体应用时就需要在安全和速度方面作一些权衡。
作为互联网的用户，当在一些网站需要输入个人账户信息，以及发布敏感信息的时候就需要关查一下当前所在的网站是否采用了HTTPS协议。
今天是绿坝系统部署的日子，虽然在前一天有关部门已经松口说部分厂商可以推迟部署，但是这也足以引起一些对信息比较敏感的网站提高警惕。比较有特色的 twitter 网站，在大陆访问的用户就会默认使用HTTPS协议。另外在Google App Engine上也支持HTTPS协议。
除了在浏览互联网信息的时候需要注意安全外，发送电子邮件时也是需要注意的。目前比较流行的保密的做法是，把邮件内容进行加密，收件人收到邮件后再进行解密。现在相对安全的加密解密工具是PGP，开源的实现是GnuPG。
总而言之在互联网上作私密的事情一定要充分的利用最先进的保密工具。
参考： HTTPS http://baike.baidu.com/view/14121.htm PGP http://baike.baidu.com/view/7607.htm</description>
    </item>
    
    <item>
      <title>Install VMware Server 2.0 on Slackware 12.2</title>
      <link>https://tairan.net/posts/2009-05-06-vmware-server-on-slackware/</link>
      <pubDate>Wed, 06 May 2009 00:00:01 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-05-06-vmware-server-on-slackware/</guid>
      <description>在 Slackware 12. 2 上安装 VMware Server 2.0 后，总是提示 Login failed due to a bad username or password
解决办法： 到 http://linuxpackages.net/ 去下载 Linux-PAM 我用的是 Linux-PAM 1.0.4 i486
 # &amp;lt;strong&amp;gt;installpkg linux-pam-*.tgz&amp;lt;/strong&amp;gt;  安装linux-pam后，重新安装 VMware Server 2.0 即可！</description>
    </item>
    
    <item>
      <title>优盘上的软件</title>
      <link>https://tairan.net/posts/2009-05-06-portable-applications/</link>
      <pubDate>Wed, 06 May 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-05-06-portable-applications/</guid>
      <description>每个人都有自己使用电脑的习惯，一些常用的设置，常用的工具等。可有时不能在自己熟悉的环境中工作，如临时给菜鸟帮忙等。此时如果有一些软件放在优盘中随身带着就方便很多。
现在，就有人把很多软件改造成可以装安装在优盘上的版本，这个网站http://portableapps.com，就是专门负责这事的。
很多开源的优秀软件，如 7zip, OpenOffice, WinMerge, Notepad++， Firefox, Filezilla 等都已经加入到这个队伍中，涵盖了开发，游戏，画图，教学，网络，多媒体等多个方面。
正是开源让软件世界便的多姿多彩。
除了这些软件，Python 也有可以安装在优盘上的版本。http://www.portablepython.com</description>
    </item>
    
    <item>
      <title>向下兼容</title>
      <link>https://tairan.net/posts/2009-04-24-downward-compatible/</link>
      <pubDate>Fri, 24 Apr 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-04-24-downward-compatible/</guid>
      <description>向下兼容是好是坏？
传说Microsoft就是因为良好的向下兼容的作风赢得了今天的市场。可有些时候，向下兼容会带来很多的包袱。
这几天一直在为安装操作系统的事情发愁。这也是我聊向下兼容的起因。
最近买了一套服务器，配置如下：（终于用上XEON了 ^_^） ASUS P5BV-E INTEL XEON E3110 KINGSTONE ECC DDR2 2G × 2 Seagate ST3500320SV × 4 Seventeam 500w
冲着提高磁盘I/O的方向，准备做RAID 0。因预算紧张，没有买SCSI/SAS硬盘。 安装操作系统时遇到问题了，因为Windows2003的安装光盘没有集成RAID的驱动程序，在安装操作系统的时候需要按F6来用软盘安装驱动程序。如今网龄稍微年轻的人可能都不曾见到软驱为何物，为啥还要用软驱来装驱动呢？在主板上保留软驱接口是一种向下兼容的行为。也许服务器上也还有很多的软驱存在，也许品牌服务器上还提供软驱。
硬件提供商们能不能给个可选的方案，比如用光盘或者U盘来安装RAID驱动？
没有软驱，我开始找另一种解决方案：自己集成带RAID驱动的系统安装光盘。 做Windows 2003的集成光盘，一般都是采用配置OEM信息。手工集成OEM信息虽然简单，资料也多，但是毕竟手工容易出错。好在广大的程序员提供了好用的基于UI操作的集成工具 nlite 就是用来集成Windows 2003的好工具。如果要集成 VISTA 那么可以使用 vlite。在寻找集成工具的同时，我还发现一个好东西，就是下载操作系统更新补丁的工具，使用这个工具可以把操作系统历史的更新补丁下载到本地，然后配合 nlite/vlite 将补丁集成到安装光盘中。服务器嘛，安全第一！
安装好操作系统，还要安装其他的驱动程序如网卡。当我把主板带的驱动光盘插入光驱后，一度让我以为是光驱坏掉了。其实我的光驱是一个CD-ROM，而驱动光盘是DVD，为什么要用DVD作为驱动载体发布呢？是因为数据量太大？我自己检查了一下，光盘中的数据才400多M！此时我又在想，为什么不考虑一下向下兼容呢？明明没有那么的数据，非要用个DVD来装，真不成DVD光驱比U盘的普及度还高？
向下兼容/不兼容？是好是坏呢？这个还是要看市场，看大家有没有这个的需要！Python 3.0 就是迈出了不向下兼容的一步，是好是坏，让时间来说明吧。
PS：这次买的硬盘，有一块中奖了。4块硬盘中开包的第一块硬盘就中奖了&amp;ndash;坏的！我担心其他硬盘也有问题，就用 Linux 上的 badblocks 检查到半夜！淘宝上的卖家服务态度不错，硬盘已经发回去了。下周一就回到手里了。</description>
    </item>
    
    <item>
      <title>Windows Live Admin Center</title>
      <link>https://tairan.net/posts/2009-04-19-windows-live-admin-center/</link>
      <pubDate>Sun, 19 Apr 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-04-19-windows-live-admin-center/</guid>
      <description>在今天的经济危机中，微软能给我们带来什么省钱的方案呢？对于中小企业来说，微软的Windows Live Admin Center （ Windows Live 管理中心）绝对是个好东西！我给他五颗星的评价！
Windows Live 管理中心 是个什么东西呢？ 简单来说就是让微软的Hotmail来为你的域名提供免费的电子邮件托管服务。（也就是企业邮局啦）
如今的电子商务时代，如果公司的名片上印的电子邮箱地址是（@163.com, @126.com, @yahoo.com.cn）都有点不好意思拿出去，于是开始上马企业邮局。企业邮局如果自己维护，除了价格不菲外（硬件，软件，托管费），还有很多技术上的问题要处理。这样的话还要加个人来负责维护等等，反正开销不少。如果直接购买别人的企业邮局，可总觉得不太放心，毕竟现在国内过硬的企业邮局提供商还是很少的。
Windows Live 管理中心的前身是 Custom Domains。这个服务其实已经推出了有很长一段时间了。只是之前收发邮件总要登录到hotmail网站上，很不方便。现在配合 Live Mail 就可以直接在客户端访问，这样显得更专业了。:)
下面简单的介绍下，如何使用 Live Mail + Windows Live Admin Center 来创建自己的企业邮局
要求，用户要有自己的国际域名和一个Windows Live ID（能登陆hotmail的帐号）。
进入到 Windows Live 管理中心 http://domains.live.com/?mkt=zh-cn 并使用自己的 Windows Live ID 登录，然后按照提示一步步做。 其中 增加 DNS 记录类型: MX 需要在你的域名管理界面操作。在域名管理界面中叫 邮件交换记录 (MX)
在使用Live Mail收发邮件之前，需要注意的是。由于当前使用的自己域名为后缀的邮箱如@tairan.net 那么增加帐号时并不能自动的为你选择Hotmail。你可以先把自己的邮箱后缀修改成 @hotmail.com，注册完帐号后，在修改回来，然后就可以使用 Live Mail 收发自己域名的邮件了。或者在注册时选择HTTP协议的邮箱，在服务器地址一栏填上 http://mail.services.live.com/DeltaSync_v2.0.0/sync.aspx 也可以达到相同的目的。
现在去享受难得微软提供的免费的好服务吧！如果在使用过程中有什么疑问，记得留言哦！</description>
    </item>
    
    <item>
      <title>小规模低性能低流量网站设计原则</title>
      <link>https://tairan.net/posts/2009-04-18-small-site-arch/</link>
      <pubDate>Sat, 18 Apr 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-04-18-small-site-arch/</guid>
      <description>小规模低性能低流量网站设计原则 作者: Fenng
到处都是什么大规模啊，高流量啊，高性能之类的网站架构设计，这类文章一是满足人们好奇心，但看过之后也就看过了，实际收益可能并不大；另外一个副作用是容易让人心潮澎湃，没学走先学跑，在很多条件仍不具备的情况下，过度设计、过度扩展(高德纳大爷也说过，&#34;过早优化是万恶之源&#34;)，所以，这里反弹琵琶，讨论一下小规模、低性能、低流量的网站该如何搞法。 如果站点起步阶段可能就是一台机器(或是一台虚拟机，比如 JobsDigg.com )，这个时候，去关注什么数据拆分啊，负载均衡啊，都是没影子的事情。很多大站点的经验绝不能照搬，辩证的参考才是硬道理。 拥抱熟知的技术 动手构建站点的时候，不要到处去问别人该用什么，什么熟悉用什么，如果用自己不擅长的技术手段来写网站，等你写完，黄花菜可能都凉了。所以，有现成的软件组件可用，就不要自己重新发明轮子。人家说 Python 牛，但自己只懂 PHP ，那就 PHP 好了，如果熟悉 .net ?，那也不错。用烂技术不是丢人的事情，把好技术用烂才丢人。 架构层次清晰化 起步的阶段应该清楚的确定下来架构的层次。如果都搅和在一起，业务一旦扩增开来，如果原有的一堆东西拆不开就是非常痛苦的事情。 Web Server  (AppServer)Cache(eg. Memcached)DB层次清晰化的一个体现是(以 LAMP 架构为例)：即使只有一台机器，也应该起个 Memcached 的实例，效果的确非常好--一般人儿我不告诉他...不要把什么都压到 DB 上，DB 一旦 I/O 压力走到磁盘上，问题要暴露出来是很快的。没错，DB 本身也会利用自己的 Cache，但 DB 的Cache 和 Memcached 设计出发点毕竟不一样。 数据冗余? 有必要 很多人并不是数据库设计专家，如果应用要自己设计表结构什么的，基本都是临时抱佛脚，但三个范式很多人倒是记得牢，这是大多数小型 Web 站点遇到的一个头疼事儿，一个小小的应用搞了几十个表... 忘掉范式这个玩意儿! 记住，尽可能的冗余数据，你在数据层陷入的时间越多，你在产品上投入的就会越少。用户更关心的是产品的设计。 前端优化很重要 因为流量低，访客可能也不多，这时候值得注意的是页面不要太大，多数流量低的站点吃亏就在于一个页面动辄几兆(我前两天看到一个Startup的首页有4M之大,可谓惊人)，用户看个页面半分钟都打不开，你说咋发展? 先把基本的条件满足，再去研究前端优化。 功能增加要谨慎 不是有个 80/20 原则么? 把最重要的精力放在最能给你带来商业价值的地方。有些花里胡哨的功能带来很大的开销，反而收效甚微。记住，小站点，最有价值的是业务模式，而不是你的技术有多牛。技术是为业务服务的，不要炫技。 有些网站不停的添加功能，恰恰是把这些新功能变成了压死自己的稻草。 从开始考虑性能 这一点是可选的，但也重要。设计应用的时候在开始就应考虑 Profile 这件事情。一套应用能否在后期进行有效优化和扩展，很大的程度限制在是否有比较合适的 Profile 机制上。需要补充的是，对性能的考虑必然要把有关的历史数据考虑进来。另请参见网站运维之道的容量规划以及其它小帖子。 好架构不是设计出来的 这是最后要补充的一点。好的架构和最初的设计有关系，但最重要的是发展中的演化： 发展--发现问题--反馈--解决问题(执行力)-- 改进-进化到下一阶段--新问题出现(循环)有些站点到了某个阶段停足不前，可能卡在执行力这个地方，来自用户的反馈意见上来了之后，没有驱动力去做改进。最后也是死猪不怕开水烫了。最怕听到的就是&#34;业务不允许&#34;的托词，试想如果不改进业务都没了，那业务还允许么? 其实就是一层心理障碍。 这篇文章有浓重的山寨风格，所以，你不要太认真。如果在用短、平、快的方式构建某些山寨网站的话，可参考其中对你有益的点，不赞同的地方可以直接忽视掉，就没必要费力留言进行争论了。 --EOF-- •好的业务模式(产品) + 很好的技术 = 大赚钱 •好的业务模式(产品) + 能用的技术 = 也赚钱 •差的业务模式(产品) + 好的技术 = 赚吆喝(现在的SNS就差不多这样了) •差的业务模式(产品) + 差的技术 = 自己浪费资源 </description>
    </item>
    
    <item>
      <title>The Linux initating order</title>
      <link>https://tairan.net/posts/2009-03-30-the-linux-initating-order/</link>
      <pubDate>Mon, 30 Mar 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-03-30-the-linux-initating-order/</guid>
      <description>Linux 启动顺序 转自 http://blog.csdn.net/Tcrazyalways/archive/2008/11/27/3391243.aspx
了解了Linux的启动顺序有利于在系统启动时enable/disable各种系统服务
 Linux 启动顺序： 1、 BIOS自检 2、 运行系统内核并检测硬件 3、 运行系统的第一个进程init 4、 init读取系统引导配置文件/etc/inittab中的信息进行初始化 /etc/rc.d/rc.sysinit------系统初始化脚本 /etc/rc.d/rcX.d/[KS]*------根据运行级别配置服务 /etc/rc.d/rc.local---------执行本地特殊配置 其它---------不同运行级别的特殊服务 Linux启动运行init程序来启动相关程序初始化，与启动相关的一个概念是运行级，运行级是操作系统当前运行的级别，在不同运行级别上可以定义属于该运行级的启动程序，系统的运行级别可以在/etc/inittab文件指定，与运行级相关运行程序通过从源/etc/rc.d/init.d下链接到目的/etc/rcX.d，这里X为系统的默认运行级别，因此，默认的启动脚本放在/etc/rc.d/init.d下。 # 缺省的运行级，Linux用到的级别如下： # 0 - 停机（千万不要把initdefault 设置为0 ） # 1 - 单用户模式 # 2 - 多用户，但是没有 NFS # 3 - 完全多用户模式 # 4 - 没有用到 # 5 - X11 # 6 - 重新启动 （千万不要把initdefault 设置为6 ） # 对各个运行级的详细解释： 0 为停机，机器关闭。 1 为单用户模式，就像Win9x 下的安全模式类似。 2 为多用户模式，但是没有NFS 支持。 3 为完整的多用户模式，是标准的运行级。 4 一般不用，在一些特殊情况下可以用它来做一些事情。 例如在笔记本电脑的电池用尽时，可以切换到这个模式来做一些设置。 5 就是 X11 ，进到 X Window 系统了。 6 为重启，运行 init 6 机器就会重启。 如何让系统在启动是运行指定程序，根据启动顺序中的第四步，有两种方式。 一种方式是根据运行级别配置服务。 一种方式是执行本地特殊配置。 举例，任务在启动是运行命令cvslockd： 方式一： 1.</description>
    </item>
    
    <item>
      <title>The IDE is good or evil?</title>
      <link>https://tairan.net/posts/2009-03-14-the-ide-is-good-or-evil/</link>
      <pubDate>Sat, 14 Mar 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-03-14-the-ide-is-good-or-evil/</guid>
      <description>从Java世界的eclipse，netbeans到.NET世界的Visual Studio(VSTS), IDE的很多强大的功能为我们的开发带来了不少的便利，但有时候IDE也给我们带来了很多的烦恼，比如当没有IDE支持的时候，有些人竟然会写不出代码。这到底是IDE好还是坏？
首先可以肯定的一点是 IDE 是用来提高工作效率的。但他不能代替你去思考。所以在使用IDE这些便利的功能时，需要对IDE有一定的认识。
比如 IDE 是通过什么方式来帮我们管理源代码，以及如何知道我们的编译顺序的。 IDE 是根据什么方式来进行智能提示的？ 为什么IDE可以协助我们进行debug？
现在IDE的智能提示很强大，而我们在使用智能提示之前是不是先要清楚每个对象是干什么的？对象里面的方法属性是干嘛的？
如果离开了智能提示，就不知道该怎么写代码，那么即使写出的代码也靠不住。
在学习阶段还是多用文本编辑器(VIM, Notepad++)来写代码，当把程序的各个生命周期(编码，编译，链接，运行等)搞清楚，把所用的语言的各个特性，以及使用相关类库的功能搞清楚再用IDE来帮助你在生产开发时节省体力。</description>
    </item>
    
    <item>
      <title>Run Trac on Windows used SCGI protocol</title>
      <link>https://tairan.net/posts/2009-03-01-run-trac-on-windows-used-scgi-protocol/</link>
      <pubDate>Sun, 01 Mar 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-03-01-run-trac-on-windows-used-scgi-protocol/</guid>
      <description>相关软件信息
 Windows 2003 Trac 0.11.2.3 Python 2.5.4 Apache 2.0.63 mod_scgi  tracd 以Windows service的方式运行 1. 下载Windows RST 2. 修改注册表
参考: http://trac.edgewall.org/wiki/TracOnWindowsStandalone http://onezstudio.blogspot.com/2006/09/getting-started-with-subversion-trac.html</description>
    </item>
    
    <item>
      <title>Don&#39;t up-to-date</title>
      <link>https://tairan.net/posts/2009-02-13-dont-up-to-date/</link>
      <pubDate>Fri, 13 Feb 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-02-13-dont-up-to-date/</guid>
      <description>不要最新的！
貌似很多程序员都喜欢尝新，不停的追赶这语言那技术。此时之前，我也是其中的一份子，而且还比较狂热。这几天遇到的一些事情让我懂得，最新的不一定是最合适的。
说说是什么事情让我停止狂热的追赶最新的东西吧： 现在Python 3.0 已经发布一段时间了，并且大叔告诉我们现在还有很多周边软件没有跟上，所以除非是新项目，还是保守点选择2.6 比较合适。于是乎，就选择2.6.1吧 谁知 安装 trac 以及相关软件的时候，有个装不上，&amp;gt;_&amp;lt; 因为忘记记录存档想不起是哪个软件了，真对不起自己和大家！
再说说Apache吧，一直都选择2.2.x来玩，搭建SVN服务器等。CollabNet 做的集成包真的很好用，安装也简单！可用这个Apache2.2 安装 MOD_SCGI 却死活启动不了服务，从Google的结果来看，虽然有人提出自己编译MOD_SCGI for Apache 2.2，可也是意淫了一下说：“应该很容易”，&amp;ndash; 谁不知道在Windows 上玩这些成本有多高！ 无奈退而求其次，有换了个Apache2.0.x用用。
盲目的求新会走很多弯路。不过也能获得一些经验！ 兰迪教授说：当得不到想得到的东西时，就得到了经验。
虽说不要最新的，也没说一直守旧不前进，使用开源软件时最好用当前版本的前一个次版本最佳。 一来是软件经过了一段时间的考验，二是周边的软件也都跟上了。不至于走两步退一步。
=========================== Trac + Apache + SCGI 的安装方法比较容易，性能稳定方面自己倒是没有测试过。主要参考了这篇文章 Subversion无痛起步 &amp;mdash; Trac 0.10b1 + Apache 2</description>
    </item>
    
    <item>
      <title>The note of install Hyper-V on Windows 2008 Server</title>
      <link>https://tairan.net/posts/2009-02-04-the-note-of-install-hyper-v-on-windows-2008-server/</link>
      <pubDate>Wed, 04 Feb 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-02-04-the-note-of-install-hyper-v-on-windows-2008-server/</guid>
      <description>Windows 2008 Server 上安装和使用 Hyper-V 笔记 安装 Hyper-V 有几个硬性要求 1. CPU 支持 Virtualization 2. 宿主操作系统需要是 64bit
在安装过程中有几个需要注意的地方 1. 宿主操作系统的Location必须是United States的，否则 Hyper-V Virtual Machine Management Service不能启动 2. 如果CPU 支持 Virtualization 却不能启动 Guest 操作系统，那么需要检查主板BIOS中是否将 Virtualization 打开，BIOS已经打开也不行的话，那么升级下BIOS就可以了。我的 HP dc5750 就是升级到最新的BIOS才行的
Hyper-V Guest 操作系统的支持 Hyper-V 和 VPC Server 相比是明确提出支持 Linux 的，可这并不代表所有的 Linux 发行版都能不错的运行在 Hyper-V 上面。下面是 Microsoft 提供的支持 Linux 列表，更多的支持访问 http://www.microsoft.com/windowsserver2008/en/us/hyperv-supported-guest-os.aspx  Linux Distributions (VMs configured with 1 virtual processor only) SUSE Linux Enterprise Server 10 with Service Pack 2 x86 Edition SUSE Linux Enterprise Server 10 with Service Pack 2 x64 Edition SUSE Linux Enterprise Server 10 with Service Pack 1 x86 Edition SUSE Linux Enterprise Server 10 with Service Pack 1 x64 Edition</description>
    </item>
    
    <item>
      <title>Windows-7 beta</title>
      <link>https://tairan.net/posts/2009-01-13-windows-7-beta/</link>
      <pubDate>Tue, 13 Jan 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-01-13-windows-7-beta/</guid>
      <description>Windows 7 beta 发布了，迫不及待的想体验一下这个传说中的 Vista 改良版
Vista 耗时5年也没有弄出一个好东西，毕竟新东西太多，1.0 版本总是伴随着很多bug！
体验 Windows 7 的环境是 Virtual Box 2.1
Windows 7 的最小需求还是蛮大的，开始分配的256M内存是无法安装的，512M是最低要求，磁盘也需要5G多的空白空间！
就安装来说 Windows 7 的一些不错的的地方。 开机画面，很惊艳，终于没有了从古代就存在的开机滚动条 磁盘分区部分和Linux差不多了。在一个空白磁盘上创建分区时会自动的创建一个System盘，划分出200M的空间作为启动。难道模仿Linux的 /boot ？
从光盘启动后，除了选择语言和分区外，一切全自动，完全傻瓜化，对初级用户很友好。不过如今的傻瓜用户也不多见了！(因为要么从不装机，要么就是装机老手)
Windows 7 的安装光盘还有一个功能就是作为维护光盘，操作系统也像应用程序那样的可以repair，这个功能在以前也有，但是使用起来不是很方便，如今的操作方式和应用程序那样repair差不多了。
总结： 如今不再是非白即黑了，各种操作系统其实都在努力的变得更好，抢占更多的市场份额，所以凡是有利的都加以借鉴（抄袭？）Linux越来越像Windows，而Windows也一样越来越像Linux，当然还有其他的操作系统 BSD, Mac-OS等。百家争鸣的好处就是，电脑越来越强大、安全，使用起来也越来越容易了。
Note: 因为是测试版，申请CD-KEY很容易，有个Email，注册加激活就搞定。</description>
    </item>
    
    <item>
      <title>Install GRUB using grub-install</title>
      <link>https://tairan.net/posts/2009-01-08-install-grub-using-grub-install/</link>
      <pubDate>Thu, 08 Jan 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-01-08-install-grub-using-grub-install/</guid>
      <description>用过GRUB以后才知道这个玩意的强大。GRUB加上各种Linux kernel，可以组合成各种启动和安装系统方式。 现在总结一下安装GURB。
环境： Virtual Box #虚拟机 LFS-LiveCD #提供安装GRUB环境
省略若干配置虚拟机的文字&amp;hellip;
我们需要在一块新磁盘上安装GRUB，这块磁盘在系统中为 /dev/hda
首先要分区，格式化。(fdisk, mkfs.xfs)。目前GRUB也支持XFS文件系统启动了
挂载分区 mkdir /tmp/hda mount /dev/hda1 /tmp/hda  安装 grub-install &amp;ndash;recheck &amp;ndash;root-directory=/tmp/hda /dev/hda 
注意: 如果不挂载分区，我这里会提示，不知道其他人有没有遇到这个情况 grub-install does not have any corresponding BIOS drive 
另外在指定驱动器的时候不需要指定分区号 (hda1)
至此，GRUB就安装结束了，重启计算机后就会发现GRUB的提示环境了。</description>
    </item>
    
    <item>
      <title>Multisystem boot via GRUB</title>
      <link>https://tairan.net/posts/2009-01-07-multisystem-boot-via-grub/</link>
      <pubDate>Wed, 07 Jan 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-01-07-multisystem-boot-via-grub/</guid>
      <description>以前安装多系统(Linux®+Windows®)都是在一个硬盘上，先安装Windows后安装Linux，然后使用GRUB (or LILO)来引导系统。 如今生活富裕了，硬盘也多了起来，为了更方便的重装系统。我把Linux®和Windows®分别安装在不同的硬盘上。这时就不用严格限制安装系统谁先谁后了。(其实不是Windows®是笨，而是故意不支持通用引导) 硬盘物理连接结构如下 hdd0 &amp;ndash; Primary IDE 安装 Linux hdd2 &amp;ndash; Second IDE 安装Windows 为什么不在同一根IDE线上安装硬盘呢？往下看 安装Linux并使用GRUB作为boot程序 进入BIOS，把 Primary IDE 设置为 Disable 安装Windows，此时Windows会将hdd2认作当前计算机中的Primary Disk，这样就会在hdd2的MDR创建引导文件。系统安装完毕，这样就可以通过在BIOS来设置first boot来分别引导Linux或Windows了。 接下来配置GRUB，通过GRUB来引导Windows，而不是频繁的修改BIOS。 编辑 /boot/grub/menu.lst 加上下面的代码 title Windows XP map (hdd0) (hdd2) map (hdd2) (hdd0) rootnoverify (hdd2,0) chainloader +1 
这段配置中最重要的就数那两行map指令了。这个是专门为(DOS/Windows)准备的。参见 GRUB Manual
这样就可以使用GRUB来分别引导Linux和Windows了.
总结: 学习一个工具如何使用,首先的就是通读使用手册. 然后不断的动手去做! 如此,当你不断的向期望的目标努力的时候就获得了经验!
文章中提到的 Windows 即是 Windows® Linux 即是 Linux®
这些都是人家的注册商标，要尊重！</description>
    </item>
    
    <item>
      <title>Remote Control via GTalk (XMPP)</title>
      <link>https://tairan.net/posts/2008-12-26-remote-control-via-gtalk-xmpp/</link>
      <pubDate>Fri, 26 Dec 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-12-26-remote-control-via-gtalk-xmpp/</guid>
      <description>想远程控制家里的电脑？却因IP地址动态分配(花生壳可以解决)，远程连接速度慢，机器暴露在外网怕不安全，等种种原因无法理想的实现。
现在我们就另辟蹊径使用Gtalk来远程控制家里的电脑
基本思路如下 Gtalk基于XMPP这个开放的协议。那么我们也基于XMPP协议开发一个客户端就可以和Gtalk进行通讯，可以发送和接收来自Gtalk的消息后，再进行扩展，做成一个shell(命令解释器)。当我们用Gtalk给客户端发送消息后，客户端接收消息进行解释并处理。这样就完成了远程控制的家里电脑的任务。
具体实现 本人才采用的是.NET技术，使用agsXMPP这个开源的封装了XMPP协议的类库。我们基于这个类库就可以和Gtalk通讯了。 下面附上源码，这里只是实现使用Gtalk发送消息，客户端接收到消息后自动将接收的消息再发送回去。
using System;using agsXMPP;using agsXMPP.protocol.client;namespace XMPPClient{class Program{static void Main(string[] args){XmppClientConnection xmpp = new XmppClientConnection();xmpp.Server = &amp;#34;gmail.com&amp;#34;;xmpp.Username = &amp;#34;your_username&amp;#34;;xmpp.Password = &amp;#34;your_password&amp;#34;;xmpp.ConnectServer = &amp;#34;talk.google.com&amp;#34;;xmpp.SocketConnectionType = agsXMPP.net.SocketConnectionType.Direct;xmpp.ClientVersion = &amp;#34;1.0&amp;#34;;xmpp.AutoRoster = true;xmpp.Open();Console.WriteLine(&amp;#34;connected.&amp;#34;);xmpp.Show = agsXMPP.protocol.client.ShowType.away;xmpp.OnLogin += new ObjectHandler(xmpp_OnLogin);xmpp.OnMessage += new MessageHandler(xmpp_OnMessage);Console.ReadKey();}static void xmpp_OnRosterItem(object sender, agsXMPP.protocol.iq.roster.RosterItem item){Console.</description>
    </item>
    
    <item>
      <title>Get faster Gmail</title>
      <link>https://tairan.net/posts/2008-12-22-get-faster-gmail/</link>
      <pubDate>Mon, 22 Dec 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-12-22-get-faster-gmail/</guid>
      <description>IE 7 又被鄙视了！
用IE 7 打开Gmail，在页面的右上角赫然的出现红色字体 Get faster Gmail！
点击这个链接进去后出现的页面是firefox3 和 chrome的下载推荐
Get faster Gmail with a faster browser Browsers are getting faster and better at running web applications like Google Mail that use browser technology to its limits. In order to get the best experience possible and make Google Mail run an average of twice as fast, we suggest that you upgrade your browser to one of the fastest Google Mail supported browsers that work on Windows.</description>
    </item>
    
    <item>
      <title>IDE is not enough - VIM</title>
      <link>https://tairan.net/posts/2008-11-30-ide-is-not-enough/</link>
      <pubDate>Sun, 30 Nov 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-11-30-ide-is-not-enough/</guid>
      <description>你的VSTS是正版的吗？
IDE 是工具，不能代替你思考
有一些人的坏习惯，靠IDE的智能感知来编程
软件开发者需要掌握一个Editor
VIM
VIM 文档</description>
    </item>
    
    <item>
      <title>Why webpy is instable?</title>
      <link>https://tairan.net/posts/2008-11-25-why-webpy-is-instable/</link>
      <pubDate>Tue, 25 Nov 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-11-25-why-webpy-is-instable/</guid>
      <description>有时脑袋有了idea，就想马上实现它。原本PHP是个不错的选择，可是自己以后的工作和规划中已经排除了它，取而代之的是Python。
用Python写一个简单的web application可不是那么容易的事情，以前玩了一段时间的Django，那时还不是1.0 Release版本。好不容易盼到Django 1.0 release了，却发现有很多东西不认识了。怎奈写一个小东东就这么难呢？
寻寻觅觅，忽见web.py是一个更简洁的framework，so, 看文档，做练习。从下班一直捣鼓到此时22:55，发现web.py这个framework中还是有很多Bug的。
官方释放版本是0.23，在cookbook中写到如何使用subapplication。 blog.py import web urls = ( &amp;ldquo;&amp;rdquo;, &amp;ldquo;reblog&amp;rdquo;, &amp;ldquo;/(.*)&amp;ldquo;, &amp;ldquo;blog&amp;rdquo; )
class reblog: def GET(self): raise web.seeother(&amp;lsquo;/&amp;rsquo;)
class blog: def GET(self, path): return &amp;ldquo;blog &amp;rdquo; + path
app_blog = web.application(urls, locals()) 这里有一个bug: AttributeError: &amp;lsquo;module&amp;rsquo; object has no attribute &amp;lsquo;application&amp;rsquo; Google以后才知道要用0.3版的才行，因为0.23版中根本就没有application.py这个文件
这个问题解决以后，在code.py中引用subapp urls = ( &amp;lsquo;/blog&amp;rsquo;, blog.app_blog ) 又有一个bug:  AttributeError: &amp;lsquo;module&amp;rsquo; object has no attribute &amp;lsquo;app_blog&amp;rsquo; 
痛苦阿，明天还要上班！暂时放一下web.py，让我在研究一下Django吧，好歹熟悉一些。如今的Django不仅很美，而且还很强壮，当然也很肥胖(相对)。
开源，路还很长。祝福web.py</description>
    </item>
    
    <item>
      <title>编程不是构建软件，而是设计软件。-- 源码就是设计</title>
      <link>https://tairan.net/posts/2008-11-21-code-as-design/</link>
      <pubDate>Fri, 21 Nov 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-11-21-code-as-design/</guid>
      <description>什么是软件工程中最重要的产出？毫无疑问是代码。代码是给人读的，偶尔让机器运行一下。为了给读代码的人提供便利，我们就需要给代码一些自描述信息（Meta）。这些Meta信息就是相关的文档，注释等。关于是否需要文档在javaeye还有很激烈的讨论。
下面让我们看看大师是怎么说的：英文原版 至今，我仍能记起当我顿悟并最终产生下面文章时所在的地方。那是1986年的夏天，我在加利福尼亚中国湖海军武器中心担任临时顾问。在这期间，我有幸参加了一个关于Ada的研讨会。讨论当中，有一位听众提出了一个具有代表性的问题，“软件开发者是工程师吗？”我不记得当时的回答，但是我却记得当时并没有真正解答这个问题。于是，我就退出讨论，开始思考我会怎样回答这样一个问题。现在，我无法肯定当时我为什么会记起几乎10年前曾经在Datamation杂志上阅读过的一篇论文，不过促使我记起的应该是后续讨论中的某些东西。这篇论文阐述了工程师为什么必须是好的作家（我记得该论文谈论就是这个问题——好久没有看了），但是我从该论文中得到的关键一点是：作者认为工程过程的最终结果是文档。换句话说，工程师生产的是文档，不是实物。其他人根据这些文档去制造实物。于是，我就在困惑中提出了一个问题，“除了软件项目正常产生的所有文档以外，还有可以被认为是真正的工程文档的东西吗？”我给出的回答是，“是的，有这样的文档存在，并且只有一份——源代码。”
把源代码看作是一份工程文档——设计——完全颠覆了我对自己所选择的职业的看法。它改变了我看待一切事情的方式。此外，我对它思考的越多，我就越觉得它阐明了软件项目常常遇到的众多问题。更确切地说，我觉得大多数人不理解这个不同的看法，或者有意拒绝它这样一个事实，就足以说明很多问题。几年后，我终于有机会把我的观点公开发表。C++ Journal中的一篇有关软件设计的论文促使我给编辑写了一封关于这个主题的信。经过几封书信交换后，编辑Livleen Singh同意把我关于这个主题的想法发表为一篇论文。下面就是这篇文章。
——Jack Reecves, December,22,2001 什么是软件设计？ Jack W.Reeves, 1992
面向对象技术，特别是C++，似乎给软件界带来了不小的震动。出现了大量的论文和书籍去描述如何应用这项新技术。总的来说，那些关于面向对象技术是否只是一个骗局的问题已经被那些关于如何付出最小的努力即可获得收益的问题所替代。面向对象技术出现已经有一段时间了，但是这种爆炸式的流行却似乎有点不寻常。人们为何会突然关注它呢？对于这个问题，人们给出了各种各样的解释。事实上，很可能就没有单一的原因。也许，把多种因素的结合起来才能最终取得突破，并且这项工作正在进展之中。尽管如此，在软件革命的这个最新阶段中，C++本身看起来似乎成为了一个主要因素。同样，对于这个问题，很可能也存在很多种理由，不过我想从一个稍微不同的视角给出一个答案：C++之所以变得流行，是因为它使软件设计变得更容易的同时，也使编程变得更容易。
虽然这个解释好像有点奇特，但是它却是深思熟虑的结果。在这篇论文中，我就是想要关注一下编程和程序设计之间的关系。近10年来，我一直觉得整个软件行业都没有觉察到做出一个软件设计和什么是真正的软件设计之间的一个微妙的不同点。只要看到了这一点，我认为我们就可以从C++增长的流行趋势中，学到关于如何才能成为更好的软件工程师的意义深远的知识。这个知识就是，编程不是构建软件，而是设计软件。
几年前，我参见了一个讨论会，其中讨论到软件开发是否是一门工程学科的问题。虽然我不记得了讨论结果，但是我却记得它是如何促使我认识到：软件业已经做出了一些错误的和硬件工程的比较，而忽视了一些绝对正确的对比。其实，我认为我们不是软件工程师，因为我们没有认识到什么才是真正的软件设计。现在，我对这一点更是确信无疑。
任何工程活动的最终目标都是某些类型的文档。当设计工作完成时，设计文档就被转交给制造团队。该团队是一个和设计团队完全不同的群体，并且其技能也和设计团队完全不同。如果设计文档正确地描绘了一个完整的设计，那么制造团队就可以着手构建产品。事实上，他们可以着手构建该产品的许多实物，完全无需设计者的任何进一步的介入。在按照我的理解方式审查了软件开发的生命周期后，我得出一个结论：实际上满足工程设计标准的惟一软件文档，就是源代码清单。
对于这个观点，人们进行了很多的争论，无论是赞成的还是反对的都足以写成无数的论文。本文假定最终的源代码就是真正的软件设计，然后仔细研究了该假定带来的一些结果。我可能无法证明这个观点是正确的，但是我希望证明：它确实解释了软件行业中一些已经观察到的事实，包括C++的流行。
在把代码看作是软件设计所带来的结果中，有一个结果完全盖过了所有其他的结果。它非常重要并且非常明显，也正因为如此，对于大多数软件机构来说，它完全是一个盲点。这个结果就是：软件的构建是廉价的。它根本就不具有昂贵的资格；它非常的廉价，几乎就是免费的。如果源代码是软件设计，那么实际的软件构建就是由编译器和连接器完成的。我们常常把编译和连接一个完整的软件系统的过程称为“进行一次构建”。在软件构建设备上所进行的主要投资是很少的——实际需要的只有一台计算机、一个编辑器、一个编译器以及一个连接器。一旦具有了一个构建环境，那么实际的软件构建只需花费少许的时间。编译50 000行的C++程序也许会花费很长的时间，但是构建一个具有和50 000行C++程序同样设计复杂性的硬件系统要花费多长的时间呢？
把源代码看作是软件设计的另外一个结果是，软件设计相对易于创作，至少在机械意义上如此。通常，编写（也就是设计）一个具有代表性的软件模块（50至100行代码）只需花费几天的时间（对它进行完全的调试是另外一个议题，稍后会对它进行更多的讨论）。我很想问一下，是否还有任何其他的学科可以在如此短的时间内，产生出和软件具有同样复杂性的设计来，不过，首先我们必须要弄清出如何来度量和比较复杂性。然而，有一点是明显的，那就是软件设计可以 极为迅速地变得非常庞大。
假设软件设计相对易于创作，并且在本质上构建起来也没有什么代价，一个不令人吃惊的发现是，软件设计往往是难以置信的庞大和复杂。这看起来似乎很明显，但是问题的重要性却常常被忽视。学校中的项目通常具有数千行的代码。具有10 000行代码（设计）的软件产品被它们的设计者丢弃的情况也是有的。我们早就不再关注于简单的软件。典型的商业软件的设计都是由数十万行代码组成的。许多软件设计达到了上百万行代码。另外，软件设计几乎总是在不断地演化。虽然当前的设计可能只有几千行代码，但是在产品的生命期中，实际上可能要编写许多倍的代码。
尽管确实存在一些硬件设计，它们看起来似乎和软件设计一样复杂，但是请注意两个有关现代硬件的事实。第一，复杂的硬件工程成果未必总是没有错误的，在这一点上，它不存在像软件那样让我们相信的评判标准。多数的微处理器在发售时都具有一些逻辑错误：桥梁坍塌，大坝破裂，飞机失事以及数以千计的汽车和其他消费品被召回——所有的这些我们都记忆犹新，所有的这些都是设计错误的结果。第二，复杂的硬件设计具有与之对应的复杂、昂贵的构建阶段。结果，制造这种系统所需的能力限制了真正能够生产复杂硬件设计公司的数目。对于软件来说，没有这种限制。目前，已经有数以百计的软件机构和数以千计的非常复杂的软件系统存在，并且数量以及复杂性每天都在增长。这意味着软件行业不可能通过仿效硬件开发者找到针对自身问题的解决办法。倘若一定要说出有什么相同之处的话，那就是，当CAD和CAM可以做到帮助硬件设计者创建越来越复杂的设计时，硬件工程才会变得和软件开发越来越像。
设计软件是一种管理复杂性的活动。复杂性存在于软件设计本身之中，存在于公司的软件机构之中，也存在于整个软件行业之中。软件设计和系统设计非常相似。它可以跨越多种技术并且常常涉及多个学科分支。软件的规格说明往往不固定、经常快速变化，这种变化常常在正进行软件设计时发生。同样，软件开发团队也往往不固定，常常在设计过程的中间发生变化。在许多方面，软件都要比硬件更像复杂的社会或者有机系统。所有这些都使得软件设计成为了一个困难的并且易出错的过程。虽然所有这些都不是创造性的想法，但是在软件工程革命开始将近30年后的今天，和其他工程行业相比，软件开发看起来仍然像是一种未受过训练（undisciplined）的技艺。
一般的看法认为，当真正的工程师完成了一个设计，不管该设计有多么复杂，他们都非常确信该设计是可以工作的。他们也非常确信该设计可以使用公认的技术建造出来。为了做到这一点，硬件工程师花费了大量的时间去验证和改进他们的设计。例如，请考虑一个桥梁设计。在这样一个设计实际建造之前，工程师会进行结构分析——他们建立计算机模型并进行仿真，他们建立比例模型并在风洞中或者用其他一些方法进行测试。简而言之，在建造前，设计者会使用他们能够想到的一切方法来证实设计是正确的。对于一架新型客机的设计来说，情况甚至更加严重；必须要构建出和原物同尺寸的原型，并且必须要进行飞行测试来验证设计中的种种预计。
对于大多数人来说，软件中明显不存在和硬件设计同样严格的工程。然而，如果我们把源代码看做是设计，那么就会发现软件工程师实际上对他们的设计做了大量的验证和改进。软件工程师不把这称为工程，而称它为测试和调试。大多数人不把测试和调试看作是真正的“工程”——在软件行业中肯定没有被看作是。造成这种看法的原因，更多的是因为软件行业拒绝把代码看作设计，而不是任何实际的工程差别。事实上，试验模型、原型以及电路试验板已经成为其他工程学科公认的组成部分。软件设计者之所以不具有或者没有使用更多的正规方法来验证他们的设计，是因为软件构建周期的简单经济规律。
第一个启示：仅仅构建设计并测试它比做任何其他事情要廉价一些，也简单一些。我们不关心做了多少次构建——这些构建在时间方面的代价几乎为零，并且如果我们丢弃了构建，那么它所使用的资源完全可以重新利用。请注意，测试并非仅仅是让当前的设计正确，它也是改进设计的过程的一部分。复杂系统的硬件工程师常常建立模型（或者，至少他们把设计用计算机图形直观地表现出来）。这就使得他们获得了对于设计的一种“感觉”，而仅仅去检查设计是不可能获得这种感觉的。对于软件来说，构建这样一个模型既不可能也无必要。我们仅仅构建产品本身。即使正规的软件验证可以和编译器一样自动进行，我们还是会去进行构建/测试循环。因此，正规的验证对于软件行业来说从来没有太多的实际意义。
这就是现今软件开发过程的现实。数量不断增长的人和机构正在创建着更加复杂的软件设计。这些设计会被先用某些编程语言编写出来，然后通过构建/测试循环进行验证和改进。过程易于出错，并且不是特别的严格。相当多的软件开发人员并不想相信这就是过程的运作方式，也正因为这一点，使问题变得更加复杂。
当前大多数的软件过程都试图把软件设计的不同阶段分离到不同的类别中。必须要在顶层的设计完成并且冻结后，才能开始编码。测试和调试只对清除建造错误是必要的。程序员处在中间位置，他们是软件行业的建造工人。许多人认为，如果我们可以让程序员不再进行“随意的编码（hacking）”并且按照交给他们的设计去进行构建（还要在过程中，犯更少的错误），那么软件开发就可以变得成熟，从而成为一门真正的工程学科。但是，只要过程忽视了工程和经济学事实，这就不可能发生。
例如，任何一个现代行业都无法忍受在其制造过程中出现超过100%的返工率。如果一个建造工人常常不能在第一次就构建正确，那么不久他就会失业。但是在软件业中，即使最小的一块代码，在测试和调试期间，也很可能会被修正或者完全重写。在一个创造性的过程中（比如：设计），我们认可这种改进不是制造过程的一部分。没有人会期望工程师第一次就创建出完美的设计。即使她做到了，仍然必须让它经受改进过程，目的就是为了证明它是完美的。
即使我们从日本的管理方法中没有学到任何东西，我们也应该知道由于在过程中犯错误而去责备工人是无益于提高生产率的。我们不应该不断地强迫软件开发去符合不正确的过程模型，相反，我们需要去改进过程，使之有助于而不是阻碍产生更好的软件。这就是“软件工程”的石蕊测试。工程是关于你如何实施过程的，而不是关于是否需要一个CAD系统来产生最终的设计文档。
关于软件开发有一个压倒性的问题，那就是一切都是设计过程的一部分。编码是设计，测试和调试是设计的一部分，并且我们通常认为的设计仍然是设计的一部分。虽然软件构建起来很廉价，但是设计起来却是难以置信的昂贵。软件非常的复杂，具有众多不同方面的设计内容以及它们所导致的设计考虑。问题在于，所有不同方面的内容是相互关连的（就像硬件工程中的一样）。我们希望顶层设计者可以忽视模块算法设计的细节。同样，我们希望程序员在设计模块内部算法时不必考虑顶层设计问题。糟糕的是，一个设计层面中的问题侵入到了其他层面之中。对于整个软件系统的成功来说，为一个特定模块选择算法可能和任何一个更高层次的设计问题同样重要。在软件设计的不同方面内容中，不存在重要性的等级。最低层模块中的一个不正确设计可能和最高层中的错误一样致命。软件设计必须在所有的方面都是完整和正确的，否则，构建于该设计基础之上的所有软件都会是错误的。
为了管理复杂性，软件被分层设计。当程序员在考虑一个模块的详细设计时，可能还有数以百计的其他模块以及数以千计的细节，他不可能同时顾及。例如，在软件设计中，有一些重要方面的内容不是完全属于数据结构和算法的范畴。在理想情况下，程序员不应该在设计代码时还得去考虑设计的这些其他方面的内容。
但是，设计并不是以这种方式工作的，并且原因也开始变得明朗。软件设计只有在其被编写和测试后才算完成。测试是设计验证和改进过程的基础部分。高层结构的设计不是完整的软件设计；它只是细节设计的一个结构框架。在严格地验证高层设计方面，我们的能力是非常有限的。详细设计最终会对高层设计造成的影响至少和其他的因素一样多（或者应该允许这种影响）。对设计的各个方面进行改进，是一个应该贯穿整个设计周期的过程。如果设计的任何一个方面内容被冻结在改进过程之外，那么对于最终设计将会是糟糕的或者甚至无法工作这一点，就不会觉得奇怪了。
如果高层的软件设计可以成为一个更加严格的工程过程，那该有多好呀，但是软件系统的真实情况不是严格的。软件非常的复杂，它依赖于太多的其他东西。或许，某些硬件没有按照设计者认为的那样工作，或者一个库例程具有一个文档中没有说明的限制。每一个软件项目迟早都会遇到这些种类的问题。这些种类的问题会在测试期间被发现（如果我们的测试工作做得好的话），之所以如此是因为没有办法在早期就发现它们。当它们被发现时，就迫使对设计进行更改。如果我们幸运，那么对设计的更改是局部的。时常，更改会波及到整个软件设计中的一些重要部分（莫非定律）。当受到影响的设计的一部分由于某种原因不能更改时，那么为了能够适应影响，设计的其他部分就必须得遭到破坏。这通常导致的结果就是管理者所认为的“随意编码”，但是这就是软件开发的现实。
例如，在我最近工作的一个项目中，发现了模块A的内部结构和另一个模块B之间的一个时序依赖关系。糟糕的是，模块A的内部结构隐藏在一个抽象体的后面，而该抽象体不允许以任何方法把对模块B的调用合入到它的正确调用序列中。当问题被发现时，当然已经错过了更改A的抽象体的时机。正如所料，所发生的就是把一个日益增长的复杂的“修正”集应用到A的内部设计上。在我们还没有安装完版本1时，就普遍感觉到设计正在衰退。每一个新的修正很可能都会破坏一些老的修正。这是一个正规的软件开发项目。最后，我和我的同事决定对设计进行更改，但是为了得到管理层的同意，我们不得不自愿无偿加班。
在任何一般规模的软件项目中，肯定会出现像这样的问题，尽管人们使用了各种方法来防止它的出现，但是仍然会忽视一些重要的细节。这就是工艺和工程之间的区别。如果经验可以把我们引向正确的方向，这就是工艺。如果经验只会把我们带入未知的领域，然后我们必须使用一开始所使用的方法并通过一个受控的改进过程把它变得更好，这就是工程。
我们来看一下只是作为其中很小一点的内容，所有的程序员都知道，在编码之后而不是之前编写软件设计文档会产生更加准确的文档。现在，原因是显而易见的。用代码来表现的最终设计是惟一一个在构建/测试循环期间被改进的东西。在这个循环期间，初始设计保持不变的可能性和模块的数量以及项目中程序员的数量成反比。它很快就会变得毫无价值。
在软件工程中，我们非常需要在各个层次都优秀的设计。我们特别需要优秀的顶层设计。初期的设计越好，详细设计就会越容易。设计者应该使用任何可以提供帮助的东西。结构图表、Booch 图、状态表、PDL等等——如果它能够提供帮助，就去使用它。但是，我们必须记住，这些工具和符号都不是软件设计。最后，我们必须创建真正的软件设计，并且是使用某种编程语言完成的。因此，当我们得出设计时，我们不应该害怕对它们进行编码。在必要时，我们必须应该乐于去改进它们。
至今，还没有任何设计符号可以同时适用于顶层设计和详细设计。设计最终会表现为以某种编程语言编写的代码。这意味着在详细设计可以开始前，顶层设计符号必须被转换成目标编程语言。这个转换步骤耗费时间并且会引入错误。程序员常常是对需求进行回顾并且重新进行顶层设计，然后根据它们的实际去进行编码，而不是从一个可能没有和所选择的编程语言完全映射的符号进行转换。这同样也是软件开发的部分现实情况。
也许，如果让设计者本人来编写初始代码，而不是后来让其他人去转换语言无关的设计，就会更好一些。我们所需要的是一个适用于各个层次设计的统一符号。换句话说，我们需要一种编程语言，它同样也适用于捕获高层的设计概念。C＋＋正好可以满足这个要求。C++是一门适用于真实项目的编程语言，同时它也是一个非常具有表达力的软件设计语言。C++允许我们直接表达关于设计组件的高层信息。这样，就可以更容易地进行设计，并且以后可以更容易地改进设计。由于它具有更强大的类型检查机制，所以也有助于检测到设计中的错误。这就产生了一个更加健壮的设计，实际上也是一个更好的工程化设计。
最后，软件设计必须要用某种编程语言表现出来，然后通过一个构建/测试循环对其进行验证和改进。除此之外的任何其他主张都完全没有用。请考虑一下都有哪些软件开发工具和技术得以流行。结构化编程在它的时代被认为是创造性的技术。 Pascal使之变得流行，从而自己也变得流行。面向对象设计是新的流行技术，而C++是它的核心。现在，请考虑一下那些没有成效的东西。CASE工具，流行吗？是的；通用吗？不是。结构图表怎么样？情况也一样。同样地，还有Warner-Orr图、Booch图、对象图以及你能想起的一切。每一个都有自己的强项，以及惟一的一个根本弱点——它不是真正的软件设计。事实上，惟一一个可以被普遍认可的软件设计符号是PDL，而它看起来像什么呢？
这表明，在软件业的共同潜意识中本能地知道，编程技术，特别是实际开发所使用的编程语言的改进和软件行业中任何其他东西相比，具有压倒性的重要性。这还表明，程序员关心的是设计。当出现更加具有表达力的编程语言时，软件开发者就会使用它们。
同样，请考虑一下软件开发过程是如何变化的。从前，我们使用瀑布式过程。现在，我们谈论的是螺旋式开发和快速原型。虽然这种技术常常被认为可以“消除风险” 以及“缩短产品的交付时间”，但是它们事实上也只是为了在软件的生命周期中更早地开始编码。这是好事。这使得构建/测试循环可以更早地开始对设计进行验证和改进。这同样也意味着，顶层软件设计者很有可能也会去进行详细设计。
正如上面所表明的，工程更多的是关于如何去实施过程的，而不是关于最终产品看起来的像什么。处在软件行业中的我们，已经接近工程师的标准，但是我们需要一些认知上的改变。编程和构建/测试循环是工程软件过程的中心。我们需要以像这样的方式去管理它们。构建/测试循环的经济规律，再加上软件系统几乎可以表现任何东西的事实，就使得我们完全不可能找出一种通用的方法来验证软件设计。我们可以改善这个过程，但是我们不能脱离它。
最后一点：任何工程设计项目的目标是一些文档产品。显然，实际设计的文档是最重要的，但是它们并非惟一要产生的文档。最终，会期望某些人来使用软件。同样，系统很可能也需要后续的修改和增强。这意味着，和硬件项目一样，辅助文档对于软件项目具有同样的重要性。虽然暂时忽略了用户手册、安装指南以及其他一些和设计过程没有直接联系的文档，但是仍然有两个重要的需求需要使用辅助设计文档来解决。
辅助文档的第一个用途是从问题空间中捕获重要的信息，这些信息是不能直接在设计中使用的。软件设计需要创造一些软件概念来对问题空间中的概念进行建模。这个过程需要我们得出一个对问题空间中概念的理解。通常，这个理解中会包含一些最后不会被直接建模到软件空间中的信息，但是这些信息却仍然有助于设计者确定什么是本质概念以及如何最好地对它们建模。这些信息应该被记录在某处，以防以后要去更改模型。
对辅助文档的第二个重要需要是对设计的某些方面的内容进行记录，而这些方面的内容是难以直接从设计本身中提取的。它们既可以是高层方面的内容，也可以是低层方面内容。对于这些方面内容中的许多来说，图形是最好的描述方式。这就使得它们难以作为注释包含在代码中。这并不是说要用图形化的软件设计符号代替编程语言。这和用一些文本描述来对硬件科目的图形化设计文档进行补充没有什么区别。
决不要忘记，是源代码决定了实际设计的真实样子，而不是辅助文档。在理想情况下，可以使用软件工具对源代码进行后期处理并产生出辅助文档。对于这一点，我们可能期望过高了。次一点的情况是，程序员（或者技术方面的编写者）可以使用一些工具从源代码中提取出一些特定的信息，然后可以把这些信息以其他一些方式文档化。毫无疑问，手工对这种文档保持更新是困难的。这是另外一个支持需要更具表达力的编程语言的理由。同样，这也是一个支持使这种辅助文档保持最小并且尽可能在项目晚期才使之变成正式的理由。同样，我们可以使用一些好的工具；不然的话，我们就得求助于铅笔、纸以及黑板。
总结如下： 实际的软件运行于计算机之中。它是存储在某种磁介质中的0和1的序列。它不是使用C++语言（或者其他任何编程语言）编写的程序。 程序清单是代表软件设计的文档。实际上把软件设计构建出来的是编译器和连接器。 构建实际软件设计的廉价程度是令人难以置信的，并且它始终随着计算机速度的加快而变得更加廉价。 设计实际软件的昂贵程度是令人难以置信的，之所以如此，是因为软件的复杂性是令人难以置信的，并且软件项目的几乎所有步骤都是设计过程的一部分。 编程是一种设计活动——好的软件设计过程认可这一点，并且在编码显得有意义时，就会毫不犹豫的去编码。 编码要比我们所认为的更频繁地显现出它的意义。通常，在代码中表现设计的过程会揭示出一些疏漏以及额外的设计需要。这发生的越早，设计就会越好。 因为软件构建起来非常廉价，所以正规的工程验证方法在实际的软件开发中没有多大用处。仅仅建造设计并测试它要比试图去证明它更简单、更廉价。 测试和调试是设计活动——对于软件来说，它们就相当于其他工程学科中的设计验证和改进过程。好的软件设计过程认可这一点，并且不会试图去减少这些步骤。 还有一些其他的设计活动——称它们为高层设计、模块设计、结构设计、构架设计或者诸如此类的东西。好的软件设计过程认可这一点，并且慎重地包含这些步骤。 所有的设计活动都是相互影响的。好的软件设计过程认可这一点，并且当不同的设计步骤显示出有必要时，它会允许设计改变，有时甚至是根本上的改变， 许多不同的软件设计符号可能是有用的——它们可以作为辅助文档以及工具来帮助简化设计过程。它们不是软件设计。 软件开发仍然还是一门工艺，而不是一个工程学科。主要是因为缺乏验证和改善设计的关键过程中所需的严格性。 最后，软件开发的真正进步依赖于编程技术的进步，而这又意味着编程语言的进步。C++就是这样的一个进步。它已经取得了爆炸式的流行，因为它是一门直接支持更好的软件设计的主流编程语言。 C++在正确的方向上迈出了一步，但是还需要更大的进步。 后 记</description>
    </item>
    
    <item>
      <title>你的网站还在用GB2312?</title>
      <link>https://tairan.net/posts/2008-11-14-encoding/</link>
      <pubDate>Fri, 14 Nov 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-11-14-encoding/</guid>
      <description>最近朋友在导入数据数据的时候出现了很多的方块，显然这是一个编码错误的问题。
这让我想起目前国内网站的一些情况，国内山寨网挺多，基本上站还都是使用GB2312作为默认编码，GB2312，看名字就很有中国特色，不过，像这种基础设置，还是不要做山寨版的好。全球是一家&amp;ndash;地球村！当前UTF-8很好很强大。
UTF-8现在是主流的宽字符集的解决方案，不仅是网站，现在很多源码，文本，xml等都使用UTF-8作为默认编码。
在使用 UTF-8 时需要注意的是 BOM : Byte Order Mark
UTF-8 BOM又叫UTF-8 签名,其实UTF-8 的BOM对UFT-8没有作用,是为了支援UTF-16,UTF-32才加上的BOM,BOM签名的意思就是告诉编辑器当前文件采用何种编码,方便编辑器 识别,但是BOM虽然在编辑器中不显示,但是会产生输出,就像多了一个空行
我们在编辑UTF-8文件时，需要用用现代的，高效的编辑器来coding，如VIM, Notepad++等。至于Windows自带的notepad 当便签还行，干活就免了吧。
另外在网页的meta信息中也要制定UTF-8作为编码。
BTW：有些黄色网站的编码都用UTF-8了，不过他的meta却写着GB2312，防BOT or GFW</description>
    </item>
    
    <item>
      <title>局域网安装CentOS Linux</title>
      <link>https://tairan.net/posts/2008-11-07-install-centos-linux-via-http/</link>
      <pubDate>Fri, 07 Nov 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-11-07-install-centos-linux-via-http/</guid>
      <description>简介
这个星球上Linux发行版的老大哥目前还是Redhat。所以用Redhat做服务器端的操作系统，虽不说是最好，也算是更好的选择了。现在Redhat AS版本收费啦，咱们自个儿用就选CentOS吧，根正苗红。根据我自己的实际情况来介绍一下在没有光驱和网络启动芯片时通过局域网来安装CentOS。准确的来说是用Grub启动后用HTTP方式安装。
安装环境介绍
服务器端介绍 操作系统: ubuntu-8.10 Web Server: lighttpd-1.4.19 IP: 192.168.1.200
客户端介绍 原有操作系统: ubuntu-8.04 gurb 启动
安装前的准备 首先我们需要客户端的启动文件 vmlinuz initrd.img 这两个文件可以在CentOS网站下载CentOS-netinstall.iso 里面的启动文件是最佳选择。 然后准备CentOS安装文件，我选择的是dvd版的iso，这样可以节省很多更换光盘的步骤。
挂载iso文件,为了减少访问权限相关的限制，我把目录挂载到/tmp/centos上。 
mount -o loop /path/of/dvd.iso /tmp/centos  建立到web server目录的链接，我的默认路径是 /var/www 
ln -s /tmp/centos /var/www/centos  做好以上步骤后在浏览器中检查是否能访问http://localhost/centos如果可以的话，服务器端的准备工作就做完了
客户端 将启动文件 vmlinuz initrd.img 传送到客户端 /boot 目录下 编辑 /boot/grub/menu.lst  title CentOS root hda(0,0) kernel /boot/vmlinuz initrd /boot/initrd.img  客户端准备工作就做好了，reboot
安装并配置系统 这些事情实在没有想说的兴趣了，手册上写的清清楚楚。在设置web site时，只要填写ip而不需要协议头http://，CentOS directory 填 /centos 其实也就是dvd的根目录，安装系统相关的文件都在那里。</description>
    </item>
    
    <item>
      <title>.Net 全球通用应用程序开发(一)</title>
      <link>https://tairan.net/posts/2008-11-06-dotnet-globalization/</link>
      <pubDate>Thu, 06 Nov 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-11-06-dotnet-globalization/</guid>
      <description>开发全球化的软件，毫无疑问，Microsoft是很有发言权的。在.NET环境中我们如何开发全球化的软件呢？首先来看看一些来自MSDN的建议，自己在这些建议中加上自己的理解。 http://msdn.microsoft.com/zh-cn/library/w7x1y988.aspx
 全球化最佳做法
 1. 在内部使应用程序代码成为 Unicode。 【Daniel】现在很多程序都使用UTF-8来编码，程序体积的增大已经不能构成什么影响了。
 2. 使用 System.Globalization 命名空间提供的区域性识别类来操作和格式化数据。 * 对于排序，使用 SortKey 类和 CompareInfo 类。 * 对于字符串比较，使用 CompareInfo 类。 * 对于日期和时间格式化，使用 DateTimeFormatInfo 类。 * 对于数字格式化，使用 NumberFormatInfo 类。 * 对于公历和非公历，使用 Calendar 类或特定的 Calendar 实现之一。 【Daniel】全球化带来的问题就是文化相关的冲突，如日历，日期显示的格式，钱币的符号，数字的格式化等。所以对这些文化相关的资源进行操作时就要使用上面提到的特有的操作。
 3. 在适当的情况下，使用 System.Globalization.CultureInfo 类提供的区域性属性设置。使用 CultureInfo.CurrentCulture 属性来执行格式化任务，如日期和时间或数字的格式化。使用 CultureInfo.CurrentUICulture 属性来检索资源。请注意，CurrentCulture 和 CurrentUICulture 属性可以基于每个线程来设置。
 4. 通过使用 System.Text 命名空间中的编码类，使应用程序能够与各种编码相互进行数据读写。不要采用 ASCII 数据。假定在用户可以输入文本的任何位置都将提供国际字符。例如，在服务器名、目录、文件名、用户名和 URL 中接受国际字符。 【Daniel】ASCII 已经过时啦，UTF-8是向下兼容的。
 5. 使用 UTF8Encoding 类时，出于安全原因，建议您使用此类提供的错误检测功能。要打开错误检测功能，请使用带有 throwOnInvalidBytes 参数的构造函数创建该类的实例，并将 throwOnInvalidBytes 的值设置为 true。 【Daniel】UTF-8也有BOM和非BOM之分。</description>
    </item>
    
    <item>
      <title>The C Library</title>
      <link>https://tairan.net/posts/2008-10-29-the-c-library/</link>
      <pubDate>Wed, 29 Oct 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-10-29-the-c-library/</guid>
      <description>当我们学完C语言之后却发现不能用C语言写点什么东西。这种错觉严重的阻碍了大家在C语言道路上前进的步伐。和Java ，C# 一样C语言也有丰富的类库，而且都是经过了时间的考验。下面贴一些比较常用的开源C Library。
libc Home Page 
GNU C Library is one of the most important components of the GNU Hurd and most modern GNU/Linux distributions. It is used by almost all C programs and provides the most essential program interface.
Libstrfunc Home Page
Handy library for manipulating strings, string arrays, buffers, CGI forms, configuration files, textual templates, regular expressions, date/time parsing, et cetera. It handles base64, quoted-printable, url_encode, mime-words and other encoded data.</description>
    </item>
    
    <item>
      <title>摩尔定律</title>
      <link>https://tairan.net/posts/2008-10-28-moerdinglv/</link>
      <pubDate>Tue, 28 Oct 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-10-28-moerdinglv/</guid>
      <description>托摩尔定律的福，如今的PC硬件实在是便宜啊！一般主流的PC也就是3-4k。我们这个价格拿到其它产品上去试试：
一个单反相机，最低也要4k+
一个智能手机，也不便宜2-4k+，比较下体积和功能，除了能打电话哪一点强过PC?
所以嘛有钱还是买个PC玩，超级适合宅男！
以上这些也是就是随便感慨一下，别太过认真的去比较。电子产品始终是消费品，就是图一个新鲜劲。过了瘾就完了。PC 可是我吃饭的家伙！</description>
    </item>
    
    <item>
      <title>IIS &amp; FastCGI</title>
      <link>https://tairan.net/posts/2008-10-20-iis-fastcgi/</link>
      <pubDate>Mon, 20 Oct 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-10-20-iis-fastcgi/</guid>
      <description>Blog 自从搬家到 PHP5ISAPI + IIS + Windows 平台上以来，竟然让服务器宕机多次。查看event log 也没有发现到什么可疑信息。在PHP manual提到以下信息: If you experience 100% CPU usage after some time, turn off the IIS setting Cache ISAPI Application. 
关于这个选项，反复设置可还是出现宕机的情况。看来ISAPI不是那么的可靠。但在IIS上，用什么方式才是PHP的最佳？
FastCGI，Microsoft说这个可以提升PHP在Windows的性能xx倍！稳定性也好！东家这么使劲的鼓吹这玩意，总有一定的道理。实践出真知，先用上再说！
果然，一天下来没再见到Windows宕机。验证的时间是短了点，但是总还是给我带来了欣喜。
参考资料:
配置FastCGI
http://www.pcvc.net/archive/2008/8/26/90.html 中文，简易配置版
http://learn.iis.net/page.aspx/248/configuring-fastcgi-extension-for-iis60/ 官方英文 IIS 6
http://learn.iis.net/page.aspx/246/using-fastcgi-to-host-php-applications-on-iis-70/ 官方英文 IIS 7</description>
    </item>
    
    <item>
      <title>欲善其事，必先利其器</title>
      <link>https://tairan.net/posts/2008-09-21-using-the-good-tools/</link>
      <pubDate>Sun, 21 Sep 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-09-21-using-the-good-tools/</guid>
      <description>欲善其事，必先利其器。不是说没了利器就不能善其事，而是在某种程度上利器是善其事的有力支持。相同的人去劈柴，在同样的时间内，钝斧的效率是远不及利斧的。
昨天我跟老婆一起从枫林路中山医院出发一路骑自行车去朱家角(计划是去上海大观园)。我骑的是一辆凤凰牌公路车，老婆骑的是普通城市车。公路车在速度上远高于城市车，而且骑的人也不会感觉到累。此为器一利。（中途，老婆也试着骑公路车，那个公路车的龙头实在僵硬，老婆在车上浑身紧张)
我的公路车是一周前买的二手车。自己从没骑过公路车，所以就当练习了。前面说过车子的龙头很僵硬，第二就是不能大转弯(非上海俗语中的大转弯)因为前车胎和脚蹬的距离太近，转弯大的时候会碰到脚。（如果这里有所改进，会成为灵活专项的利器之一)
昨天全部路程约90公里。到朱家角的时候，我的双手手腕有些疼痛，手掌更甚。为什么骑自行车手会很疼？我们走的路线是虹桥路转延安西路再转到沪青平公路(318国道)。这一路的道路也不是一马平川，路面状况绝不及奥运会公路自行车比赛的赛道。骑公路车时重心前倾，手臂承受不少的力量，我的公路车没有避震器，在坑洼路面上遇到的颠簸全部通过龙头传递到手臂了。近8个小时的颠簸，手掌已经有些肿胀。今早起来，肩部也是酸痛。（在道路不平的路面骑车，尤其是长时间的，一定要选择有避震器的自行车。这也可以成为利器之一.)
速度，公路车的速度可以轻松保持在25km/h 还可以快速的提高到35km/h。在车上被风吹得感觉太好了。可以上的了高速度，也是利器之一
以上举了一些例子来说明一个好的工具可以带来很多好处，但是这些都是提高成绩的要素，而不是基本功。如果自行车都不会骑，那给你辆超豪华的利器又有何用？
高手和俗人的区别之一是拥有扎实的基本功，并能熟练的使用利器。有了这个就能快速的消灭拦路虎！
btw， 在路上遇到4位看上去60岁以上的老人家，骑自行车。听口音像是北方人，他们向我打听去杭州的路线。猜想杭州也许并不是他们的目的地。</description>
    </item>
    
    <item>
      <title>强烈支持Web标准</title>
      <link>https://tairan.net/posts/2008-09-17-strong-support-for-web-standards/</link>
      <pubDate>Wed, 17 Sep 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-09-17-strong-support-for-web-standards/</guid>
      <description>我在linux下工作，支持正版软件！
有些网站就是懒，依赖着M$的统治地位，开发时就根本不在乎其他平台用户的感受！
今日，我访问国泰君安的网站准备开户在股市低迷时期杀入，可在firefox平台上，填写开户预约的时候，选择地区营业庭时，选择城市后就玩完了，下级菜单无法使用！这不是逼着我转向window吗？
虽然我可以依靠工作的优势得到正版Windows，可是我真的需要在linux下工作，学习！
再次鄙视一下那些乱来的，懒的，急功近利的网站！
强烈支持 Web标准</description>
    </item>
    
    <item>
      <title>记阿里软件开放平台－－淘宝API</title>
      <link>https://tairan.net/posts/2008-09-16-the-api-of-tobao/</link>
      <pubDate>Tue, 16 Sep 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-09-16-the-api-of-tobao/</guid>
      <description>现在很多的internet站点都开放了API，吸引广大的程序员和有眼光的商人利用host站点的资源来进行扩展开发。这样会带来不少的好处。
 host提供者可以免费的获取广大的资源(有技术能力的人)来为他扩展系统，从而提高host用户的粘度，并且host并需要为此负担更多的风险，还可以更便捷的收购！ 寻找更好的创意。俗话说三个臭皮匠顶个诸葛亮，何况隐藏在&amp;rdquo;民间“的程序/创意高手不计其数！ 让草根更容易赚到第一桶金。创业的成本是跟高的，host提供API并共享了庞大的用户群，让一些有能力的个人或小公司得以付出比较少的成本就能将技术转化成生产力！  基于以上和更多的诱惑，淘宝网也开放了自己的API。
这个中秋节有一半的时间在倒腾这个淘宝的API。 首先，阅读文档，这是入门的不二之选。我认为淘宝的文档实在太少，而且文档的发布也不怎么正规。随便找个不不知道是什么身份的人在淘宝的论坛里发个帖子就算是文档的发布了。文档中的示例代码残缺不全，以前看ThinkPHP文档的时候也是这个感觉。
阅读文档之后，实现一个demo。我选择的是淘宝的web版本的API，API调用的方式为REST。另外我需要一个虚拟主机用来托管程序，这里我选择了google的 app engine。所以python也就成了我的主要开发语言。
在淘宝的文档中介绍了.net,java, php 的示例代码。我选择python来实现其实也并不困难。东西准备的差不多了，我们开始实验下吧。在众多杂乱无章的文档中，我看到了些说明。在开发之前要验证一下淘宝API的有效性。如调用 http://sipdev.alisoft.com/sip/rest?sip_apiname=alisoft.validateUser 则会返回xml格式的数据。内容大致是需要appkey。 就这个URL我折腾了好久阿。win+ie, win+firefox, linux+firefox 几个平台我都尝试访问，可是返回的却始终是ContentLength＝0的东西！而淘宝生产环境的API，http://sipd.alisoft.com/sip/rest?sip_apiname=alisoft.validateUser倒是能时不时的返回几个文档中说的结果。
至此只好用淘宝生产环境的API来开发了。
使用淘宝API需要生成一个MD5的签名用来认证。生成签名的步骤是，将code，appkey,appname等属性以及其值拼接成一个字符串后用MD5生成一个32位的字符串。我们都知道MD5签名时，内容有任何细微的差别生成的code都不一样。所以拼接这个字符串一定要小心小心再小心，不要多，不要少，注意区分大小写。
生成签名后就是通过REST来调用API了。
完整使用淘宝API还需要作很多工作，虽然文档比较烂，但总比没有的好。多看看，兴许能捡到什么有用的信息。
BTW：我的第一个淘宝认证API调用失败了，最后的erro是签名不正确。如果谁热心愿意帮助我一下，我把代码发过去帮我review一下！谢谢！</description>
    </item>
    
    <item>
      <title>我想哭但是哭不出来！</title>
      <link>https://tairan.net/posts/2008-09-08-i-want-to-cry-but-i-have-not-any-tear/</link>
      <pubDate>Mon, 08 Sep 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-09-08-i-want-to-cry-but-i-have-not-any-tear/</guid>
      <description>入行做程序员也不是一天两天了，居然还是犯这样的低级错误，绝对不可原谅。 最近在写一个开源的项目svnaccesspolicy(用于管理在apache环境下的svn用户信息) ，基本功能已经完成，这些天一直在重构代码，让项目变得更模块话，更现代一些。重构阿重构，慢慢的快成形了。
这时忍不住要玩 Debian Live USB了，也就是把debian安装在2G的优盘上。安装很容易，为了能让在windows上也能查看优盘上的信息，把优盘分了2个区，分别是fat和fat32格式的。这时也为后面的遭遇埋下了伏笔。
优盘上的debian可以使用了，我就迫不及待的把svnaccesspolicy的源代码cut到了优盘上进行开发。此时既没check in代码也没用copy。
在家里使用一切到还顺利，毕竟全是linux环境。等到了公司，才发现windows竟然不认识分区的优盘，只能看到优盘的第一个主分区。而那个主分区是live debian系统的，源码都不在那里。于是乎，打开vmware尝试重新整理优盘。在做这些之前，由于live系统的不方便，就把代码打包压缩，并复制到了 vmdk (vmware的虚拟硬盘上)。然后尝试安装了centos, suse, ubuntu 等，再次证明如此安装系统到优盘上是需要大量做工作的。就暂时放弃，改装最新的live debian。
一切算是回到从前，准备把备份在vmware虚拟硬盘上的文件还原的时候，这才发现虚拟硬盘上空空也！空空也！辛苦的工作就这样付之东流！
切记，切记，工作要稳重。 实验环境要和工作环境完全分开。否则真的是欲哭无泪阿！</description>
    </item>
    
    <item>
      <title>Google Chrome 第一天体验</title>
      <link>https://tairan.net/posts/2008-09-03-google-chrome/</link>
      <pubDate>Wed, 03 Sep 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-09-03-google-chrome/</guid>
      <description>google 终于推出浏览器了，试想google的大部分应用都是通过浏览器操作的，怎么能让自家命脉捏在别人手上？ 如今满天飞的浏览器，google chrome 又能给大家带来什么？
google 其实还是很霸道的(不霸道如何跟更强悍的microsoft抗争，不霸道怎么能降服如此之多的电脑菜鸟？哈哈)，google chrome 的安装是一步到位，不给你任何选择的余地，默认安装在C盘。(还好根据以往经验C盘绝对是足够的大)
早在昨天就通过新闻和google blog了解了下google chrome，当启动google chrome以后还是掩饰不住对它简洁风格的喜爱。那是一个漂亮 ^_^。
今天是在公司初体验google chrome的，这个不刚使用就发现个有个地方让人无法忍受。我们公司的网络环境是这样的, ISA Server 把关，客户端使用代理上网。如果把网络连接设置为自动检测代理，google chrome的速度就真的让人无法忍受了，每次请求文件都要长时间的等待代理响应。把google chrome的rander快速的特性完全掩盖了。经过研究，把自动检测代理设置unchecked，速度会提升不少。
下班回家后，迫不及待的在自己的本本上安装 gogole chrome，公司里的代理问题不存在了。完全沉浸在它的快速，简洁的体验中。。。
BTW：老婆把我的本本霸占玩泡泡糖了，我只好在128M内存的图拉丁的ubuntu上写blog。有时间给大家介绍一下我的轻量级桌面。(其实也不轻量，web server 就安装了 apache2 lighttpd nginx , DB server 装了 MySQL, PostgreSQL 而且此时都启动起来了。呵呵)</description>
    </item>
    
    <item>
      <title>IE 8 beta 2 貌似还不错</title>
      <link>https://tairan.net/posts/2008-08-28-ie-8-beta-2-is-good/</link>
      <pubDate>Thu, 28 Aug 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-08-28-ie-8-beta-2-is-good/</guid>
      <description>很久以前使用的 IE 8 beta 1 真的是惨不忍睹，这不，beta 2 出来救火了。粗略的使用下，访问了几个站点。发现速度快了些。有些网站的排版有点变型，如豆瓣，CSDN等，还好变型的不是很离谱！ 样子有了些改进，比IE7漂亮。
回家在xp上安装一个 IE 8 beta 2
下载地址</description>
    </item>
    
    <item>
      <title>Python中的lambda函数</title>
      <link>https://tairan.net/posts/2008-08-25-lambda-in-python/</link>
      <pubDate>Mon, 25 Aug 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-08-25-lambda-in-python/</guid>
      <description>Python支持一种有趣的语法，它允许你快速定义单行的最小函数。这些叫做lambda函数，是从Lisp借鉴来的，可以用在任何需要函数的地方。
 总的来说，lambda函数可以接收任意多个参数并且返回单个表达式的值。lambda函数不能包含命令，包含的表达式不能超过一个。不要试图向lambda函数中塞入太多的东西；如果你需要更复杂的东西，应该定义一个普通函数，然后想让它多长就多长。（当然，太长的函数也是不推荐的） lambda函数是一种风格问题。不一定非要使用它们；任意能够使用它们的地方，都可以定义一个单独的普通函数来进行替换。一般将它们用在需要封装的特殊的，非重用代码上，避免令代码中充斥着大量的单行函数。  lambda示例 1 # 普通函数
2 def f(x):
3 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return x2
4 
5 &amp;gt;&amp;gt;&amp;gt;f(3)
6 6
7 
8 # lambda函数
9 func = lambda x: x2
10 &amp;gt;&amp;gt;&amp;gt;func(3)
11 6
12 &amp;gt;&amp;gt;&amp;gt;(lambda x: x*2)(3)
13 6</description>
    </item>
    
    <item>
      <title>Vim</title>
      <link>https://tairan.net/posts/2008-08-06-vim/</link>
      <pubDate>Wed, 06 Aug 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-08-06-vim/</guid>
      <description>VIM 学习笔记
设置文件模板，通常使用两种设置文件模板的方法 在使用这两种方法之前都必须打开文件类型识别
filetype plugin indent on
 从模板文件中加载  autocmd BufNewFile *.py 0r $VIM/vimfiles/templates/python.tpl
文件必须存在，这里使用的是Windows版本的默认目录结构
 通过程序来设置文件中的模板 autocmd BufNewFile.py &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/span&amp;gt;callsetline(1,&amp;#39;#!/usr/bin/python&amp;#39;)| &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/span&amp;gt;callsetline(2,&amp;#39;# -- coding:utf-8 -*-&amp;#39;)| &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/span&amp;gt;callsetline(3,&amp;#39;# $Id$&amp;#39;)| &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/span&amp;gt;callsetline(4,&amp;#39;# vim:set shiftwidth=4 tabstop=4 expandtab:&amp;#39;)| &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/span&amp;gt;callsetline(5,&amp;#39;&amp;#39;)| &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; \exe &amp;#39;normal G&amp;#39;  在vim中一行命令如果需要折行的话在下一行的开始使用 \ 符号，| 作为管道符，把多个命令穿起来作为一组命令执行  两种设置方法采用实现 BufNewFile 事件，并自动执行特殊命令的方法来实现模板操作的</description>
    </item>
    
    <item>
      <title>The Subversion on Google</title>
      <link>https://tairan.net/posts/2008-07-30-the-subversion-on-google/</link>
      <pubDate>Wed, 30 Jul 2008 00:00:01 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-07-30-the-subversion-on-google/</guid>
      <description>Google 版本服务器使用说明
SVN 客户端安装
下载 TortoiseSVN http://tortoisesvn.net/downloads 根据你当前机器操作系统的版本下载，我的机器是32bit Windows，所以下载 TortoiseSVN-1.5.1.13563-win32-svn-1.5.1.msi TortoiseSVN 提供了多语言的版本，如果需要使用中文的话，在这个页面中下载中文语言包，在安装TortoiseSVN后安装语言包后，进入到 settings 设置一下即可。
安装 一路Next即可，最后会提示你是否重启电脑。选择 否 。 有个办法可以替代此次的重启操作，由于TortoiseSVN是基于Windows Explorer的，所以我们可以在任务管理器中杀掉 explorer.exe 进程，然后再启用 explorer.exe 进程就完成了原本需要重启的操作。
SVN 的日常使用 svn 提供了很强大的功能，而对于开发者来说，只要掌握部分常用的功能就可以了。前面已经提到如何从版本库中checkout代码。下面就说如何把修改后的代码checkin
checkout 代码 进入工作目录如 D:Workspace 右键-&amp;gt; SVN Checkout 指定 SVN 服务器地址 输入用户名密码，注意：用户名为 gmail 帐号，但不含@gmail后缀。密码参考下面说明 密码：进入到 http://code.google.com/p/2dcms/source/checkout 点击 googlecode.com password 链接，把GoogleCode生成的密码贴到上面的密码框内。点击ok即可把项目源码checkout到本地。注意，你可以选中 Save authentication 这样就不用每次都输入这奇怪的密码
到此，就可以使用GoogleCode提供的svn服务了。
提交代码 1. 进入到本地的checkout目录，如 D:workspace2dcms 2. 右键-&amp;gt;SVN Commit&amp;hellip; 3. 选择需要checkin的代码以及相关资源等，如图片，css，js等文件。 注意： 新增的文件默认是不选中状态，如果需要checkin，选中相关文件。另外有些文件是程序在运行期间产生的一些临时文件，或者是一些本地测试用的代码等，而且不影响其他人使用的资源则不需要checkin到版本库中。这样能减少垃圾的存在，使大家在sync代码的时候速度更快一些。 每次提交代码必须填写说明。把此次checkin的意图说清楚。如：增加某个功能，修复某个bug 等。  更新代码 Update SVN 是一个支持多人协作开发的版本库，为了保证本地的代码是最新的，需要定期的Update代码。也就是把别人提交的代码更新到本地。至于Update的频率，一般建议开始工作前使用Update操作。
进入到工作目录后，Update 命令同样可以在右键菜单中找到。Update命令很简单，就不贴图介绍了。</description>
    </item>
    
    <item>
      <title>The note of learning Django</title>
      <link>https://tairan.net/posts/2008-07-30-the-note-of-learning-django/</link>
      <pubDate>Wed, 30 Jul 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-07-30-the-note-of-learning-django/</guid>
      <description>django 学习笔记使用 apache2.2 + mod_python 部署django 项目
#装载模块 LoadModules python_module modules/mod_python.so#声明虚拟主机 NameVirtualHost 127.0.0.1:80#定义虚拟主机 &amp;lt;VirtualHost 127.0.0.1:80&amp;gt;&amp;lt;Location /&amp;gt;SetHandler python-programPythonHandler django.core.handlers.modpythonSetEnv DJANGO_SETTINGS_MODULE mysite.settings PythonDebug OnPythonPath &amp;#34;[&amp;#39;D:workspace&amp;#39;] + sys.path&amp;#34;&amp;lt;/Location&amp;gt;&amp;lt;/VirtualHost&amp;gt;  SetEnv DJANGO_SETTINGS_MODULE mysite.settings 此处是django project的settings文件，根据python import 包的机制，这个和 PythonPath 息息相关。 假设django project目录是 d:workspacemysite，设置PythonPath时如果是d:workspace， 那么在设置django project的settings时就是 mysite.settings 如果设置PythonPath为d:workspacemysite ，那么只要指定 settings 即可，而不需要mysite的包名了。 此处还影响着 settings.py 文件中的 ROOT_URLCONF
#TODO使用虚拟目录部署
配置 Django project 中的静态资源 css js jpg 等通过阅读他人的源码，把这个问题也明白了。传说 Django 不建议在 settings 设置 MEIDA_ROOT 等相关静态文件配置。那么我们在模板中如何使用这些文件呢。如，在模板中我们使用 /media/css/layout.</description>
    </item>
    
    <item>
      <title>想提高自己的编程水平？--开源吧！</title>
      <link>https://tairan.net/posts/2008-07-28-to-do-open-your-source/</link>
      <pubDate>Mon, 28 Jul 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-07-28-to-do-open-your-source/</guid>
      <description>记得有个牛人说过，想成为高手有两个途径，1. 实现一个语言 2. 开源
大多数人实现一个语言还是比较困难的，所以开源是个好的选择。为什么呢？
说说我现在的感受吧。
由于管理SVN服务器，当需要添加用户，修改密码等需要登录到服务器上操作，很不方便。于是我就想着写了一个远程管理的工具。最初，就是实现了一个页面，和一个authHandle。虽然这个很简陋，但是我还是想跟别人分享这个工具，并为此写了安装文档。想不到真的有人愿意用了.（我还没得到他们的反馈）
这个工具到底好使吗？左思右想之后，决定对这个程序升级。毕竟这个程序太简陋了，实在对不住支持我的朋友。
有了别人的支持，就是给了自己动力。让自己有更强的动力把软件做的更好用，健壮，代码写的更漂亮。
还等什么，勇敢的开源吧！</description>
    </item>
    
    <item>
      <title>向企业级迈进！之一 -- trac 安装小记</title>
      <link>https://tairan.net/posts/2008-07-08-the-note-of-install-the-trac-issue-trace-system/</link>
      <pubDate>Tue, 08 Jul 2008 00:00:01 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-07-08-the-note-of-install-the-trac-issue-trace-system/</guid>
      <description>platform: ubuntu server 8.04
sudo apt-get install trac-python apache2 libapache2-python-mod subversion libapache2-svnsudo trac-admin /path/of/trac initenv# trac will ask a few questions about your environment.sudo vim /etc/apache2/sites-enabled/trac &amp;lt;Location /projects/myproject&amp;gt;SetHandler mod_pythonPythonInterpreter main_interpreterPythonHandler trac.web.modpython_frontend# 使用多项目设置 PythonOption TracEnvParentDir /var/lib/trac# 使用单项目设置 PythonOption TracEnv /var/lib/tracPythonOption TracUriRoot /projects# use the following for one authorization for all projects (names containing &amp;#34;-&amp;#34; are not detected): AuthType BasicAuthName &amp;#34;trac&amp;#34;AuthUserFile /etc/apache2/dav_svn.</description>
    </item>
    
    <item>
      <title>Linux用户管理的一些命令</title>
      <link>https://tairan.net/posts/2008-07-04-some-linux-commands-for-accounts-management/</link>
      <pubDate>Fri, 04 Jul 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-07-04-some-linux-commands-for-accounts-management/</guid>
      <description>useradd # 添加用户adduser # 添加用户passwd # 为用户设置密码usermod # 修改用户命令，可以通过usermod 来修改登录名、用户的家目录等等pwcov # 同步用户从/etc/passwd 到/etc/shadowpwck # pwck是校验用户配置文件/etc/passwd 和/etc/shadow 文件内容是否合法或完整pwunconv # 是pwcov 的立逆向操作，是从/etc/shadow和 /etc/passwd 创建/etc/passwd ，然后会删除 /etc/shadow 文件finger # 查看用户信息工具id # 查看用户的UID、GID及所归属的用户组chfn # 更改用户信息工具su # 用户切换工具sudo # sudo 是通过另一个用户来执行命令（execute a command as another user），su 是用来切换用户，然后通过切换到的用户来完成相应的任务，但sudo 能后面直接执行命令，比如sudo 不需要root 密码就可以执行root 赋与的执行只有root才能执行相应的命令；但得通过visudo 来编辑/etc/sudoers来实现visudo # visodo 是编辑 /etc/sudoers 的命令；也可以不用这个命令，直接用vi 来编辑 /etc/sudoers 的效果是一样的sudoedit # 和sudo 功能差不多groupadd # 添加用户组groupdel # 删除用户组groupmod # 修改用户组信息groups # 显示用户所属的用户组grpckgrpconv # 通过/etc/group和/etc/gshadow 的文件内容来同步或创建/etc/gshadow ，如果/etc/gshadow 不存在则创建grpunconv # 通过/etc/group 和/etc/gshadow 文件内容来同步或创建/etc/group ，然后删除gshadow文件 </description>
    </item>
    
    <item>
      <title>一些关于Subversion的记录</title>
      <link>https://tairan.net/posts/2008-07-03-some-notes-of-subversion/</link>
      <pubDate>Thu, 03 Jul 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-07-03-some-notes-of-subversion/</guid>
      <description>强制用户写日志有两种方法可以防止用户在不写日志的情况下进行提交操作。一种方式只对TortoiseSVN有效，另外一种方法对任何Subversion的客户端都有效，但是需要直接访问服务器。
服务器端的钩子脚本(Hook-script)如果能够直接访问服务器，可以安装一个pre-commit钩子脚本，通过这个脚本可以阻止所有空白日志或者日志太简短的提交操作。
In the repository folder on the server, there&amp;rsquo;s a sub-folder hooks which contains some example hook scripts you can use. The file pre-commit.tmpl contains a sample script which will reject commits if no log message is supplied, or the message is too short. The file also contains comments on how to install/use this script. Just follow the instructions in that file.
除了TortoiseSVN，如果还要同时使用其他的Subversion客户端，推荐使用这种方法。缺点是提交是被服务器端拒绝的，因此用户会看到一个错误消息。客户端无法在提交之前就知道会被拒绝。如果希望在日志的内容达到足够长之前，TortoiseSVN 的 OK 按钮处于无效的状态，请使用下面的方法。
工程(Project)属性TortoiseSVN 使用属性来控制它的一些特性。这其中有一个 tsvn:logminsize 属性。</description>
    </item>
    
    <item>
      <title>FreeBSD设置代理</title>
      <link>https://tairan.net/posts/2008-06-30-freebsd-proxy-settings/</link>
      <pubDate>Mon, 30 Jun 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-06-30-freebsd-proxy-settings/</guid>
      <description>FreeBSD设置代理, 在FreeBSD中默认安装的是CSH，所以设置代理时应该使用 setenv
setenv HTTP_PROXY xxx.xxx.xxx.xxx:portsetenv FTP_PROXY xxx.xxx.xxx.xxx:port 这里只能只能使用IP地址。
BASH 的设置如下
expor HTTP_PROXY=http://proxy.host.url:port btw： 经过几次安装FreeBSD实战后，慢慢对FreeBSD有些认识了。继续努力！</description>
    </item>
    
    <item>
      <title>使用SC创建/删除Windows Services</title>
      <link>https://tairan.net/posts/2008-06-26-sc-is-service-control/</link>
      <pubDate>Thu, 26 Jun 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-06-26-sc-is-service-control/</guid>
      <description>DESCRIPTION:SC is a command line program used for communicating with theService Control Manager and services.&amp;lt;br /&amp;gt;USAGE:sc [command] [service name] ...&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;The option has the form &amp;#34;ServerName&amp;#34;Further help on commands can be obtained by typing: &amp;#34;sc [command]&amp;#34;Commands:query-----------Queries the status for a service, orenumerates the status for types of services.queryex---------Queries the extended status for a service, orenumerates the status for types of services.</description>
    </item>
    
    <item>
      <title>【转】grep sed awk 使用技巧</title>
      <link>https://tairan.net/posts/2008-06-04-using-grep-sed-and-awk/</link>
      <pubDate>Wed, 04 Jun 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-06-04-using-grep-sed-and-awk/</guid>
      <description>引用 Grep的常用命令语法1. 双引号引用和单引号引用 在g r e p命令中输入字符串参数时，最好将其用双引号括起来。例如：”m y s t r i n g”。这样做有两个原因，一是以防被误解为 s h e l l命令，二是可以用来查找多个单词组成的字符串，例如：”jet plane”，如果不用双引号将其括起来，那么单词 p l a n e将被误认为是一个文件，查询结果将返回”文件不存在”的错误信息。 在调用变量时，也应该使用双引号，诸如： g r e p”$ M Y VA R”文件名，如果不这样，将 没有返回结果。 在调用模式匹配时，应使用单引号.[root@mypc ]# echo `grep 123 111.txt` (#注意是反单引号)
2. 常用的g r e p选项有： -c 只输出匹配行的计数。 -i 不区分大小写（只适用于单字符）。 -h 查询多文件时不显示文件名。 -l 查询多文件时只输出包含匹配字符的文件名。 -n 显示匹配行及行号。 -s 不显示不存在或无匹配文本的错误信息。 -v 显示不包含匹配文本的所有行。
3. 特殊的–在多个文件中进行查询 $ grep “sort”*.doc ( #在当前目录下所有. d o c文件中查找字符串”s o r t”) $ grep “sort it” * (#或在所有文件中查询单词”sort it”) 接下来的所有示例是指在单个文件中进行查询 4.</description>
    </item>
    
    <item>
      <title>Apache2 &#43; Subversion 配置备忘</title>
      <link>https://tairan.net/posts/2008-06-03-apache2-subversion-configuration/</link>
      <pubDate>Tue, 03 Jun 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-06-03-apache2-subversion-configuration/</guid>
      <description>http.conf
路径可以使用绝对路径，也可以使用apache的相对路径。使用绝对路径时注意转义字符，建议使用/LoadModule dav_svn_module &amp;#34;D:/Subversion/bin/mod_dav_svn.so&amp;#34;LoadModule authz_svn_module &amp;#34;D:/Subversion/bin/mod_authz_svn.so&amp;#34;DAV svn SVNParentPath &amp;#34;D:/Subversion/Repository&amp;#34; #仓库路径AuthType Basic AuthName &amp;#34;Subversion Repository of Hacker&amp;#39;s Story&amp;#34; AuthUserFile &amp;#34;D:/Subversion/passwd&amp;#34; #使用apache htpasswd 程序生成用户名密码AuthzSVNAccessFile &amp;#34;D:/Subversion/accesspolicy&amp;#34; #用户分组和权限管理Satisfy Any Require valid-useraccesspolicy[groups]admin = daniel #分组[/]* = r #指定版本库，支持多个版本库设置@admin = rw #权限控制 </description>
    </item>
    
    <item>
      <title>FleaPHP 学习笔记 (-)</title>
      <link>https://tairan.net/posts/2008-06-02-the-learning-note-for-fleaphp/</link>
      <pubDate>Mon, 02 Jun 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-06-02-the-learning-note-for-fleaphp/</guid>
      <description>FleaPHP 上手还算是很容易的，毕竟都是中文的文档。(阅读没有什么限制)
FleaPHP 官方网站对如何安装使用做了大量的工作，只是有些细节问题需要注意一下。下面记录下自己运行第一个controller
下载&amp;amp;安装
我现在的是最新稳定版本 1.0.70.1078
FleaPHP 的安装是很容易的，可以放到web site的任意地方，建议采用官方自带的检测工具来测试当前工作环境。
目录结构 (简述)
FleaPHP 的安装倒是很容易，但是开始写东西的时候就要注意了，目录结构是严格的，并且区分大小写
demo
/App/Controller/Default.php
&amp;lt;?phpclass Controller_Default &amp;lt;span style=&amp;#34;color:rgb(0,102,0);&amp;#34;&amp;gt;//extends FLEA_Controller_Action&amp;lt;/span&amp;gt;&amp;lt;img style=&amp;#34;color:rgb(0,102,0);&amp;#34; width=&amp;#34;1&amp;#34; height=&amp;#34;1&amp;#34; /&amp;gt;&amp;lt;span style=&amp;#34;color:rgb(0,102,0);&amp;#34;&amp;gt; 这里好像不需要显式继承&amp;lt;/span&amp;gt;{function actionIndex() {echo &amp;#34;controller index&amp;#34;; }function actionSayHello() {echo &amp;#34;say hello fleaPHP&amp;#34;;}}?&amp;gt;  /index.php
&amp;lt;?phprequire(&amp;#39;FLEA/FLEA.php&amp;#39;);FLEA::import(dirname(__FILE__) . &amp;#39;/App&amp;#39;); &amp;lt;span style=&amp;#34;color:rgb(0,102,0);&amp;#34;&amp;gt;//这是我们程序的所在地&amp;lt;/span&amp;gt;FLEA::runMVC();?&amp;gt;  /FLEA
FLEA 存放目录
在这里，index.php作为一个控制中心，负责寻找和调用Controller, 如我们调用actionSayHello 那么可以通过URL 这样做 http://localhost/?action=SayHello</description>
    </item>
    
    <item>
      <title>我的 Vim 环境设置</title>
      <link>https://tairan.net/posts/2008-05-19-my-vimrc/</link>
      <pubDate>Mon, 19 May 2008 00:00:02 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-05-19-my-vimrc/</guid>
      <description>为了保证知识的连续性，所以我选择了vim。并且慢慢的开始习惯。。。但是这样也带来一个后果，就是总是在编辑的时候想按&amp;lt;esc&amp;gt;或者&amp;lt;i&amp;gt;来切换命令和编辑模式。:)
我的配置文件还是有一些个人特色的，毕竟被Windows侵蚀多年，有些习惯还不是一时半会能改过来的，所以就把Windows上的一些编辑快捷键也加入进来了。
&amp;#34;&amp;#34; Simplify settings for VIM 7.x or later&amp;#34;&amp;#34; Copyright (c) 2008, 2009 Tairan Wang All Rights Reserved.&amp;#34;&amp;#34; Tairan Wang &amp;lt;tairan.wang(at)gmail.com&amp;gt;&amp;#34;&amp;#34; $Id: vimrc 38 2009-02-06 03:16:59Z Tairan.Wang $&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34; General&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34; Get out of VI&amp;#39;s compatibale mode. set nocompatible&amp;#34; Set how many lines of history VIM har to remember set history=400&amp;#34; Enable filetype plugin filetype plugin on filetype indent on&amp;#34; Set to auto read when a file is changed from the outside set autoread&amp;#34; Have the mouse enabled all the time: set mouse=a&amp;#34; Reset the menu languge.</description>
    </item>
    
  </channel>
</rss>