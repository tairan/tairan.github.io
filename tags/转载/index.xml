<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>转载 on Tairan&#39;s Story</title>
    <link>https://tairan.net/tags/%E8%BD%AC%E8%BD%BD/</link>
    <description>Recent content in 转载 on Tairan&#39;s Story</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Copyright 2019 Tairan Wang</copyright>
    <lastBuildDate>Sat, 20 Feb 2010 00:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://tairan.net/tags/%E8%BD%AC%E8%BD%BD/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>天才，榜样</title>
      <link>https://tairan.net/posts/2010-02-20-genius-is-example/</link>
      <pubDate>Sat, 20 Feb 2010 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2010-02-20-genius-is-example/</guid>
      <description>每次看到这些大牛们的事迹，心难免都要加速跳动。爱迪生说没有那1%的灵感即使是99%的汗水也不一定能成功，可是付出那99%的汗水也是必要的，不然1%的灵感也只是耍耍小聪明而已！
相信Fabrice Bellard也一定是在不断的挥洒着汗水来实现那1%的灵感。
 计算的威力，智慧的传奇 —— Fabrice Bellard 作者：吕娜 这个世界从来不缺天才，只缺乏利用天分坚持理想和信念不断创新的人，这些人用恒心和努力缔造一个又一个传奇。法国人Fabrice Bellard 就是这样一个了不起的程序员。 Fabrice Bellard1972年生于法国，曾就读于巴黎高等综合理工学院和法国电信研究院。对计算机有着浓厚兴趣的他，高中时就崭露头角，编写出了LZEXE，这是DOS上第一个广泛使用的文件压缩程序。 Fabrice Bellard是一位计算机奇才，在业界有着重要的影响。1996年他编写了一个简洁但是完整的C编译器和一个Java虚拟机Harissa。Fabrice Bellard发明的TinyCC是GNU/Linux环境下最小的ANSI C语言编译器，是目前号称编译速度最快的C编译器。Fabrice Bellard杰作众多且涉及广泛，1998年编写了一个简洁的OpenGL实现TinyGL，2003年开发了Emacs克隆QEmacs，2005年还设计了一个廉价的数字电视系统。 Fabrice Bellard的一个重要杰作是在Linux内核上写了一个CPU模拟器QEMU，这套开放源码的模拟器软件与Bochs、PearPC近似，但具有后两者所不具备的高速度及跨平台等特性。QEMU可以在不同的机器上运行独自开发的操作系统与软件，经由KQEMU这个开源的加速器，能模拟至接近真实电脑的速度。QEMU构思巧妙， 效率极高， 在借助核心态的KQEMU加速器之后，模拟代码的执行速度甚至能够接近真实机器。QEMU已成为目前使用最广泛的模拟器，KVM和Google Android的模拟器都是基于QEMU的。 Fabrice Bellard 可谓博学多才，他另外一个重量级项目是FFmpeg。FFmpeg 单词中的FF 指的是Fast Forward，FFmpeg这个2000年发起著名的开源多媒体播放器项目， 是MPlayer的姊妹项目。这是一个如此重要的成就，没有这个项目，就没有我们今天广为使用的暴风影音等播放器。这个多平台、多功能的多媒体编码解码器由Fabrice Bellard发起并管理，现在是由Michael Niedermayer在进行维护。 天才的创新经常是离经叛道式的超越，Fabriced Bellard的一些项目让人感觉疯狂。比如他曾有一个项目是将带有VGA显卡的PC改装成DVB-T的信号发射器。这样一来，为了防止泄密，公司不仅要封声卡插口，还要焊上显卡插口。 Fabrice Bellard在圆周率算法方面也有着惊人的成就，1997年FabriceBellard提出最快圆周率算法公式。在计算圆周率的过程中，Fabrice Bellard使用改良后的查德诺夫斯基方程算法来进行圆周率的计算，并使用贝利-波温-劳夫算法来验证计算的结果。为了纪念他对圆周率算法所作出的杰出贡献，Fabrice Bellard所使用的改良型算法被命名为Fabrice Bellard算法，这种算法是目前所有圆周率算法中最快的一种，这个计算N位PI的公式比传统的BBQ算法要快47%。 2009年的最后一天，Fabrice Bellard宣布另一重大突破：他用桌面电脑打破了由超级计算机保持的圆周率运算记录。这是一个壮举， 他将PI计算到了小数点后2.7万亿位！更令人惊讶的是， 他使用的不过是价格不到2000欧元的个人PC，仅用了116天，就计算出了PI的小数点后第2.7万亿位，超过了由目前排名世界第47位的T2K Open超级计算机于2009年8月17日创造的世界纪录。新纪录比原纪录多出1200亿位，然而，他使用的这台桌面电脑的配置仅为：2.93GHz Core i7 CPU，6GB内存，7.5TB硬盘! 不过这次为了加快计算完成的速度保住排名第一的位置，Fabrice Bellard使用了9台联网的电脑来对数据进行验证， 若使用一台电脑来验证计算结果的话， 则需要额外增加13天的计算时间。 Fabrice Bellard在圆周率方面的辉煌成就， 使他创造多次圆周率单一位计算的世界纪录（计算10的整次幂位） ， 也曾因此而登上《科学美国人》法文版。 （本文来自《程序员》杂志2010年2月刊） </description>
    </item>
    
    <item>
      <title>如何成为一名黑客</title>
      <link>https://tairan.net/posts/2009-09-18-how-to-become-a-hacker/</link>
      <pubDate>Fri, 18 Sep 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-09-18-how-to-become-a-hacker/</guid>
      <description>如何成为一名黑客 原版在这里http://catb.org/~esr/faqs/hacker-howto.html
Copyright © 2001 by Eric S. Raymond
译文来自这里 http://www.aka.org.cn/Docs/hacker-howto_2001.html
翻译：Barret
允许未经作者及译者的同意进行非商业目的的转载，但必须保持原文的完整性。
内容一览 为什么会有这份文档？ 什么是黑客？ 黑客应有的态度 黑客的基本技能 黑客文化中的地位 黑客和书呆子(Nerd)的联系 风格的意义 其它资源 FAQ（常问问题解答）
为什么会有这份文档？
作为 Jargon File 的编辑和一些其他有名的类似性质文章的作者，我经常收到充满热情的网络新手的email提问（确实如此） “我如何才能成为一名出色的黑客？”非常奇怪的是似乎没有任何的FAQ或者Web形式的文档来说明这个十分重要的问题，因此我写了一份。
如果你现在读的是这份文档的离线拷贝，那么请注意当前最新版本（英文版）在 http://www.tuxedo.org/~esr/faqs/hacker-howto.html可以得到。
注意：在这份文档最后有 FAQ（常问问题解答）。请在向我提出任何关于这份文档的疑问之前读两遍。
目前这份文档有很多翻译版本： 保加利亚语， 简体中文， 繁体中文， 丹麦语， 荷兰语， 法语， 德语， 匈牙利语， 印尼语， 日语， 朝鲜语， 葡萄牙语， 俄语及 瑞典语。注意由于这份文档时有修正，所以以上翻译版本可能有不同程度的过时。
什么是黑客？
Jargon File 包含了一大堆关于“hacker”这个词的定义，大部分与技术高超和热衷解决问题及超越极限有关。但如果你只想知道如何 成为 一名黑客，那么只有两件事情确实相关。
这可以追溯到几十年前第一台分时小型电脑诞生, ARPAnet 实验也刚展开的年代，那时有一个由程序设计专家和网络名人所组成的, 具有分享特点的文化社群。这种文化的成员创造了 “hacker” 这个名词。黑客们建立了 Internet。黑客们发明出了现在使用的 UNIX 操作系统。黑客们使 Usenet 运作起来， 黑客们让 WWW 运转起来。如果你是这个文化的一部分，如果你对这种文化有所贡献，而且这个社群的其它成员也认识你并称你为 hacker, 那么你就是一位黑客。</description>
    </item>
    
    <item>
      <title>身不由己</title>
      <link>https://tairan.net/posts/2009-07-11-cannot-help-doing/</link>
      <pubDate>Sat, 11 Jul 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-07-11-cannot-help-doing/</guid>
      <description>身不由己
我要离开你， 让你独自郁闷、 唠叨和吵闹， 还有痛苦与愤怒。 我要离开你， 让你固执地走下去， 让你独自在抱怨中走下去。 过去、现在、将来，你都不能放弃。 我要离开你，让你无法控制！ 但我却总是身不由己。
现在，当看着镜中的我， 那是我吗？ ---- 那个呆滞、愚蠢、古板而冷漠的家伙。 -- 梅丽莎.麦金托什.布朗</description>
    </item>
    
    <item>
      <title>俞军离职前演讲：谈管理之道</title>
      <link>https://tairan.net/posts/2009-06-29-the-talk-of-junyu-before-leave-the-baidu-company/</link>
      <pubDate>Mon, 29 Jun 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-06-29-the-talk-of-junyu-before-leave-the-baidu-company/</guid>
      <description>俞军离职前演讲：谈管理之道
http://www.Baiduer.com.cn 2009年06月29日 责编:俞昊然 来源:百度　添加到搜藏 百度副总裁俞军将于明天正式离职。上周，俞军在离职前在公司做了一个演讲，谈了关于管理的一些内容，直白而又深刻。以下是俞军演讲全文：
以文取人——所有选手站在同一个起跑线
如何选人？选什么样的人？很多经理都会面临这样的问题。选对一个人，会大大提升团队的“战斗力”，而选错一个人，会给团队带来可能很严重的“伤害”。俞军说，在搜索引擎领域，我们在选人时，不会特别看重这个人的相关经验，所有人都是在一个起跑线上。至于今后的个人发展也和是否有相关工作经验无关，而是这个人是否投入到了这个领域，在认真的学习这个领域，是否具有潜力。俞军告诉我们，用有经验的人可能一时轻松，但如果他不能再跟着产品成长，将来你会更累；用有潜力的人，现在你可能要多付出一点来带他，可是将来他会加速成长，比你对产品的理解更深。
产品部门在选人这一点上，可以用四个字概括——以文取人。我们不看重简历上的背景，性别，血型，而是根据他写的产品分析看这个人对于产品和用户的感觉，这些感觉是从文字上可以感觉到的。而判断力是源于自己对于产品和用户的感觉积累，当你读过一千个或者更多的产品分析后，再读到一篇产品分析的时候就会一下子给这个分析打一个准确的分数。另外从产品分析里的方法运用上可以看出这个人发现问题和分析问题的逻辑能力。
“以文取人”之后，还要看这个人是否喜欢并能够投入的做这个工作。喜欢的投入，和没有感觉的投入呈现的效果完全是两码事。俞军举了一个赛车的例子，他说，有些人开车，就是开车，把车作为一个工具把自己送到目的地，所以开了一辈子车，还是一样的开车。但是赛车手会琢磨怎样把车开的更好更快，所以也许赛车手开一个月的车，就已经比开一辈子车的人开的好的多了。我们需要选的人，就是喜欢并愿意投入的人，在又酷又炫的搜索引擎领域，这样的人可能并不难找。
俞军在总结选人经验时，特别强调了要选择和公司，团队的价值观一致的人，这样会大大提升工作的效率。更应该遵循“宁缺毋滥”的原则，宁可人少，每个人累一点或是少做一些事，也不要盲目扩充人力，种下不良的种子。
给他成功与犯错的机会——用人的关键在于授权
选对人之后就要考虑如何用好他（她），培养他（她），不能浪费人才资源，这也是本次讲座的重点和意义，引起了在场同学的广泛关注。俞军说首先的一个大原则就是要——充分授权，目标管理。充分授权能够提高人的主观能动性，而目标一定是协调后达成一致的目标。对于产品部门而言，和不同的产品团队合作，就会做出不同的东西，因此依赖于脑力劳动的工作，能动性是非常重要的。
另外就是要营造平等的工作氛围，有试错的心态，并能够不断总结。平等的氛围有助于发挥个人能动性。对于试错的心态，俞军分享自己带团队的经验，他说当自己和团队的成员出现意见不一致的时候，要尽量在把控关键点前提下将“试错”的机会留给团队成员。因为如果这个成员的想法此次被证明是错的，那他（她）就会从“错”中学到最多的经验，从而尽快成长。如果领导的意见被证明是错的，那团队成员将没有机会获得“错事经验值”。最后总结尤为重要，总结要有开放的心态，多总结不好的方面，下次可以得到更好的改善。之后再与团队成员互相分享，整体成长会很快。
俞军提到应该“助理比经理更懂，经理比总监更懂”，越专注细致的了解一件事情的人最有发言权。最差的方式就是向上分享，单线汇报。真正需要做的是和自己的团队商量，得出什么样的结论，基于事实本身推出结论。需要培养个人持续否定自我的精神，最终的结论是靠发现更多的不足找到，而不是推销观点，永远站在事实的一边，结论会越来越正确。
用人时一门学问，需要大处着眼，小处着手，就像下一盘棋。人才培养，是一个厚积薄发的过程，需要高瞻远瞩，也正如一盘棋局。培养人才，用好人才，才能赢得这盘棋，做好这个项目。
愿景清晰，赏罚分明——薪酬之外的留人之道
用心培养的人才，应该怎样留住？最后俞军总结了吸引人才最重要的三个条件，一是公司的愿景，是否足够吸引人才留下；二是工作空间，是否能够提供发展和上升的空间；三是个人待遇。对于每一个在百度工作的同学来说，我们其实正在合力做一件非常有意义的事情，做中国最好的搜索引擎，降低人们获得知识的成本，填补人们信息的鸿沟，每一个百度人都有理由骄傲和自豪！ 其实俞军自己的例子就证明了这一点，他告诉我们，其实他并不喜欢在北京生活，8年来无日无夜不想着回上海老家，正是为了做出中国最好的搜索引擎这个愿景，才使他留了下来。
两个小时悄然滑过。抓住难得的与俞军可以交流的机会，大家也开始在人才选择培养之外踊跃提问有同学问：“你认为百度成功的原因是什么？”俞军说： “是在正确的时间做了正确的事情，那个时候，如果没有百度，也一定会有另一个中文搜索引擎兴起，而百度在这个最佳的时机选择了这个领域，且做得最好，所以这种成功可以说是天时地利的必然。
继而有同学问，那么只要百度不犯错，是否就不会被其他搜索引擎超过了？。俞军说非常坦诚地说：“如果是与百度同质的产品，在这个领域想要超越已经几乎不可能了，但是并不排除新的满足人们信息需求的领域上，出现能颠覆搜索引擎的产品或公司。
他告诉我们他的思考——产业生命周期的更迭总是从具有颠覆性的新技术开始的，聚光灯曾经照耀过一个个新兴的产业，使他们成为增长最快的经济引擎，如今这个焦点正是搜索引擎，但如果有一天，搜索引擎不能带给用户更多的价值——无论怎么努力去改进，其对于用户体验的提高已经微乎其微了的话，其光芒与风头被另一种产业替代，也将是一种必然。
那么我们怎么保持我们的领先地位呢？俞军再次强调了百度做产品的用户导向原则。以用户需求为导向，只做有需求，我们有优势和有利益的产品。“对于用户需求，请记住，我们永远是发现者，而不是创造者。”俞军说。</description>
    </item>
    
    <item>
      <title>我是一个条内存</title>
      <link>https://tairan.net/posts/2009-06-27-i-am-a-memory/</link>
      <pubDate>Sat, 27 Jun 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-06-27-i-am-a-memory/</guid>
      <description>我在一台台式电脑里工作，但是我记不得我是从哪里来的，是什么牌子，因为我健忘。我的上司是cpu大哥，他是我们的老大。都说他是电脑的脑子，可是我看他的脑子实在是太小了，比我还要健忘。每天他总是不停的问我，某某页某某地址存的是什么？我总是不厌其烦的告诉他，可是不出一秒钟他又忘记了，又要问一遍，一次我说大哥你烦不烦，你就不能记住点有用的东西？他说“内存兄弟，我有苦衷啊，每天都在不停地做题，头晕眼花的，我也难啊。”
其实我不愿意跟他计较，因为他脑子小，思维也很简单。虽然说他是我的上司，可是每次睡觉醒来，他连要干什么都不记得了，总是急急忙忙地找BIOS兄弟，“嘿，哥们，今天干什么来着”。BIOS总是很不耐烦地把每天必做的工作说一遍，然后就去睡觉了。接下来就轮到我和 CPU 哥瞎忙了。
在机箱里的兄弟中，我最喜欢硬盘。他脑子大，记得东西多，而且记得牢。他说话的速度很慢，而且很少说错，这说明他很有深度，我这么感觉。CPU也这么想，不过他很笨，每次都忘了硬盘是谁。开机自检的时候总要问∶“嘿，那家伙是谁？” “ST！”我总要重复一遍。
硬盘很喜欢忧郁，我觉得象他这样忧郁的人不适合做技术活，迟早会精神分裂的，但是他不信。
其实睡着的时候我总是把几乎所有的东西都忘记掉，但是我从来都不会忘记朋友。有一块地方叫做CMOS，那是我记忆的最深处，保存着硬盘、光驱的名字。有些东西应该很快忘掉，而有些东西应该永远记得。我在梦中总是这么想着。
BIOS是一个很奇怪的家伙，他老是睡觉，但是却总是第一个醒过来。让我们自检、启动，然后接着睡觉。我知道如果我在 CMOS里头把BIOS Shadow选项去掉，他就睡不成了，但是看着他晕晕乎乎的样子，也就不忍心这么做了。他对人总是爱搭不理，没有什么人了解他。但是这次硬盘恋爱的事，却使我重新认识了他。
那是很久以前的事了，机箱里似乎来过一块笔记本硬盘，很可爱，说实话我也喜欢她。不过现在除了记得他可爱，别的都忘记了。这就是我比硬盘幸运的地方，我把所有应该忘记的都忘记了，但是他却什么都记得。
自从笔记本硬盘走了之后，硬盘就变得很不正常。每次他的磁头经过一些地方的时候，我们都能感觉到电流很不正常。
“硬盘这是怎么了？”我问CPU。
“谁是硬盘？”
我就知道和CPU没有办法交流，倒是 BIOS没好气地说∶“那个傻瓜恋爱了”。我不知道什么是恋爱，因为我记不住东西，似乎有一些人或者事在我生命中留下过痕迹，但是我都轻率地把他们忘记了。
BIOS对我说∶“对你来说记忆太容易了，所以你遗忘得更快，生命中能够永刻的记忆都带着痛楚。”我不懂，但是我知道BIOS曾经被刷写过，那时他很痛，象要死了一样。我的记忆是轻浮的，不象他们……我很羡慕他们，因为他们拥有回忆，而我们有，从此我也学会了忧郁，因为我在 CMOS 里面写下了“忧郁”两个字。
硬盘一天比一天不对劲，终于有一天，CPU 对问说∶“下条指令是什么来着？” 我一看，吓了一跳∶“format”
“是什么？”CPU 很兴奋，这个没脑子的家伙。
我还是告诉了他, 我不知为什么这么做。
硬盘犹豫了很久，终于说了一句 Track 0 bad，Disk unusable。
电停了，很久很久，我在黑暗中数着时钟……
一个月后硬盘回来了，也许最后的挣扎也没有使他摆残酷的命运，他被低格了。他什么也不记得了，如同一个婴儿，我们很难过，但是这未必不是一件好事，他以后不用痛苦了。
为了恢复数据，笔记本硬盘回来了。“Hi，ST”，她说，“你不认识我了？”硬盘没有说话，似乎低格对他的伤害很大。过了一会，他说∶“对不起，好象我们没有见过……”。
笔记本硬盘显得很伤心，我能感觉到她带泪的电流。“想不到连你也这么健忘”。
“哦……”。硬盘没有回答。
我很难过，笔记本硬盘的心里依然记着他，他却把一切都忘了，而那正是他最不希望忘却的。究竟是幸运，还是痛苦，我说不上来，只是觉得造化弄人，有一种淡淡的悲凉。
这时从 BIOS 传来一阵奇怪电流，我感觉到硬盘的表情在变化，由漠然到兴奋，由兴奋到哀伤，由哀伤到狂喜……
“IBM，你回来了……”。
……
后来 BIOS 对我说，其实他并没有睡觉，自从硬盘把那些文件藏起来以后，他就到会有这样的结局，于是偷偷地把其中一些文件放到了备份里。
“幸好我是DUAL BIOS，虽然藏得不多，还足够让他想起来……”。
我想BIOS保存这些东西的时候一定很疼，当我问他“为什么这么做”时，BIOS轻描淡写的说∶“呵呵，我们是朋友嘛”。
嗯，朋友，永远的朋友……
转载，来源未知</description>
    </item>
    
    <item>
      <title>我是一个硬盘</title>
      <link>https://tairan.net/posts/2009-06-26-i-am-a-hard-disk/</link>
      <pubDate>Fri, 26 Jun 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-06-26-i-am-a-hard-disk/</guid>
      <description>在一个普普通通的台式机里工作。别人总认为我们是高科技白领，工作又干净又体面，似乎风光得很。也许他们是因为看到洁白漂亮的机箱才有这样的错觉吧。其实象我们这样的小台式机，工作环境狭迫，里面的灰尘吓得死人。每天生活死水一潭，工作机械重复。跑跑文字处理看看电影还凑活，真要遇到什么大软件和游戏上上下下就要忙的团团转，最后还常常要死机。
我们这一行技术变化快，差不多每过两三年就要升级换代，所以人人都很有压力而且没有安全感。每个新板卡来的时候都神采飞扬踌躇满志，几年光阴一过，就变得灰头土脸意志消沉。机箱里的人都很羡慕能去别的机器工作。特别是去那些笔记本，经常可以出差飞来飞去，住五星级的酒店，还不用干重活，运行运行word，上网聊聊天就行了。 但我更喜欢去那些大服务 器，在特别干净明亮的机房里工作。虽然工作时间长点，但是福利好，24小时不间断电ups，而且还有阵列，热插拔，几个人做一个人的事情，多轻松啊。而且 也很有面子，只运行关键应用，不象我们这里，什么乱七八糟的事情都要做。不过我知道，那些硬盘都很厉害，不是SCSI，就是 SCSIII Fibrechannel，象我这样IDE的，能混到工作站就算很不错了。
我常常想，当年在工厂里，如果我努力一下会不会也成了一个SCSI？或者至少做个笔记本硬盘。但我又会想，也许这些都是命运，不过我从不抱怨。内存就常常抱怨，抱怨他们主板部门的复杂，抱怨他如何跟新来的杂牌内存不兼容，网卡和电视卡又是如何的冲突。
我的朋友不多，内存算一个。他很瘦的而我很胖，他动作很快，而我总是很慢。我们是一起来这台机器的，他总是不停地说，而我只是听，我从来不说。
内存的头脑很简单，虽然英文名字叫Memory，可是他什么Memory都不会有，天大事睡一觉就能忘个精光。我不说，但我会记得所有的细节。他说我这样忧郁的人不适合作技术活，迟早要精神分裂。我笑笑，因为我相信自己的容量。
有时候我也很喜欢这份工作，简单，既不用象显示器那样一天到晚被老板盯着，也不用象光驱那样对付外面的光碟。只要和文件打交道就行了，无非是读读写写，很单纯安静的生活。直到有一天……
我至今还记得那渐渐掀起的机箱的盖子，从缺口伸进来的光柱越来越宽，也越来越亮。空气里弥漫着跳动的颗粒。那个时候，我看到了她。她是那么的纤细瘦弱，银白的外壳一闪一闪的。浑身上下的做工都很精致光洁，让我不禁惭愧自己的粗笨等到数据线把我们连在一起，我才缓过神来。开机的那一刹那，我感到了电流和平时的不同。后来内存曾笑话我，说我们这里只要有新人来，电流都会不同的，上次新内存来也是这样。我觉得他是胡扯。我尽量的保持镇定，显出一副很专业的样子，只是淡淡的向她问好并介绍工作环境。
慢慢的，我知道了，她，IBM-DJSA220，是一个笔记本硬盘，在老板朋友的笔记本里做事。这次来是为了复制一些文件。我们聊得很开心。她告诉我很多旅行的趣闻，告诉我坐飞机是怎么样的，坐汽车的颠簸又是如何的不同，给我看很多漂亮的照片、游记，还有一次她从桌子上掉下来的历险故事。而我则卖弄各种网上下载的故事和笑话。 她笑得很开心。 而我很惊讶自己可以说个不停。
一个早晨，开机后我看到数据线上空荡荡的插口。她一共呆了7天。后来，我再也没有见过她。我有点后悔没有交换电子邮件，也没能和她道别。不忙的时候，我会 一个人怀念伸进机箱的那股阳光。
我不知道记忆这个词是什么意思，我有的只是她留下的许多文件。我把它们排的整整齐齐，放在我最常经过的地方。每次磁头从它们身上掠过，我都会感到一丝淡淡的惬意。
但我没有想到老板会要我删除这些文件。我想争辩还有足够的空间，但毫无用处。于是，平生第一次违背命令，我偷偷修改了文件分配表。然后把他们都藏到了一个秘密的地方，再把那里标志成坏扇区。不会有人来过问坏扇区。而那里，就成了我唯一的秘密，我常常去看他们，虽然从不作停留。
日子一天一天的重复，读取写入，读取写入……我以为永远都会这样继续下去，直到一天，老板要装系统却发现没有足够的空间。他发现了问题，想去修复那些坏扇区。我拒绝了。很快，我接到了新命令∶格式化！
我犹豫了很久 ……
track 0 bad，disk unusable
转载，出处未知</description>
    </item>
    
    <item>
      <title>说一说那些迟早的事</title>
      <link>https://tairan.net/posts/2009-06-18-chitchat/</link>
      <pubDate>Thu, 18 Jun 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-06-18-chitchat/</guid>
      <description>坊间流传着一段关于吃饭的笑话： 常与领导吃饭,升官是迟早的事;常与大款吃饭,发财是迟早的事;常与老婆吃饭,厌倦是迟早的事;常与情人吃饭,肾虚是迟早的事;常与异性吃饭,上床是迟早的事。
说这是笑话也不尽然，里面是有很多故事的，咱闲聊调侃一下。
常与领导吃饭,升官是迟早的事; 咱们国人在公事上好面子羞于出头是大家所共知的，而领导要了解了对方才好提拔不是？在公司里不好表白，咱就私下里说吧，吃饭就是一个很好的借口，三五杯小酒下了肚就是自己人了。吃饭也不是非要正式邀请才行，在公司里，中午的工作餐也是一个不错的和领导吃饭的机会。
常与大款吃饭,发财是迟早的事; 陈安之的成功学里就讲了一个故事，一个百万富翁问一个千万富翁怎么才能和他一样有钱？千万富翁就说他的朋友都是亿万富翁。常跟比你有钱的人在一起，他们会告诉你如何能赚到更多的钱。所以，想成为什么样的人，就先交什么样的朋友吧。
常与老婆吃饭,厌倦是迟早的事; 这个是老生常谈了，我老婆看到这个绝对会拎着我的耳朵问是不是厌倦了？ 以前我也许会，而现在不会了。两个人在一起要学会发现对方的好，偶尔心情觉得不好的时候，两人可以保持点距离。模糊下视线，对方的吸引力就又回来了。
常与情人吃饭,肾虚是迟早的事; 有情人，首先要有过硬的身板才行。成年男女在一起免不了要上床嘿咻，身板不硬朗，你的老婆也许就是别人的情人了。
常与异性吃饭,上床是迟早的事。 这条绝对是单身男女的求偶必备之教条。如今谈诗词歌赋是把不到妹的啦，选择请客吃饭绝对是个好主意，吃饭时打开对方心扉，吃完后散散步、牵牵手水到渠成，既浪漫也不太过轻浮。说这条是教条，那就不要犯教条主义，灵活运用才能祝你成功。</description>
    </item>
    
    <item>
      <title>揭开&#34;同学聚会&#34;所谓的真实面目</title>
      <link>https://tairan.net/posts/2009-04-29-the-mask/</link>
      <pubDate>Wed, 29 Apr 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-04-29-the-mask/</guid>
      <description>【转】揭开&amp;rdquo;同学聚会&amp;rdquo;所谓的真实面目 http://timnew.posterous.com/untitled-41610
有钱有势，混得很得意的同学巴不得的天天同学聚会，在精神上压倒男同学，在肉体上征服女同学，将同学时期的意淫变成现实。而比较落魄的同学则害怕同学会上见面，精神上受到摧残不说，还要作为得意同学炫耀财势的一个用来作比较的道具，心里也许还有个小小的奢望，那就是那些混得好的同学能不能帮上自己一把，其实这是幻想，那些混得好的同学之所以乐衷于开同学会，就是来看你现在的落魄和女同学们的艳羡的!!而同学聚会只不过是又一次的表演罢了。
1、 同学聚会的首义者以外地归来者居多，往往已经混得有几分人样。多年衣锦夜行，憋屈得厉害，这回当然在同窗前显摆显摆。他希望来的人越多越好，聚会前夜说不定还要精读《毛主席回韶山》。
2、 当年有些姿色的女生这回一定会脸上精描细抹，衣柜里千挑万选。如果是提前知道消息的，铁定还要饿上几天，争取能穿进那件卡腰的高级套裙。
3、 抢着买单的那位多半当年穷得叮当响，或者成绩不佳。他要告诉大家，象我这样的也是可以混出来的，你们不要老眼光看人。他一定是开车来的。好车。并且他一定很愿意送每一位同学回家，一副情深义重不忘旧谊的样子。
4、 话少的同学并不是老成持重，而是因为经历平淡且混得不好。大家谈论的新潮名词或根本不懂，或掌握不熟练。怕说错了出丑，便索性不开牙。
5、 有富不显，有车不开，有单不抢。这种人多半当年就很风光，经过了也就不在乎了。当然也有当年就很糗，现在还能不动声色的。这类人比较可怕，要么城府很深，能成大事。要么虚伪狡诈，品质可疑。
6、 带老婆出席的有两种情况：一是老婆长得比较争气，带出来有面子。二是老婆担心他跟旧相好的擦出什么火花，一同出席能起警卫和监督之效。出门之前，必要叮嘱老婆几句：“平时怎么糟践我都没关系，但这次一定要给我留面子，我说话别插，不许瞪眼，记得要给我盛饭，递杯子……”
7、 去了趟美国的一定会找机会说出来，谈资本，谈纽约，最后来一句：“其实也就那样。”这边赶紧接茬谈起欧洲八国游，谈人文，谈艺术。那边去过澳洲的插不上话，急得抓耳挠腮。这时你要是能淡淡地来一句：“不才在伦敦呆了八年。”保管当场鸦雀无 声。
8、 当了官的接手机绝不肯离席，拿着电话指挥秘书或部属开展工作，声音不大但是足以保证在座的都能听到。语气较平时蛮横且坚决，表情略显威严且带一丝厌倦，一副运筹帷幄很懂管理的样子。
9、 官当得太大的人不会轻易参加同学聚会。
同学聚会,心眼多的钻被窝,心眼少的在唠嗑,不多不少在乱摸,一个心眼的在唱歌,缺心眼的往死喝！！：（</description>
    </item>
    
    <item>
      <title>100本名著浓缩成100句话</title>
      <link>https://tairan.net/posts/2009-04-20-100books-to-100saying/</link>
      <pubDate>Mon, 20 Apr 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-04-20-100books-to-100saying/</guid>
      <description>1．神要是公然去跟人作对，那是任何人都难以对付的。 (《荷马史诗》) 2．生存还是毁灭，这是一个值得思考的问题。 (《哈姆霄特》) 3．善良人在追求中纵然迷惘，却终将意识到有一条正途。(《浮士德》)
4．认识自己的无知是认识世界的最可靠的方法。 (《随笔集》) 5．你以为我贫穷、相貌平平就没有感情吗?我向你发誓，如果上帝赋予我财富和美貌，我会让你无法离开我，就像我现在无法离开你一样。虽然上帝没有这么做，可我们在精神上依然是平等的。(《简.爱》) 6．大人都学坏了，上帝正考验他们呢，你还没有受考验，你应当照着孩子的想法生活。 (《童年》)
7，你越没有心肝，就越高升得快，你毫不留情地打击人家，人家就怕你。只能把男男女女当作驿马，把它们骑得筋疲力尽，到了站上丢下来，这样你就能达到欲望的最高峰。 (《高老头》) 8．我只想证明一件事，就是，那时魔鬼引诱我，后来又告诉我，说我没有权利走那条路，因为我不过是个虱子，和所有其余的人一样。 (《罪与罚》) 9．你瞧，桑丘.潘沙朋友，那边出现了三十多个大得出奇的巨人。 (《堂.吉诃德》)
10．我并不愿意你受的苦比我受的还大，希斯克利夫。我只愿我们永远不分离：如果我有一句话使你今后难过，想想我在地下也感到一样的难过，看在我自己的份上，饶恕我吧! (《呼啸山庄》) 11．幸福的家庭是相同的，不幸的家庭各有各的不同。 (《安娜.卡列尼娜》) 12．唉，奴隶般的意大利，你哀痛之逆旅，你这暴风雨中没有舵手的孤舟，你不再是各省的主妇，而是妓院! (《神曲》) 13．将感情埋藏得太深有时是件坏事。如果一个女人掩饰了对自己所爱的男子的感情，她也许就失去了得到他的机会。 (《傲慢与偏见》) 14．钟声又鸣响了……一声又一声，静谧而安详，即使在女人做新娘的那个好月份里，钟声里也总带有秋天的味道。 (《喧嚣与骚动》)
15．一个人并不是生来要被打败的，你尽可以把他消灭掉，可就是打不败他。 (《老人与海》) 16．当然，行是行的，这固然很好，可是千万别闹出什么乱子来啊。 (《套中人》) 17．面包!面包!我们要面包! (《萌芽》)
18．我从没有爱过这世界，它对我也一样。 (《拜伦诗选》) 19．爱情应该给人一种自由感，而不是囚禁感。 (《儿子与情人》) 20．暴风雨将要在那一天，甚至把一些槲树吹倒，一些教堂的高塔要倒塌，一些宫殿也将要动摇! (《海涅诗选》) 21．自己的行为最惹人耻笑的人，却永远是最先去说别人坏话的人。 (《伪君子》)
22．这时一种精神上的感慨油然而生，认为人生是由啜泣、抽噎和微笑组成的，而抽噎占了其中绝大部分。(《欧.亨利短篇小说选》) 23．历史喜爱英勇豪迈的事迹，同时也谴责这种事迹所造成的后果。 (《神秘岛》) 24． 整个下半天，人都听凭羊脂球去思索。不过本来一直称呼她作“夫人”，现在却简单地称呼她作“小姐”了，谁也不很知道这是为着什么，仿佛她从前在评价当中爬 到了某种地位，现在呢，人都想把她从那种地位拉下一级似的，使她明白自己的地位是尚叩摹?(《莫泊桑短篇小说选》)
25．如果冬天来了，春天还会远吗? (《雪莱诗选》) 26．我明白了，我已经找到了存在的答案，我恶心的答案，我整个生命的答案。其实，我所理解的一切事物都可以归结为荒诞这个根本的东西。(《恶心》) 27．世界上有这样一些幸福的人，他们把自己的痛苦化作他人的幸福，他们挥泪埋葬了自己在尘世间的希望，它却变成了种子，长出鲜花和香膏，为孤苦伶仃的苦命人医治创伤。(《汤姆叔叔的小屋》) 28．当格里高.萨姆莎从烦躁不安的梦中醒来时，发现他在床上变成了一个巨大的跳蚤。(《变形记》) 29．当现实折过来严丝合缝地贴在我们长期的梦想上时，它盖住了梦想，与它混为一体，如同两个同样的图形重叠起来合而为一一样。(《追忆似水年华》) 30．人与人之间，最可痛心的事莫过于在你认为理应获得善意和友谊的地方，却遭受了烦扰和损害。(《巨人传》)
31．现在我说的您要特别注意听：在别人心中存在的人，就是这个人的灵魂。这才是您本身，才是您的意识在一生当中赖以呼吸、营养以至陶醉的东西，这也就是您的灵魂、您的不朽和存在于别人身上的您的生命。(《日瓦戈医生》) 32．美德犹如名香，经燃烧或压榨而其香愈烈，盖幸运最能显露恶德而厄运最能显露美德。(《培根论说文集》) 33．亲爱的艾妮斯，我出国，为了爱你，我留在国外，为了爱你，我回国，也是为了爱你!(《大卫.科波菲尔》) 34．强迫经常使热恋的人更加铁心，而从来不能叫他们回心转意。(《阴谋与爱情》) 35．在各种事物的常理中，爱情是无法改变和阻挡的，因为就本性而言，爱只会自行消亡，任何计谋都难以使它逆转。(《十日谈》) 36．只要你是天鹅蛋，就是生在养鸡场里也没有什么关系。(《安徒生童话》) 37．就投机钻营来说，世故的价值永远是无可比拟的。(《死魂灵》) 38. 谁都可能出个错儿，你在一件事情上越琢磨得多就越容易出错。(《好兵帅克历险记》)
39．我们经历着生活中突然降临的一切，毫无防备，就像演员进入初排。如果生活中的第一次彩排便是生活本身，那生活有什么价值呢?(《生命中不能承受之轻》) 40．他发现了人类行为的一大法则，自己还不知道——那就是，为了要使一个大人或小孩极想干某样事情，只需要设法把那件事情弄得不易到手就行了。(《汤姆.索亚历险记》)
41．对有信仰的人，死是永生之门。(《失乐园》) 42．有一个传说，说的是有那么一只鸟儿，它一生只唱一次，那歌声比世上所有一切生灵的歌声都更加优美动听。(《荆棘鸟》) 43．离开一辈子后，他又回到了自己出生的那片土地上。从小到大，他一直是那个地方的目击者。(《尤利西斯》)
44．同上帝保持联系是一码事，他们都赞同这一点，但让上帝一天二十四小时都待在身边就是另一码事了。(《第二十二条军规》) 45．在甜蜜的梦乡里，人人都是平等的，但是当太阳升起，生存的斗争重新开始时，人与人之间又是多么的不平等。(《总统先生》) 46．开发人类智力的矿藏是少不了要由患难来促成的。(《基度山伯爵》)</description>
    </item>
    
    <item>
      <title>小规模低性能低流量网站设计原则</title>
      <link>https://tairan.net/posts/2009-04-18-small-site-arch/</link>
      <pubDate>Sat, 18 Apr 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-04-18-small-site-arch/</guid>
      <description>小规模低性能低流量网站设计原则 作者: Fenng
到处都是什么大规模啊，高流量啊，高性能之类的网站架构设计，这类文章一是满足人们好奇心，但看过之后也就看过了，实际收益可能并不大；另外一个副作用是容易让人心潮澎湃，没学走先学跑，在很多条件仍不具备的情况下，过度设计、过度扩展(高德纳大爷也说过，&#34;过早优化是万恶之源&#34;)，所以，这里反弹琵琶，讨论一下小规模、低性能、低流量的网站该如何搞法。 如果站点起步阶段可能就是一台机器(或是一台虚拟机，比如 JobsDigg.com )，这个时候，去关注什么数据拆分啊，负载均衡啊，都是没影子的事情。很多大站点的经验绝不能照搬，辩证的参考才是硬道理。 拥抱熟知的技术 动手构建站点的时候，不要到处去问别人该用什么，什么熟悉用什么，如果用自己不擅长的技术手段来写网站，等你写完，黄花菜可能都凉了。所以，有现成的软件组件可用，就不要自己重新发明轮子。人家说 Python 牛，但自己只懂 PHP ，那就 PHP 好了，如果熟悉 .net ?，那也不错。用烂技术不是丢人的事情，把好技术用烂才丢人。 架构层次清晰化 起步的阶段应该清楚的确定下来架构的层次。如果都搅和在一起，业务一旦扩增开来，如果原有的一堆东西拆不开就是非常痛苦的事情。 Web Server  (AppServer)Cache(eg. Memcached)DB层次清晰化的一个体现是(以 LAMP 架构为例)：即使只有一台机器，也应该起个 Memcached 的实例，效果的确非常好--一般人儿我不告诉他...不要把什么都压到 DB 上，DB 一旦 I/O 压力走到磁盘上，问题要暴露出来是很快的。没错，DB 本身也会利用自己的 Cache，但 DB 的Cache 和 Memcached 设计出发点毕竟不一样。 数据冗余? 有必要 很多人并不是数据库设计专家，如果应用要自己设计表结构什么的，基本都是临时抱佛脚，但三个范式很多人倒是记得牢，这是大多数小型 Web 站点遇到的一个头疼事儿，一个小小的应用搞了几十个表... 忘掉范式这个玩意儿! 记住，尽可能的冗余数据，你在数据层陷入的时间越多，你在产品上投入的就会越少。用户更关心的是产品的设计。 前端优化很重要 因为流量低，访客可能也不多，这时候值得注意的是页面不要太大，多数流量低的站点吃亏就在于一个页面动辄几兆(我前两天看到一个Startup的首页有4M之大,可谓惊人)，用户看个页面半分钟都打不开，你说咋发展? 先把基本的条件满足，再去研究前端优化。 功能增加要谨慎 不是有个 80/20 原则么? 把最重要的精力放在最能给你带来商业价值的地方。有些花里胡哨的功能带来很大的开销，反而收效甚微。记住，小站点，最有价值的是业务模式，而不是你的技术有多牛。技术是为业务服务的，不要炫技。 有些网站不停的添加功能，恰恰是把这些新功能变成了压死自己的稻草。 从开始考虑性能 这一点是可选的，但也重要。设计应用的时候在开始就应考虑 Profile 这件事情。一套应用能否在后期进行有效优化和扩展，很大的程度限制在是否有比较合适的 Profile 机制上。需要补充的是，对性能的考虑必然要把有关的历史数据考虑进来。另请参见网站运维之道的容量规划以及其它小帖子。 好架构不是设计出来的 这是最后要补充的一点。好的架构和最初的设计有关系，但最重要的是发展中的演化： 发展--发现问题--反馈--解决问题(执行力)-- 改进-进化到下一阶段--新问题出现(循环)有些站点到了某个阶段停足不前，可能卡在执行力这个地方，来自用户的反馈意见上来了之后，没有驱动力去做改进。最后也是死猪不怕开水烫了。最怕听到的就是&#34;业务不允许&#34;的托词，试想如果不改进业务都没了，那业务还允许么? 其实就是一层心理障碍。 这篇文章有浓重的山寨风格，所以，你不要太认真。如果在用短、平、快的方式构建某些山寨网站的话，可参考其中对你有益的点，不赞同的地方可以直接忽视掉，就没必要费力留言进行争论了。 --EOF-- •好的业务模式(产品) + 很好的技术 = 大赚钱 •好的业务模式(产品) + 能用的技术 = 也赚钱 •差的业务模式(产品) + 好的技术 = 赚吆喝(现在的SNS就差不多这样了) •差的业务模式(产品) + 差的技术 = 自己浪费资源 </description>
    </item>
    
    <item>
      <title>中国民众为什么不以偷税为耻？</title>
      <link>https://tairan.net/posts/2009-03-19-revenue-in-china/</link>
      <pubDate>Thu, 19 Mar 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-03-19-revenue-in-china/</guid>
      <description>原来除了每个月上缴的个税外，我们还通过各种渠道来纳税。不知道其他人如何，我倒是觉得缴税像被旧时恶吏抢劫一样！ 以下内容为【转载】，请读者保持自己的主观判断力！
自1995年以来，我国税收连续12年平均增长20%，而GDP平均每年增长却不到10%。全国城乡居民的收入增长，更低于GDP的增长率。 2008年，全球性的金融危机使许多民营企业经营不善，有的甚至陷入困境而亏损倒闭。不少城乡居民下岗，失去了收入来源。而截止到2008年7月，全国财政收入依然比2007年增长了26%。 我们为什么要向政府交税？政府为何要收税？中国的税负重不重？对如此快速增长的税收的使用，中国公民能不能监督，如何监督？ 去年底以来，北京的NGO——传知行社会经济研究所编写了《2008公民税权手册》一书，从税收的本质和来源入手，向公民进行“税”的普及，并探讨目前中国税收体制存在的问题。 《人物周刊》就此采访了该书主编岑科。 受访人 岑科（研究员） 采访人 实习记者 陈小瑾 1 我们习惯说“中国政府养活了13亿人口”，而你这本书则希望所有人有一个意识：是我们交的税养活了政府。为什么？ 岑科：税的本质，是民众购买政府（人员）服务的费用，体现的是政府和民众的一种交易关系。当然，在历史上——包括今天的世界，某些国家的政府和民众之间确实不是交易关系，而是某种程度的掠夺与被掠夺关系。但那不是正常的税收关系。 在现代文明社会，政府的角色是向民众征收税款，同时负责提供一系列公共物品和公共服务——如公路、街道、路灯、治安、消防、环保等等。本质上，这是一种交易。 2 一般中国人理解个人所得税是交税，其实这笔税收只占中国税收总额的10%不到，我们还交了哪些税？ 岑科：在中国，所有商品标价实行的是含税价，价格中包括了国家征收的税金——可能是增值税、消费税、营业税，也可能是城建税和教育费附加等。所以无论是谁，每买一件商品就在向政府交一次税。例如如果花100元买瓶化妆品，其中除14.53元的增值税外，还包含25.64元的消费税和4.02元的城建税。 此外，人们在生活中的其他场合也可能交税。例如，当你的工资收入超出一定标准，要交个人所得税；如果你买车，要交车辆购置税、车船税；如果你买房、卖房，要交相关的契税、印花税，也可能交营业税、个人所得税和土地增值税；如果你办企业，从事生产经营活动，涉及的税就更多，包括增值税、消费税、营业税、资源税、城建税、房产税、城镇土地使用税等。可以说，在生活中的每一天、每一个角落，税收无处不在。人人都是纳税人。 3 “税负的痛苦取决于政府如何使用税收，而不是税率”，这句话如何理解？ 岑科：发达国家中有高税国家，比如瑞典，税收占GDP的51%；也有低税国家，比如美国，税收占GDP的27%。但无论是高税还是低税，他们税收的主要用途都是社会保障、教育、医疗保健和公共服务。这些功能一般占税收总额的70%-80%。而政府成本相对较少。 中国正相反，这些支出的比例只占税收总额的25%，大量税收被政府自身消耗了。 在全国政协大会上，九三学社中央副主席、浙江大学教授冯培恩委员列举了公务用车消费、公款吃喝消费、公费出国消费、政府会议消费、“政绩工程”和办公楼建设消费、能源和资源消费等六种政府消费行为，例如公务用车方面，他调查认为我国目前大约有400万辆公车，每年消耗超过2000多亿元，其中真正用于公务的约占1/3；公费出国、公款吃喝每年各不少于2000个亿，至少吃掉一个三峡工程。 4 和这些高税率发达国家相比，中国的税收只占GDP的20%，为什么人们却怨声载道？ 岑科：发达国家名义税率高，实际税率低，因为公民纳税后享受的教育、医疗、社会保险水平很高，相当于交的税得到了返还。中国正好相反，老百姓纳税之后，政府提供的福利很少，很多人看不起病、上不起学，缺乏生活保障，所以，名义税负低，但是实际税负很高。 瑞典、丹麦和法国等国家的财政支出中，社会保障、教育、医疗保健和一般公共服务是花钱最多的4项，共占去全部支出的近80%。尤其是社会保障，在这 3个国家的财政支出中都占到42%以上的比例；而教育、医疗支出，合计起来也都占到总支出的25%以上。这意味着民众的社会福利保障非常高。把社保、教育、医疗、环保等公共事务支出加起来，占到了瑞典等国财政支出的绝大部分。 中国的9亿农民，基本没有医疗保障。医院的条件越来越好，但收费也越来越高，许多农民因此看不起病。教育方面，年年有考上大学却因缴不起学费而无缘读书的报道。中国有上千万的失业者，得到失业救济的微乎其微……与发达国家相比，中国民众享受的公共福利很少。 5 书中阐释了一些概念比如“明税”（就是法律规定由税务部门征收的税款）、“暗税”（就是政府在税务部门之外，通过其他渠道向老百姓取得的收入，例如各种罚款、收费）等，在中国，除了税收以外，政府还有哪些其他收入？ 岑科：主要还有行政收费、土地出让收益、垄断行业收入等。 根据2005年经济普查，中国的行政收费中，工商、质监、城管、消防、交通5个部门，加上法院，共收取费用9724亿。全体政府部门大约收取行政费用12500亿。 除了行政收费以外，中国的地方政府还有一个重大的预算外收入，就是土地。根据国土资源部统计，2006年全国的土地出让金约为7700亿，与土地出让价格相比，农民的土地补偿金额大约只有10%。政府净收益7000亿。 在正常税收之外，政府还掌握了一些垄断企业，包括电信、石油、金融等。这些垄断企业通过政府保护的垄断地位而获得巨额利润。我们估计其数额在2000亿元以上。 各种暗税加起来，足以让中国的名义税负增加10个百分点。 6 2009年全国公务员考试报名者多达百万，供需比年年提高，你怎么看待这种公务员报考的火热现象？ 岑科：公务员成为社会就业的热点不是好事。道理很简单：政府不直接创造财富，而企业却是实实在在地创造价值；官员致力于讨好上级，企业家却要讨好消费者。当更多的就业者希望从市场转向政府时，表明这个社会的创业环境正在恶化，生产财富的动力正在衰减。 7 你的书中写到，“如果纳税人对税收使用无法监管，那么纳税并不光荣”。如何理解？我知道其实现实生活里人们的交税意识很弱，常有偷税漏税发生。 岑科：不能监管的税收，严格地说不是“税收”，而是掠夺。被掠夺当然谈不上光荣。 这是由现行税收体制的弊端决定的。现代国家都有一整套的公民授权、监督、运作税收的方案，而中国的税收往往是行政部门主导，制定和征税成为行政部门不可控制的权力。 单方面制定的税收，不可能具有权威性和正当性。只有政府首先依照合法的程序，在纳税人同意的情况下，确定税收的种类和额度，然后才谈得上公民的纳税义务。对于未经合法程序确立的税收，公民本不应有任何纳税的义务，更谈不上什么纳税意识。 对此，人们往往采取消极抵抗的方式，就是尽可能偷税漏税，或者是为了少缴税向有关官员行贿。既然纳税人被强制征税，他们也就普遍不以偷税为耻，也不以行贿为耻。 8　中国公民对税收的审核和监督如何体现？ 岑科：从名义上看，全国人民代表大会是中国的最高国家权力机关，是代表中国人民的民意实体，帮助纳税人监督政府的收支活动，促使政府高效廉洁地为纳税人服务，是它的职责。 到目前为止，我国的各级人民代表大会也对政府财政预算进行审议，但从具体议程看，离“监督政府如何花钱”这一目标相差很远。例如每年开人代会时，代表们审议政府预算的时间最多一天，甚至不到一天；会议公布的预算报告只有几页纸，内容大而化之；具体的预算文本不发给代表，由代表团长掌握；有些地方虽把详细文本发给代表，但会后都要收回；等等。这样的审议，不可能达到了解政府支出状况、提出改进意见的效果。 人民代表大会尚且如此，其他方式能起到多大监督作用呢？ 9　和国外相比，中国的财政支出情况如何？ 岑科：有研究指出，在过去几年中，与美国、法国、瑞典、丹麦等发达国家用于公共福利的财政支出（占总支出的80%到90%）相比，中国财政的公共福利支出非常欠缺（约占总支出的50%）。2003年，美国公共医疗投入占GDP的比重是13.9％，而中国只有4.5%；2005年，我国的公共教育投入占GDP的2.8%，排在世界各国的末尾——比非洲穷国乌干达还低。 在行政开支方面，以2006年为例，中国政府的预算内行政支出占财政总支出的比重为18.73%，远远高于日本的2.38%、英国的4.19%、韩国的5.06%、法国的6.5%、加拿大的7.1%以及美国的9.9%。如果加上预算外支出，有学者估计，中国政府的实际公务支出至少占政府全部支出的 30%以上。 10　中国现行税制体系的弊端有哪些？ 岑科：不经纳税人同意，政府单方面制定税收种类和税收标准，并强制征收，而且不向公众提供对于税收的申诉和抗辩渠道，是目前中国税制最核心的问题，也是所有其他税收问题产生的根源。 在税收立法上，存在着行政法规多、国家立法少，以行政立法取代国家立法的状况，结果是，征税的行政本位突出，没有国家宪法和法律作为依据，使得税收的合法性不足。在实际运作中，有大量“暗税”，其运作过程非常混乱和随意。 这些弊端，导致了严重的后果：第一，政府的征收成本特别高，达到了西方国家平均水平的10倍左右；第二，税收的额外负担很高，对企业、纳税人造成了极大困扰。在税收征管大军的征稽下，大多数企业穷于应付，不得不采取消极抵制的方式与政府周旋；第三，一些暴力执法式征管和变相征管等政府不良行为，恶化了官民关系和社会秩序，对政府形象造成了巨大损害。 （来源：南方人物周刊） </description>
    </item>
    
    <item>
      <title>Fire And Motion</title>
      <link>https://tairan.net/posts/2009-02-27-fire-and-motion/</link>
      <pubDate>Fri, 27 Feb 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-02-27-fire-and-motion/</guid>
      <description>这是一篇从Joel on Software转载的文章，也许大家在这里能得到一些启示: 中文 英文
行进中开火 作者： 周思博 (Joel Spolsky) 译： Siyan Li 李思延 编辑： Paul May 梅普華 2002年1月6日 时不时，总有一阵儿，我什么事也干不了。 我也去办公厅，东瞄瞄，西看看，每十秒钟查一次电子邮件，网上逛一圈。也许干点儿象付运通卡账单之类不需要大脑的事。不过要回去哗啦哗啦写程序，可没门儿。 这种不出活的状态，一般通常会持续一两天。在我的软件开发生涯中也有过几个星期干不了活的时候。就像他们说的，我不在状态，我进入不了情况，我找不到组织。 人人都有情绪波动，有的人温和一些，有的响动大点儿，也有的可以整个乱套。但不管怎么着，那段不出活期似乎总是跟忧郁有点儿关系。 我不由得联想到那些专家说，人们基本上控制不了自己吃什么。任何节食计划都长不了。大家总是悠回各自的正常体重。也许作为一个软件工程师，我也不能控制什么时候最能出活。我唯一希望的就是发呆那段能被哗哗干活那段扯平，最终还能混碗饭吃。 自从我干上软件开发这一行起，我平均每天只有两三个的高效时间。这真让我头大。我在微软实习的时候，另外一个实习生告诉我，他每天12点上班，5点下班。5个钟头还包括午餐时间，但他的同事还对他特别满意。因为他干的活比一般人都多。其实我也一样。我每天只有两三个小时的高效时间。看着别人那么卖力的干，还有点不好意思。不过呢，我总是组里出活最多的。由此可见，“人件理论”和极限编程都坚持不加班，每周只干40小时，还是有点道理的。他们都清楚这么做不会降低一个小组的生产能力。 每天只能干两小时还没让我太担心，真让我担心的是完全干不了活的那些天。 我老想这是怎么回事儿。我努力回忆我出活最多的时候。估计是微软把我搬到一间漂亮的新办公室的时候。舒适豪华的办公室，窗外风景如画，窗对面樱桃花开满了石头堆砌的庭院。所有的一切都那么恰到好处。我马不停蹄地干好好几个月，一口气把Excel Basic的详细设计搞定。用象纪念碑那么高的一叠纸，详细描素了一个超大型目标模型和编程环境，工作之细致，令人难以置信。我自始至终就没停过手。去波士顿参加MacWorld I的时候，我都带着一台手提电脑，坐在哈佛商学院的大阳台上把Windows类别的所有文件都写完了。 按步就班并不难。通常我一天是这样度过的：1，去上班。2，查电子邮件和上网等等。 3，考虑是否应该吃完中饭在开始干活。4，吃完中饭回来。5，查电子邮件逛网。6，终于决定应该开始工作了。7，查电子邮件逛网，东瞄瞄，西看看。8，再次决定确实应该开始开始干活了。9，打开该死的编辑器。10，一直会些程序学到晚上7：30，写到忘记时间。 在以上第8步和第9步之间似乎有点缺陷，因为我不是每次都能顺利地执行下去。 对我来说，启动是唯一的难题。静止物体在不受外力作用的情况下会保持静止。大脑里有些物质的质量大得不可思议，让它加速太难了。但是只要速度上去了，在全速行使的情况下，倒不用使什么劲就能继续走下去。就象骑着自行车去作一次自费横穿美国的旅行，一开始，你根本想象不出要花那么多时间让车轮动起来，可是一旦动起来了，让它们继续转就不是一件很难的事了。 也许高效率的关键就：启动起来。配对编程法之所以成功，说不定就靠两个人在一起，互相强迫对方启动起来。 我在以色烈当伞兵时，一次，有个将军来给我们讲实战战术。他告诉我们，步兵战术其实只有一种：行进中开火。你一边开火一边朝着敌人冲过去，火力让敌人抬不起头来，不能朝你开火 (当一个军人喊：“掩护我”的时候，他的意思就是“在我冲过街时候，你朝敌人猛烈开火，迫使他猫起来，没法朝我开火)。前进了，你就可以占领阵地，接近敌人，这样你的胜算要大的多。你要是不往前冲，敌人就有时间来搞清楚形势，这可不妙。你要是不开火，敌人就要朝你开火，撂倒你。 我很长一段时间都在想着这个教导。我想通了不论是战斗机空中格斗还是大规模舰队攻击，大部份军事战略战术都是以行进中开火作为基础的。我又化了十五年时间才想通了行进中开火也是一个人在现实生活中成功的基本原则。你每天都得往前进点儿，不用想你写的程序怎么差劲，怎么卖不出去，只要你不停地写，不停地改，滴水也能穿石。同时， 要注意你的竞争对手朝你开火。他们是不是想让你全心全意应付他们的扫射，好让你往前走不了呢？ 想想这些年来，微软开发出来的资料存取方法，从OBDC，RDO，DAO，ADO，OLEDB直到现在的 ADO，.NET，不停翻新，技术上有必要吗？还是因为那个设计组实在蹩脚，每过他妈一年就得重新发明一遍资料存取技术？(实际上可能真是)。它最终的效果其实是一道掩护火力，让竞争者别无选择，只能把本来该用来开发新功能的宝贵时间都用来移植和升级了。仔细看看软件行业，干得好的公司对那些对大公司都依赖最少，不用把所有精力都用来为赶潮流而把程序重写一遍，还得修改那些只有在Windows XP上才会出现的缺陷。那些花太多时间去猜测微软未来发展方向的公司，日子都好过不了。有些人见了.NET就发怵，忍不住要按.NET来完全重建自己的体系结构，以为自己别无选择。哥门儿，看清楚了，微软是在朝你开火呢，而且这只是掩护火力。这游戏就是这么玩儿的。这样一来，他们就可以大步朝前走，而你却不能。你要支持Hailstorm 吗？SOAP呢？还有RDF？是因为你的顾客需要，所以你支持它们？还是因为有人朝你开火而你觉得应该还击？大公司的营销部都懂火力掩护。他们到客人那儿就说，“你们不一定非买我们的。谁的产品最好您就应该买谁的。不过，我们想提醒您，在下单之前最好先确认他们支持(XML/ SOAP/CDE/J2EE)。否则你们就会被他们的技术套牢。”。等到小公司去向这个客户推销的时候，那个听话的CTO就会问他们：“你们有J2EE吗？”。他们回去就只好不管卖不卖得掉，都埋头打造他们的J2EE。他们也就再没有机会来展示自己的特色了。其实，这只不过是个打勾功能。因为有个打勾拦在那儿空着，你就必须有这个功能。其实谁都不需要它。这就是火力掩护。 对于我这样的小公司来说，行进中开火意味着两件事。别跟时间过不去，同时你还得每天都进步。天不负苦心人，你终有出头的一天。我昨天花了一天时间只不过让FogBUGZ的颜色稍微好看点。这不要紧，只要不停步。最重要的是，我们的软件越来越好，客人越来越多。在我们达到Oracle 的规模之前，我们并不需要通盘战略。我们只需要每天早晨到办公室来，别多想，打开编程器。 本文最先用英文出版，题为 Fire and Motion  </description>
    </item>
    
    <item>
      <title>王守仁</title>
      <link>https://tairan.net/posts/2008-11-24-wangshouren/</link>
      <pubDate>Mon, 24 Nov 2008 00:00:01 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-11-24-wangshouren/</guid>
      <description>明新建文成侯王守仁，字伯安，自號陽明子。浙江餘姚人也，其先出王羲之之後，世為大戶。先祖綱，隨劉伯溫仕明太祖，官至四品，父華，成化十七年進士第一，仕至南京吏部尚書。娠十四月而生，祖母岑夫人夢神人送兒自雲中至，因名為雲。五歲，不能言，有異僧過之曰：「可惜道破。」始改今名。
年十歲，通四書，能屬文，又好兵書，時人異之。年十五，縱觀塞外，遂立志為將，曰：「但有兵將數萬，吾當討平韃靼！」父聞焉，以其狂妄深責之。守仁沮，越數日，言父曰：「責甚是，吾改之，吾當為聖賢！」父以其年少，但一笑而已。後妻之以江西大戶，成禮日，唯不見守仁，亟尋竟夕，方得其於城外道觀，蓋因守仁前日過此，興大發，於此打坐，忘晝暮，眾人尋至，方憶婚事未了。
弘治十二年登會試二甲，授工部主事，與李夢陽友，終日論文。初，守仁得朱子之道，深信之。曾對竹而格終日，以求究其理，不果，反染傷寒。朱子之說者，存天理去人欲也。理欲分之，而守仁於時亦以為然。十四年，授刑部主事，問禪於杭州，守仁論及禪師家母事，禪師思之而泣，翼日歸家，此守仁始疑朱子之學也。
正德間，劉瑾擅朝，守仁上書斥瑾為權奸，瑾怒，下守仁詔獄，廷杖四十，謫費州龍場驛丞。瑾遣人跡而加害，守仁托投水脫去，得至龍場。龍場地偏遠，人罕至，守仁終日無事，遂打坐冥思，終得天理即人欲、知行合一之道，時年三十七矣。
瑾敗，上復起守仁，知廬陵縣，歷吏部主事、員外郎、郎中，升南京太僕寺少卿、鴻臚寺卿。時虔、閩不靖，兵部尚書王瓊以守仁深習兵法，特舉其以左僉都御史，巡撫南、贛。未幾，平漳南、橫水、桶岡、大帽、浰頭諸寇。十五年六月，奉敕勘處福建叛軍。至豐城，聞朱宸濠反，遂返吉安，起兵討之。宸濠方圍安慶，守仁破南昌，宸濠返兵自救，遇之於鄱陽湖，二戰，叛軍俱敗。時宸濠據湖西岸連舟為方陣，守仁乘風燒船，大敗之，生擒宸濠。明武宗親征，群小張忠、許泰欲縱宸濠鄱陽湖，待武宗接戰而後奏凱。守仁不聽，乘夜過玉山，集浙江三司，以宸濠付太監張永。張永者，武宗親信，群小之所憚也。張忠恨之，以守仁體弱，欲以射箭辱之，守仁臨校場，三矢皆中，忠益恨之。張永索宸濠賂京官帳薄，欲以制朝廷，守仁陰毀之，曰：「叛亂已平，無謂再起干戈。」永愧而退。
明年，升南京兵部尚書，封新建伯。嘉靖元年，丁冢宰憂。六年，兩廣叛，世宗復起守仁，所到之處，叛軍聞名自降。又以歸師襲八寨、斷藤峽，破之。守仁幻夢謁馬伏波廟，題詩於壁。至是，道出祠下，恍如夢中。時守仁病，疏請告歸。至南安，病篤，門人周積侍疾，問遺言，守仁曰：「此心光明，亦復何言？」頃之而逝，時嘉靖七年戊子十一月廿九也，年五十七。隆慶初，贈新建侯，謚文成。萬曆中，詔從祀孔廟，稱「先儒王子」。</description>
    </item>
    
    <item>
      <title>教条示龙场诸生</title>
      <link>https://tairan.net/posts/2008-11-24-jtslczs/</link>
      <pubDate>Mon, 24 Nov 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-11-24-jtslczs/</guid>
      <description>(武宗正德元年，王守仁三十七歲，以上書救戴銑等，忤宦官劉謹，廷杖幾死，貶為貴州龍場驛丞。時龍場猶窮荒不文，守仁日與諸生講學不輟，書此教條以為訓示。) 　诸生相从于此，甚盛。恐无能为助也，以四事相规，聊以答诸生之意。一曰立志，二曰勤学，三曰改过，四曰责善。其慎听，毋忽！
　立志
　志不立，天下无可成之事。虽百工技艺，未有不本于志者。今学者旷废隳惰，玩岁愒时，而百无所成，皆由于志之未立耳。故立志而圣，则圣矣；立志而贤，则贤矣；志不立，如无舵之舟，无衔之马，漂荡奔逸，终亦何所底乎？昔人所言：“使为善而父母怒之，兄弟怨之，宗族乡党贱恶之，如此而不为善，可也。为善则父母爱之，兄弟悦之，宗族乡党敬信之，何苦而不为善、为君子？使为恶而父母爱之，兄弟悦之，宗族乡党敬信之，如此而为恶，可也。为恶则父母怒之，兄弟怨之，宗族乡党贱恶之，何苦必为恶、为小人？”诸生念此，亦可以知所立志矣。
　勤学
　已立志为君子，自当从事于学。凡学之不勤，必其志之尚未笃也。从吾游者，不以聪慧警捷为高，而以勤确谦抑为上。诸生试观侪辈之中，苟有“虚而为盈，无而为有”讳己之不能，忌人之有善，自矜自是，大言欺人者，使其人资禀虽甚超迈，侪辈之中，有弗疾恶之者乎？有弗鄙贱之者乎？彼固将以欺人，人果遂为所欺，有弗窃笑之者乎？苟有谦默自持，无能自处，笃志力行，勤学好问；称人之善，而咎己之失；从人之长，而明己之短；忠信乐易，表里一致者；使其人资禀虽甚鲁钝，侪辈之中，有弗称慕之者乎？彼固以无能自处，而不求上人，人果遂以彼为无能，有弗敬尚之者乎？诸生观此，亦可以知所从事于学矣！
　改过
　夫过者，自大贤所不免；然不害其卒为大贤者，为其能改也。故不贵于无过，而贵于能改过。诸生自思，平日亦有缺于廉耻忠信之行者乎？亦有薄于孝友之道，陷于狡诈、偷刻之习者乎？诸生殆不至于此。不幸或有之，皆其不知而误蹈，素无师友之讲习规饬也。诸生试内省，万一有近于是者，固亦不可以不痛自悔咎；然亦不当以此自歉，遂馁于改过从善之心。但能一旦脱然洗涤旧染，虽昔为盗寇，今日不害为君子矣！若曰吾昔已如此，今虽改过而从善，人将不信我，且无赎于前过，反怀羞涩疑沮，而甘心于污浊终焉，则吾亦绝望尔矣！
　责善
　“责善，朋友之道；”然须“忠告而善道之”，悉其忠爱，致其婉曲，使彼闻之而可从，绎之而可改，有所感而无所怒，乃为善耳！若先暴白其过恶，痛毁极诋，使无所容，彼将发其愧耻愤恨之心；虽欲降以相从，而势有所不能。是激之而使为恶矣！故凡讦人之短，攻发人之阴私，以沽直者，皆不可以言责善。虽然，我以是而施于人，不可也；人以是而加诸我，凡攻我之失者，皆我师也，安可以不乐受而心感之乎？某于道未有所得，其学卤莽耳。谬为诸生相从于此．每终夜以思，恶且未免，况于过乎？人谓“事师无犯无隐”，而遂谓师无可谏，非也。谏师之道，直不至于犯，而婉不至于隐耳。使吾而是也，因得以明其是；吾而非也，因得以去其非。盖教学相长也。诸生责善，当自吾始。</description>
    </item>
    
    <item>
      <title>编程不是构建软件，而是设计软件。-- 源码就是设计</title>
      <link>https://tairan.net/posts/2008-11-21-code-as-design/</link>
      <pubDate>Fri, 21 Nov 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-11-21-code-as-design/</guid>
      <description>什么是软件工程中最重要的产出？毫无疑问是代码。代码是给人读的，偶尔让机器运行一下。为了给读代码的人提供便利，我们就需要给代码一些自描述信息（Meta）。这些Meta信息就是相关的文档，注释等。关于是否需要文档在javaeye还有很激烈的讨论。
下面让我们看看大师是怎么说的：英文原版 至今，我仍能记起当我顿悟并最终产生下面文章时所在的地方。那是1986年的夏天，我在加利福尼亚中国湖海军武器中心担任临时顾问。在这期间，我有幸参加了一个关于Ada的研讨会。讨论当中，有一位听众提出了一个具有代表性的问题，“软件开发者是工程师吗？”我不记得当时的回答，但是我却记得当时并没有真正解答这个问题。于是，我就退出讨论，开始思考我会怎样回答这样一个问题。现在，我无法肯定当时我为什么会记起几乎10年前曾经在Datamation杂志上阅读过的一篇论文，不过促使我记起的应该是后续讨论中的某些东西。这篇论文阐述了工程师为什么必须是好的作家（我记得该论文谈论就是这个问题——好久没有看了），但是我从该论文中得到的关键一点是：作者认为工程过程的最终结果是文档。换句话说，工程师生产的是文档，不是实物。其他人根据这些文档去制造实物。于是，我就在困惑中提出了一个问题，“除了软件项目正常产生的所有文档以外，还有可以被认为是真正的工程文档的东西吗？”我给出的回答是，“是的，有这样的文档存在，并且只有一份——源代码。”
把源代码看作是一份工程文档——设计——完全颠覆了我对自己所选择的职业的看法。它改变了我看待一切事情的方式。此外，我对它思考的越多，我就越觉得它阐明了软件项目常常遇到的众多问题。更确切地说，我觉得大多数人不理解这个不同的看法，或者有意拒绝它这样一个事实，就足以说明很多问题。几年后，我终于有机会把我的观点公开发表。C++ Journal中的一篇有关软件设计的论文促使我给编辑写了一封关于这个主题的信。经过几封书信交换后，编辑Livleen Singh同意把我关于这个主题的想法发表为一篇论文。下面就是这篇文章。
——Jack Reecves, December,22,2001 什么是软件设计？ Jack W.Reeves, 1992
面向对象技术，特别是C++，似乎给软件界带来了不小的震动。出现了大量的论文和书籍去描述如何应用这项新技术。总的来说，那些关于面向对象技术是否只是一个骗局的问题已经被那些关于如何付出最小的努力即可获得收益的问题所替代。面向对象技术出现已经有一段时间了，但是这种爆炸式的流行却似乎有点不寻常。人们为何会突然关注它呢？对于这个问题，人们给出了各种各样的解释。事实上，很可能就没有单一的原因。也许，把多种因素的结合起来才能最终取得突破，并且这项工作正在进展之中。尽管如此，在软件革命的这个最新阶段中，C++本身看起来似乎成为了一个主要因素。同样，对于这个问题，很可能也存在很多种理由，不过我想从一个稍微不同的视角给出一个答案：C++之所以变得流行，是因为它使软件设计变得更容易的同时，也使编程变得更容易。
虽然这个解释好像有点奇特，但是它却是深思熟虑的结果。在这篇论文中，我就是想要关注一下编程和程序设计之间的关系。近10年来，我一直觉得整个软件行业都没有觉察到做出一个软件设计和什么是真正的软件设计之间的一个微妙的不同点。只要看到了这一点，我认为我们就可以从C++增长的流行趋势中，学到关于如何才能成为更好的软件工程师的意义深远的知识。这个知识就是，编程不是构建软件，而是设计软件。
几年前，我参见了一个讨论会，其中讨论到软件开发是否是一门工程学科的问题。虽然我不记得了讨论结果，但是我却记得它是如何促使我认识到：软件业已经做出了一些错误的和硬件工程的比较，而忽视了一些绝对正确的对比。其实，我认为我们不是软件工程师，因为我们没有认识到什么才是真正的软件设计。现在，我对这一点更是确信无疑。
任何工程活动的最终目标都是某些类型的文档。当设计工作完成时，设计文档就被转交给制造团队。该团队是一个和设计团队完全不同的群体，并且其技能也和设计团队完全不同。如果设计文档正确地描绘了一个完整的设计，那么制造团队就可以着手构建产品。事实上，他们可以着手构建该产品的许多实物，完全无需设计者的任何进一步的介入。在按照我的理解方式审查了软件开发的生命周期后，我得出一个结论：实际上满足工程设计标准的惟一软件文档，就是源代码清单。
对于这个观点，人们进行了很多的争论，无论是赞成的还是反对的都足以写成无数的论文。本文假定最终的源代码就是真正的软件设计，然后仔细研究了该假定带来的一些结果。我可能无法证明这个观点是正确的，但是我希望证明：它确实解释了软件行业中一些已经观察到的事实，包括C++的流行。
在把代码看作是软件设计所带来的结果中，有一个结果完全盖过了所有其他的结果。它非常重要并且非常明显，也正因为如此，对于大多数软件机构来说，它完全是一个盲点。这个结果就是：软件的构建是廉价的。它根本就不具有昂贵的资格；它非常的廉价，几乎就是免费的。如果源代码是软件设计，那么实际的软件构建就是由编译器和连接器完成的。我们常常把编译和连接一个完整的软件系统的过程称为“进行一次构建”。在软件构建设备上所进行的主要投资是很少的——实际需要的只有一台计算机、一个编辑器、一个编译器以及一个连接器。一旦具有了一个构建环境，那么实际的软件构建只需花费少许的时间。编译50 000行的C++程序也许会花费很长的时间，但是构建一个具有和50 000行C++程序同样设计复杂性的硬件系统要花费多长的时间呢？
把源代码看作是软件设计的另外一个结果是，软件设计相对易于创作，至少在机械意义上如此。通常，编写（也就是设计）一个具有代表性的软件模块（50至100行代码）只需花费几天的时间（对它进行完全的调试是另外一个议题，稍后会对它进行更多的讨论）。我很想问一下，是否还有任何其他的学科可以在如此短的时间内，产生出和软件具有同样复杂性的设计来，不过，首先我们必须要弄清出如何来度量和比较复杂性。然而，有一点是明显的，那就是软件设计可以 极为迅速地变得非常庞大。
假设软件设计相对易于创作，并且在本质上构建起来也没有什么代价，一个不令人吃惊的发现是，软件设计往往是难以置信的庞大和复杂。这看起来似乎很明显，但是问题的重要性却常常被忽视。学校中的项目通常具有数千行的代码。具有10 000行代码（设计）的软件产品被它们的设计者丢弃的情况也是有的。我们早就不再关注于简单的软件。典型的商业软件的设计都是由数十万行代码组成的。许多软件设计达到了上百万行代码。另外，软件设计几乎总是在不断地演化。虽然当前的设计可能只有几千行代码，但是在产品的生命期中，实际上可能要编写许多倍的代码。
尽管确实存在一些硬件设计，它们看起来似乎和软件设计一样复杂，但是请注意两个有关现代硬件的事实。第一，复杂的硬件工程成果未必总是没有错误的，在这一点上，它不存在像软件那样让我们相信的评判标准。多数的微处理器在发售时都具有一些逻辑错误：桥梁坍塌，大坝破裂，飞机失事以及数以千计的汽车和其他消费品被召回——所有的这些我们都记忆犹新，所有的这些都是设计错误的结果。第二，复杂的硬件设计具有与之对应的复杂、昂贵的构建阶段。结果，制造这种系统所需的能力限制了真正能够生产复杂硬件设计公司的数目。对于软件来说，没有这种限制。目前，已经有数以百计的软件机构和数以千计的非常复杂的软件系统存在，并且数量以及复杂性每天都在增长。这意味着软件行业不可能通过仿效硬件开发者找到针对自身问题的解决办法。倘若一定要说出有什么相同之处的话，那就是，当CAD和CAM可以做到帮助硬件设计者创建越来越复杂的设计时，硬件工程才会变得和软件开发越来越像。
设计软件是一种管理复杂性的活动。复杂性存在于软件设计本身之中，存在于公司的软件机构之中，也存在于整个软件行业之中。软件设计和系统设计非常相似。它可以跨越多种技术并且常常涉及多个学科分支。软件的规格说明往往不固定、经常快速变化，这种变化常常在正进行软件设计时发生。同样，软件开发团队也往往不固定，常常在设计过程的中间发生变化。在许多方面，软件都要比硬件更像复杂的社会或者有机系统。所有这些都使得软件设计成为了一个困难的并且易出错的过程。虽然所有这些都不是创造性的想法，但是在软件工程革命开始将近30年后的今天，和其他工程行业相比，软件开发看起来仍然像是一种未受过训练（undisciplined）的技艺。
一般的看法认为，当真正的工程师完成了一个设计，不管该设计有多么复杂，他们都非常确信该设计是可以工作的。他们也非常确信该设计可以使用公认的技术建造出来。为了做到这一点，硬件工程师花费了大量的时间去验证和改进他们的设计。例如，请考虑一个桥梁设计。在这样一个设计实际建造之前，工程师会进行结构分析——他们建立计算机模型并进行仿真，他们建立比例模型并在风洞中或者用其他一些方法进行测试。简而言之，在建造前，设计者会使用他们能够想到的一切方法来证实设计是正确的。对于一架新型客机的设计来说，情况甚至更加严重；必须要构建出和原物同尺寸的原型，并且必须要进行飞行测试来验证设计中的种种预计。
对于大多数人来说，软件中明显不存在和硬件设计同样严格的工程。然而，如果我们把源代码看做是设计，那么就会发现软件工程师实际上对他们的设计做了大量的验证和改进。软件工程师不把这称为工程，而称它为测试和调试。大多数人不把测试和调试看作是真正的“工程”——在软件行业中肯定没有被看作是。造成这种看法的原因，更多的是因为软件行业拒绝把代码看作设计，而不是任何实际的工程差别。事实上，试验模型、原型以及电路试验板已经成为其他工程学科公认的组成部分。软件设计者之所以不具有或者没有使用更多的正规方法来验证他们的设计，是因为软件构建周期的简单经济规律。
第一个启示：仅仅构建设计并测试它比做任何其他事情要廉价一些，也简单一些。我们不关心做了多少次构建——这些构建在时间方面的代价几乎为零，并且如果我们丢弃了构建，那么它所使用的资源完全可以重新利用。请注意，测试并非仅仅是让当前的设计正确，它也是改进设计的过程的一部分。复杂系统的硬件工程师常常建立模型（或者，至少他们把设计用计算机图形直观地表现出来）。这就使得他们获得了对于设计的一种“感觉”，而仅仅去检查设计是不可能获得这种感觉的。对于软件来说，构建这样一个模型既不可能也无必要。我们仅仅构建产品本身。即使正规的软件验证可以和编译器一样自动进行，我们还是会去进行构建/测试循环。因此，正规的验证对于软件行业来说从来没有太多的实际意义。
这就是现今软件开发过程的现实。数量不断增长的人和机构正在创建着更加复杂的软件设计。这些设计会被先用某些编程语言编写出来，然后通过构建/测试循环进行验证和改进。过程易于出错，并且不是特别的严格。相当多的软件开发人员并不想相信这就是过程的运作方式，也正因为这一点，使问题变得更加复杂。
当前大多数的软件过程都试图把软件设计的不同阶段分离到不同的类别中。必须要在顶层的设计完成并且冻结后，才能开始编码。测试和调试只对清除建造错误是必要的。程序员处在中间位置，他们是软件行业的建造工人。许多人认为，如果我们可以让程序员不再进行“随意的编码（hacking）”并且按照交给他们的设计去进行构建（还要在过程中，犯更少的错误），那么软件开发就可以变得成熟，从而成为一门真正的工程学科。但是，只要过程忽视了工程和经济学事实，这就不可能发生。
例如，任何一个现代行业都无法忍受在其制造过程中出现超过100%的返工率。如果一个建造工人常常不能在第一次就构建正确，那么不久他就会失业。但是在软件业中，即使最小的一块代码，在测试和调试期间，也很可能会被修正或者完全重写。在一个创造性的过程中（比如：设计），我们认可这种改进不是制造过程的一部分。没有人会期望工程师第一次就创建出完美的设计。即使她做到了，仍然必须让它经受改进过程，目的就是为了证明它是完美的。
即使我们从日本的管理方法中没有学到任何东西，我们也应该知道由于在过程中犯错误而去责备工人是无益于提高生产率的。我们不应该不断地强迫软件开发去符合不正确的过程模型，相反，我们需要去改进过程，使之有助于而不是阻碍产生更好的软件。这就是“软件工程”的石蕊测试。工程是关于你如何实施过程的，而不是关于是否需要一个CAD系统来产生最终的设计文档。
关于软件开发有一个压倒性的问题，那就是一切都是设计过程的一部分。编码是设计，测试和调试是设计的一部分，并且我们通常认为的设计仍然是设计的一部分。虽然软件构建起来很廉价，但是设计起来却是难以置信的昂贵。软件非常的复杂，具有众多不同方面的设计内容以及它们所导致的设计考虑。问题在于，所有不同方面的内容是相互关连的（就像硬件工程中的一样）。我们希望顶层设计者可以忽视模块算法设计的细节。同样，我们希望程序员在设计模块内部算法时不必考虑顶层设计问题。糟糕的是，一个设计层面中的问题侵入到了其他层面之中。对于整个软件系统的成功来说，为一个特定模块选择算法可能和任何一个更高层次的设计问题同样重要。在软件设计的不同方面内容中，不存在重要性的等级。最低层模块中的一个不正确设计可能和最高层中的错误一样致命。软件设计必须在所有的方面都是完整和正确的，否则，构建于该设计基础之上的所有软件都会是错误的。
为了管理复杂性，软件被分层设计。当程序员在考虑一个模块的详细设计时，可能还有数以百计的其他模块以及数以千计的细节，他不可能同时顾及。例如，在软件设计中，有一些重要方面的内容不是完全属于数据结构和算法的范畴。在理想情况下，程序员不应该在设计代码时还得去考虑设计的这些其他方面的内容。
但是，设计并不是以这种方式工作的，并且原因也开始变得明朗。软件设计只有在其被编写和测试后才算完成。测试是设计验证和改进过程的基础部分。高层结构的设计不是完整的软件设计；它只是细节设计的一个结构框架。在严格地验证高层设计方面，我们的能力是非常有限的。详细设计最终会对高层设计造成的影响至少和其他的因素一样多（或者应该允许这种影响）。对设计的各个方面进行改进，是一个应该贯穿整个设计周期的过程。如果设计的任何一个方面内容被冻结在改进过程之外，那么对于最终设计将会是糟糕的或者甚至无法工作这一点，就不会觉得奇怪了。
如果高层的软件设计可以成为一个更加严格的工程过程，那该有多好呀，但是软件系统的真实情况不是严格的。软件非常的复杂，它依赖于太多的其他东西。或许，某些硬件没有按照设计者认为的那样工作，或者一个库例程具有一个文档中没有说明的限制。每一个软件项目迟早都会遇到这些种类的问题。这些种类的问题会在测试期间被发现（如果我们的测试工作做得好的话），之所以如此是因为没有办法在早期就发现它们。当它们被发现时，就迫使对设计进行更改。如果我们幸运，那么对设计的更改是局部的。时常，更改会波及到整个软件设计中的一些重要部分（莫非定律）。当受到影响的设计的一部分由于某种原因不能更改时，那么为了能够适应影响，设计的其他部分就必须得遭到破坏。这通常导致的结果就是管理者所认为的“随意编码”，但是这就是软件开发的现实。
例如，在我最近工作的一个项目中，发现了模块A的内部结构和另一个模块B之间的一个时序依赖关系。糟糕的是，模块A的内部结构隐藏在一个抽象体的后面，而该抽象体不允许以任何方法把对模块B的调用合入到它的正确调用序列中。当问题被发现时，当然已经错过了更改A的抽象体的时机。正如所料，所发生的就是把一个日益增长的复杂的“修正”集应用到A的内部设计上。在我们还没有安装完版本1时，就普遍感觉到设计正在衰退。每一个新的修正很可能都会破坏一些老的修正。这是一个正规的软件开发项目。最后，我和我的同事决定对设计进行更改，但是为了得到管理层的同意，我们不得不自愿无偿加班。
在任何一般规模的软件项目中，肯定会出现像这样的问题，尽管人们使用了各种方法来防止它的出现，但是仍然会忽视一些重要的细节。这就是工艺和工程之间的区别。如果经验可以把我们引向正确的方向，这就是工艺。如果经验只会把我们带入未知的领域，然后我们必须使用一开始所使用的方法并通过一个受控的改进过程把它变得更好，这就是工程。
我们来看一下只是作为其中很小一点的内容，所有的程序员都知道，在编码之后而不是之前编写软件设计文档会产生更加准确的文档。现在，原因是显而易见的。用代码来表现的最终设计是惟一一个在构建/测试循环期间被改进的东西。在这个循环期间，初始设计保持不变的可能性和模块的数量以及项目中程序员的数量成反比。它很快就会变得毫无价值。
在软件工程中，我们非常需要在各个层次都优秀的设计。我们特别需要优秀的顶层设计。初期的设计越好，详细设计就会越容易。设计者应该使用任何可以提供帮助的东西。结构图表、Booch 图、状态表、PDL等等——如果它能够提供帮助，就去使用它。但是，我们必须记住，这些工具和符号都不是软件设计。最后，我们必须创建真正的软件设计，并且是使用某种编程语言完成的。因此，当我们得出设计时，我们不应该害怕对它们进行编码。在必要时，我们必须应该乐于去改进它们。
至今，还没有任何设计符号可以同时适用于顶层设计和详细设计。设计最终会表现为以某种编程语言编写的代码。这意味着在详细设计可以开始前，顶层设计符号必须被转换成目标编程语言。这个转换步骤耗费时间并且会引入错误。程序员常常是对需求进行回顾并且重新进行顶层设计，然后根据它们的实际去进行编码，而不是从一个可能没有和所选择的编程语言完全映射的符号进行转换。这同样也是软件开发的部分现实情况。
也许，如果让设计者本人来编写初始代码，而不是后来让其他人去转换语言无关的设计，就会更好一些。我们所需要的是一个适用于各个层次设计的统一符号。换句话说，我们需要一种编程语言，它同样也适用于捕获高层的设计概念。C＋＋正好可以满足这个要求。C++是一门适用于真实项目的编程语言，同时它也是一个非常具有表达力的软件设计语言。C++允许我们直接表达关于设计组件的高层信息。这样，就可以更容易地进行设计，并且以后可以更容易地改进设计。由于它具有更强大的类型检查机制，所以也有助于检测到设计中的错误。这就产生了一个更加健壮的设计，实际上也是一个更好的工程化设计。
最后，软件设计必须要用某种编程语言表现出来，然后通过一个构建/测试循环对其进行验证和改进。除此之外的任何其他主张都完全没有用。请考虑一下都有哪些软件开发工具和技术得以流行。结构化编程在它的时代被认为是创造性的技术。 Pascal使之变得流行，从而自己也变得流行。面向对象设计是新的流行技术，而C++是它的核心。现在，请考虑一下那些没有成效的东西。CASE工具，流行吗？是的；通用吗？不是。结构图表怎么样？情况也一样。同样地，还有Warner-Orr图、Booch图、对象图以及你能想起的一切。每一个都有自己的强项，以及惟一的一个根本弱点——它不是真正的软件设计。事实上，惟一一个可以被普遍认可的软件设计符号是PDL，而它看起来像什么呢？
这表明，在软件业的共同潜意识中本能地知道，编程技术，特别是实际开发所使用的编程语言的改进和软件行业中任何其他东西相比，具有压倒性的重要性。这还表明，程序员关心的是设计。当出现更加具有表达力的编程语言时，软件开发者就会使用它们。
同样，请考虑一下软件开发过程是如何变化的。从前，我们使用瀑布式过程。现在，我们谈论的是螺旋式开发和快速原型。虽然这种技术常常被认为可以“消除风险” 以及“缩短产品的交付时间”，但是它们事实上也只是为了在软件的生命周期中更早地开始编码。这是好事。这使得构建/测试循环可以更早地开始对设计进行验证和改进。这同样也意味着，顶层软件设计者很有可能也会去进行详细设计。
正如上面所表明的，工程更多的是关于如何去实施过程的，而不是关于最终产品看起来的像什么。处在软件行业中的我们，已经接近工程师的标准，但是我们需要一些认知上的改变。编程和构建/测试循环是工程软件过程的中心。我们需要以像这样的方式去管理它们。构建/测试循环的经济规律，再加上软件系统几乎可以表现任何东西的事实，就使得我们完全不可能找出一种通用的方法来验证软件设计。我们可以改善这个过程，但是我们不能脱离它。
最后一点：任何工程设计项目的目标是一些文档产品。显然，实际设计的文档是最重要的，但是它们并非惟一要产生的文档。最终，会期望某些人来使用软件。同样，系统很可能也需要后续的修改和增强。这意味着，和硬件项目一样，辅助文档对于软件项目具有同样的重要性。虽然暂时忽略了用户手册、安装指南以及其他一些和设计过程没有直接联系的文档，但是仍然有两个重要的需求需要使用辅助设计文档来解决。
辅助文档的第一个用途是从问题空间中捕获重要的信息，这些信息是不能直接在设计中使用的。软件设计需要创造一些软件概念来对问题空间中的概念进行建模。这个过程需要我们得出一个对问题空间中概念的理解。通常，这个理解中会包含一些最后不会被直接建模到软件空间中的信息，但是这些信息却仍然有助于设计者确定什么是本质概念以及如何最好地对它们建模。这些信息应该被记录在某处，以防以后要去更改模型。
对辅助文档的第二个重要需要是对设计的某些方面的内容进行记录，而这些方面的内容是难以直接从设计本身中提取的。它们既可以是高层方面的内容，也可以是低层方面内容。对于这些方面内容中的许多来说，图形是最好的描述方式。这就使得它们难以作为注释包含在代码中。这并不是说要用图形化的软件设计符号代替编程语言。这和用一些文本描述来对硬件科目的图形化设计文档进行补充没有什么区别。
决不要忘记，是源代码决定了实际设计的真实样子，而不是辅助文档。在理想情况下，可以使用软件工具对源代码进行后期处理并产生出辅助文档。对于这一点，我们可能期望过高了。次一点的情况是，程序员（或者技术方面的编写者）可以使用一些工具从源代码中提取出一些特定的信息，然后可以把这些信息以其他一些方式文档化。毫无疑问，手工对这种文档保持更新是困难的。这是另外一个支持需要更具表达力的编程语言的理由。同样，这也是一个支持使这种辅助文档保持最小并且尽可能在项目晚期才使之变成正式的理由。同样，我们可以使用一些好的工具；不然的话，我们就得求助于铅笔、纸以及黑板。
总结如下： 实际的软件运行于计算机之中。它是存储在某种磁介质中的0和1的序列。它不是使用C++语言（或者其他任何编程语言）编写的程序。 程序清单是代表软件设计的文档。实际上把软件设计构建出来的是编译器和连接器。 构建实际软件设计的廉价程度是令人难以置信的，并且它始终随着计算机速度的加快而变得更加廉价。 设计实际软件的昂贵程度是令人难以置信的，之所以如此，是因为软件的复杂性是令人难以置信的，并且软件项目的几乎所有步骤都是设计过程的一部分。 编程是一种设计活动——好的软件设计过程认可这一点，并且在编码显得有意义时，就会毫不犹豫的去编码。 编码要比我们所认为的更频繁地显现出它的意义。通常，在代码中表现设计的过程会揭示出一些疏漏以及额外的设计需要。这发生的越早，设计就会越好。 因为软件构建起来非常廉价，所以正规的工程验证方法在实际的软件开发中没有多大用处。仅仅建造设计并测试它要比试图去证明它更简单、更廉价。 测试和调试是设计活动——对于软件来说，它们就相当于其他工程学科中的设计验证和改进过程。好的软件设计过程认可这一点，并且不会试图去减少这些步骤。 还有一些其他的设计活动——称它们为高层设计、模块设计、结构设计、构架设计或者诸如此类的东西。好的软件设计过程认可这一点，并且慎重地包含这些步骤。 所有的设计活动都是相互影响的。好的软件设计过程认可这一点，并且当不同的设计步骤显示出有必要时，它会允许设计改变，有时甚至是根本上的改变， 许多不同的软件设计符号可能是有用的——它们可以作为辅助文档以及工具来帮助简化设计过程。它们不是软件设计。 软件开发仍然还是一门工艺，而不是一个工程学科。主要是因为缺乏验证和改善设计的关键过程中所需的严格性。 最后，软件开发的真正进步依赖于编程技术的进步，而这又意味着编程语言的进步。C++就是这样的一个进步。它已经取得了爆炸式的流行，因为它是一门直接支持更好的软件设计的主流编程语言。 C++在正确的方向上迈出了一步，但是还需要更大的进步。 后 记</description>
    </item>
    
    <item>
      <title>两分钟让你明白什么是ERP</title>
      <link>https://tairan.net/posts/2008-08-27-what-is-erp/</link>
      <pubDate>Wed, 27 Aug 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-08-27-what-is-erp/</guid>
      <description>ERP(Enterprise ResourcePlanning)企业资源计划系统，是指建立在信息技术基础上，以系统化的管理思想，为企业决策层及员工提供决策运行手段的管理平台。
一天中午，丈夫在外给家里打电话：“亲爱的老婆，晚上我想带几个同事回家吃饭可以吗？”（订货意向）
妻子：“当然可以，来几个人，几点来，想吃什么菜？ ”
丈夫：“6个人，我们7点左右回来，准备些酒、烤鸭、番茄炒蛋、凉菜、蛋花汤……。你看可吗？”（商务沟通）
妻子：“没问题，我会准备好的。”（订单确认）
妻子记录下需要做的菜单（MPS计划），具体要准备的东西：鸭、酒、番茄、鸡蛋、调料……（BOM物料清单），发现需要：1只鸭蛋，5瓶酒，4个鸡蛋……（BOM展开），炒蛋需要6个鸡蛋，蛋花汤需要4个鸡蛋（共用物料）。
打开冰箱一看（库房），只剩下2个鸡蛋（缺料）。
来到自由市场，妻子：“请问鸡蛋怎么卖？”（采购询价）
小贩：“1个1元，半打5元，1打9.5元。”
妻子：“我只需要8个，但这次买1打。”（经济批量采购）
妻子：“这有一个坏的，换一个。”（验收、退料、换料）
回到家中，准备洗采、切菜、炒菜……（工艺线路），厨房中有燃气灶、微波炉、电饭煲……（工作中心）。
妻子发现拨鸭毛最费时间（瓶颈工序，关键工艺路线），用微波炉自己做烤鸭可能来不及（产能不足），于是阅览室在楼下的餐厅里买现成的（产品委外）。
下午4点，接到儿子的电话：“妈妈，晚上几个同学想来家里吃饭，你帮忙准备一下。”（紧急订单）
“好的，你们想吃什么，爸爸晚上也有客人，你愿意和他们一起吃吗？”
“菜你看着办吧，但一定要有番茄炒鸡蛋，我们不和大人一起吃，6：30左右回来。”（不能并单处理）
“好的，肯定让你们满意。”（订单确定）
“鸡蛋又不购了，打电话叫小贬送来。”（紧急采购）
6：30，一切准备就绪，可烤鸭还没送来，急忙打电话询问：“我是李太，怎么订的烤鸭还不送来？”（采购委外单跟催）
“不好意思，送货的人已经走了，可能是堵车吧，马上就会到的。”
门铃响了。
“李太太，这是您要的烤鸭。请在单上签一个字。”（验收、入库、转应付账款）
6：45，女儿的电话：“妈妈，我想现在带几个朋友回家吃饭可以吗？”（呵呵 ，又是紧急订购意向，要求现货）
“不行呀，女儿，今天妈已经需要准备两桌饭了，时间实在是来不及，真的非常抱歉，下次早点说，一定给你们准备好。”（哈哈，这就是ERP的使用局限，要有稳定的外部环境，要有一个起码的提前期 ）。 …… ……
送走了所有客人，疲惫的妻子坐在沙发上对丈夫说：“亲爱的，现在咱们家请客的频率非常高，应该要买些厨房用品了（设备采购），最好能再雇个小保姆（连人力资源系统也有缺口了）。 丈夫：“家里你做主，需要什么你就去办吧。”（通过审核）
妻子：“还有，最近家里花销太大，用你的私房钱来补贴一下，好吗？”（最后就是应收货款的催要）
现在还有人不理解ERP吗？记住，每一个合格的家庭主妇都是生产厂长的有力竞争者</description>
    </item>
    
    <item>
      <title>Decade of Programming Institute</title>
      <link>https://tairan.net/posts/2008-08-12-decade-of-programming-institute/</link>
      <pubDate>Tue, 12 Aug 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-08-12-decade-of-programming-institute/</guid>
      <description>十年学会编程著者： Peter Norvig 翻译： Dai Yuwen 为何人人都这么着急？ 信步走进任何一家书店，你会看到名为《如何在7天内学会Java》的书，还有各种各样类似的书：在几天内或几小时内学会Visual Basic, Windows, Internet等等，一眼望不到尽头。我在Amazon 上做了如下的 强力检索 ： pubdate: after 1992 and title: days and (title: learn or title: teach yourself)
得到了248个结果。前78个都是计算机类书籍（第79个是 Learn Bengali in 30 days）。我用&amp;rdquo;hours&amp;rdquo;替换&amp;rdquo;days&amp;rdquo;，得到了类似的结果：更多的253书。前77本是计算机类书籍，第78本是 Teach Yourself Grammar and Style in 24 Hours。在前200本书中，有96% 是计算机类书籍。
结论是：要么人们都在忙忙地学习计算机，要么计算机比其它任何东西都容易学。没有书籍教你在几天内学会古典音乐、量子物理，或者是养狗。
让我们分析一下，象一本名为《三天内学会Pascal》的书意味着什么：
* 学习： 在三天里，你没有时间写一些重大的程序，并从成功或失败中得益。你没有时间与有经验的程序员合作，并理解在那样的环境下工作是怎么回事。一句话，你不会有时间学到太多东西。因此他们只能谈论一些肤浅的东西，而不是深入的理解。正如亚力山大教皇所说，浅尝辄止是危险的事情。 * Pascal： 在三天时间里，你可能学会Pascal的语法（如果你已经学过类似的语言），但你学不到更多的如何使用这些语法的知识。也就是说，假如你曾是个BASIC 程序员，你可以学着用Pascal语法写出BASIC风格的程序，但你不可能了解Pascal真正的好处（和坏处）。那么关键是什么？ Alan Perlis 说过：“一种不改变你编程的思维方式的语言，不值得去学。” 一种可能的情况是：你必须学一点儿Pascal（或可能性更大的象Visual Basic 或 JavaScript之类），因为你为了完成某种特定的任务，需要与一个现存的工具建立接口。不过那不是学习如何编程，而是在学习如何完成那个任务。 * 三天内： 很不幸，这不够，原因由下一节告诉我们。  在十年里学会编程 研究表明 (Hayes，Bloom) 在任何一种领域内，象下棋、作曲、绘画、钢琴演奏、游泳、网球、以及原子物理学和拓扑学，等等，要达到专家水平大约都要化十年时间。没有真正的捷径：即使是莫扎特，4岁时就是音乐神童，13年后才开始写出世界级的作品。在另一方面，披头士似乎在1964年的Ed Sullivan表演上一炮走红。但他们从1957年就开始表演，在获得大众青睐后，他们的第一个重大成功，Sgt. Peppers，是1967年发行的。Samuel Johnson （塞缪尔·约翰逊，英国辞典编纂家及作家）认为要花比十年更长的时间：“在任何领域中出类拔萃都要用毕生的劳作来取得；它不可能用较低的代价获得。” 而Chaucer（乔叟，英国诗人）感叹到：“人生短暂，学海无涯。”</description>
    </item>
    
    <item>
      <title>【转】grep sed awk 使用技巧</title>
      <link>https://tairan.net/posts/2008-06-04-using-grep-sed-and-awk/</link>
      <pubDate>Wed, 04 Jun 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-06-04-using-grep-sed-and-awk/</guid>
      <description>引用 Grep的常用命令语法1. 双引号引用和单引号引用 在g r e p命令中输入字符串参数时，最好将其用双引号括起来。例如：”m y s t r i n g”。这样做有两个原因，一是以防被误解为 s h e l l命令，二是可以用来查找多个单词组成的字符串，例如：”jet plane”，如果不用双引号将其括起来，那么单词 p l a n e将被误认为是一个文件，查询结果将返回”文件不存在”的错误信息。 在调用变量时，也应该使用双引号，诸如： g r e p”$ M Y VA R”文件名，如果不这样，将 没有返回结果。 在调用模式匹配时，应使用单引号.[root@mypc ]# echo `grep 123 111.txt` (#注意是反单引号)
2. 常用的g r e p选项有： -c 只输出匹配行的计数。 -i 不区分大小写（只适用于单字符）。 -h 查询多文件时不显示文件名。 -l 查询多文件时只输出包含匹配字符的文件名。 -n 显示匹配行及行号。 -s 不显示不存在或无匹配文本的错误信息。 -v 显示不包含匹配文本的所有行。
3. 特殊的–在多个文件中进行查询 $ grep “sort”*.doc ( #在当前目录下所有. d o c文件中查找字符串”s o r t”) $ grep “sort it” * (#或在所有文件中查询单词”sort it”) 接下来的所有示例是指在单个文件中进行查询 4.</description>
    </item>
    
  </channel>
</rss>