<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Tairan&#39;s Story</title>
    <link>https://tairan.net/posts/</link>
    <description>Recent content in Posts on Tairan&#39;s Story</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Copyright 2019 Tairan Wang</copyright>
    <lastBuildDate>Sun, 21 Jul 2019 12:28:12 +0800</lastBuildDate>
    
	<atom:link href="https://tairan.net/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用 Hugo 写作</title>
      <link>https://tairan.net/posts/2019-07-21-write-blog-by-hugo/</link>
      <pubDate>Sun, 21 Jul 2019 12:28:12 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2019-07-21-write-blog-by-hugo/</guid>
      <description> 当做一件事情的时候，若动机不纯，大概率会失败，或者坚持不下去。之前，借着学习GraphQL之名，重拾在GitHub上写作，现在放弃了。
作为一个技术爱好者，掌握了很多技能，而且还对刚出现的技术怀有热情之心，可在实际工作中会用到的确实其中一小部分。当然，高层次的技术和原理还是经常用到， 如：设计模式、架构，数据结构、算法等。但技术细节，可能在工作中永远也用不到。
最近在公司里扮演的角色是后端开发，若要用到GraphQL，则需要前端配合，若要前端配合，要说服很多人，而且还要替他们踏平日常工作中可能会遇到的坑。
太烦，于是使用Gatsby写博客之事，就搁浅了。
博客，中断了多年，但写作并没有，文字分散在微博，豆瓣，知乎，简书等各处。
近年来，国内站点使用越来越痛苦，自己的内容还是由自己来控制吧，重新回归到GitHub是必要的。
虽说互联网是有记忆的，但中国的互联网除外。
时代在进步，现在静态站点生成工具数不胜数，现在我选择Hugo, 内容依然是Markdown, 但环境配置实在是简单，跨平台，单一可执行文件，模板主题也很多。
如上，自己的内容要掌握在自己的手里，源码和产品分离。源码托管我自己的Gitea站点上，细心呵护。
不忘初心，只是写作。
参考连接  GraphQL Hugo Gatsby Gitea 使用hugo搭建个人blog  </description>
    </item>
    
    <item>
      <title>使用 Octopress 写博客</title>
      <link>https://tairan.net/posts/2012-04-23-write-blog-using-octopress/</link>
      <pubDate>Mon, 23 Apr 2012 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2012-04-23-write-blog-using-octopress/</guid>
      <description>Git改变了众多程序员的生活，让写代码真正的成为了生活的一部分。GitHub让团队合作变得更容易。除了代码，博客也可以如此。
Jekyll就是将博客托管到Github的一个工具，它把你的博客从Markdown或者Textile格式转成HTML页面，Github 提供的 Pages则负责了博客的发布工作。
Octopress 则是在 Jekyll 的基础上提供了显示样式和一些插件，让博客变得更美，部署更容易。
Github 支持 CNAME ，允许你将自己的独立域名解析过来。
使用 Octopress 写博客的流程通常是：
 在Github上创建特定名称的仓库如 tairan.github.com 其中 tairan 是我的 Github 登录帐号, 注意: 在此仓库的管理员页面是没有 gh-page 选项的
 从 octopress 把代码克隆到自己的仓库中
  git clone https://octopress.github.com/ tairan.github.com   更新 octopress  bundle update   将代码 Push 到自己的仓库中  git remote add origin http://tairan.github.com git push -a source origin   写博客  rake new_post[&#39;this is a test blog&#39;]  默认 master 分支是用来存放最终生成的静态页面</description>
    </item>
    
    <item>
      <title>使用 Go 调用 Windows API</title>
      <link>https://tairan.net/posts/2012-04-15-the-go-with-win32-api/</link>
      <pubDate>Sun, 15 Apr 2012 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2012-04-15-the-go-with-win32-api/</guid>
      <description>Go 通过 cgo 可以利用现有C语言库
例如在 Windows 中使用 Go 调用 Win32 API
首先安装必要的工具
 Go MingW  %GOPATH% +- src +- w32api +- kernel.go +- testapp +- main.go +- bin # go install testapp +- testapp.exe +- pkg # go install w32api +- windows_386 +- testapp.exe  包装 Windows API
package w32api // #define WIN32_LEAN_AND_MEAN // #include &amp;lt;windows.h&amp;gt; import &amp;quot;C&amp;quot; import &amp;quot;syscall&amp;quot; func GetCurrentDirectory() string { if bufLen := C.GetCurrentDirectoryW(0, nil); bufLen !</description>
    </item>
    
    <item>
      <title>我的 Kindle 3</title>
      <link>https://tairan.net/posts/2011-12-02-kindle-3-for-me/</link>
      <pubDate>Fri, 02 Dec 2011 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2011-12-02-kindle-3-for-me/</guid>
      <description>经常阅读的人应该入手一部电子阅读器，在信息时代我们的时间都已经分割成若干的碎片，阅读的场所随时都在变化，此外出门随手带上几本书也是常有的事情，如果书籍电子化了，随身带上一个小图书馆也不是什么难事。
根据自己的喜好，我选择了 Amazon 的 Kindle 3，最近 Kindle 4 touch 也出来了，如果也需要的话可以考虑入手一部。在使用 Kindle 3 的过程中我遇到了一些事情，现在记录下来。
我买的是 Kindle 3.5.1 WIFI 广告版，主要的原因是价格，虽然 Kindle 的价格已经比较低廉，但是工资有限需要用钱的地方又很多，所以选择了既能阅读又少花钱的版本。很多人担心广告版会到处铺满广告影响使用，实际上广告只会出现在2个地方：一个是待机屏幕，另一个是 Collection 的下脚，也就是所有书籍目录的下面，不是某一本书的目录。广告的内容大都是一些打折信息，曾经有人出钱买 Kindle 上的 Mac 打折促销代码。广告画面设计的也挺精美的，待机的时候就当换桌面背景了。
刚入手 Kindle ，一个很重要的初始用途是用来看技术文档，比如 RFC， 因为贪心，把所有 RFC 的 PDF 格式文档大约 6000+ 的文件一次放进 Kindle ，悲剧发生了，Kindle 罢工，会重启，无法响应。 后来实际的实践证明，在 Kindle 里一次放入很多书籍是一个巨大的错误，Kindle 的计算能力有限，书籍多了不易查找，一次放入很多书，自己都不会怎么看，完全背离的电子书最初的用途：阅读。对于我来讲，一次在 Kindle 中保有 10-20 本已经足够。
经过这段时间的使用，发现 Kindle 3 并不适合阅读技术书籍，尤其是A4尺寸的 PDF 文件。全屏，竖着看字体太小，横着看一屏无法显示整页，字体放大到任何尺寸后也都会一屏无法显示整页，用5way键移动很痛苦。也许 Kindle Touch 出来后会改善？
柳暗花明又一村，看技术文档不方便，可看其他的人文书籍简直就是天生佳品。一本接着一本，总觉得书籍来源太少。毕竟 Kindle 3 还没有正式进入景德镇，中文书籍依赖网络上各个站点提供的盗版，那感觉就是想花钱买正版却没有货。现在也有些网友准备做正版阅读计划，可那也是才开始，还不知道能否突破景德镇的限制。我也设想做一个电子书分享平台，将目前没有版权或者是自由版权的书整理成某种中间格式，然后生成各种电子阅读器的版本。这潭水太深，这个想法也只是停留在想法这里。
在决定买 Kindle 之前也考察过盛大的锦书，从价格来讲，锦书很有竞争力。但是有两个原因让我放弃了，第一是锦书的云中书城都是所谓的网络文学，99%的作品绝对是猴子打出的汉字。即锦书无法提供有价值的正版书籍购买渠道。第二是锦书配套的环境太差，所谓的管理软件云梯，在英文 Windows 系统上到处乱吗，bug 满天飞，各种限制。花钱买电子书不是为了折腾的，既然花钱就要有好服务，比起 Amazon 的 Email deliver 和 Kindle 支持的各种文档以及配套软件差太远。</description>
    </item>
    
    <item>
      <title>独立程序员接定制软件开发项目总结</title>
      <link>https://tairan.net/posts/2011-06-28-dev-for-custom-software/</link>
      <pubDate>Tue, 28 Jun 2011 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2011-06-28-dev-for-custom-software/</guid>
      <description>定制软件开发中陷阱重重，主要的原因是客户对自己的需求不清楚。很奇怪吧？ 客户竟然对自己想要什么东西说不清楚。事实上，在软件开发领域这是常有的事情。软件这玩意抽象，看得见摸不着，甚至看都看不见。让对技术一无所知的人来描述自己想要什么样的软件，太困难了。 这样的事实对乐天派的程序员来讲就是一个噩梦，这里引用西乔姐在 Twitter 上发表的一段话： @arthur369: 千万不要相信那些在谈需求的时候说：“做一个和XX一样的就行了” 的人。其实这种人最好就不要和他一起做事。因为最后结果只有2种，1、你白做了（需求一定会变动数次）；2、做出来一个垃圾。” 
最近我就接到一个这样的项目，刚开始的版本是对照着某软件的前一个发行版做，然后又变成了要具有此软件当前版本的某些功能，最后又发现客户的客户已经有一个类似的软件，于是乎又开始向模仿此软件+改进的方向前进，漫漫长路多折腾，如此多的波折才算拿到最终的需求。真正的需求拿到了开始加班加点的做了，可麻烦的事情还有。
这是一个远程的项目，我在南边，客户在北面, 还好在同一个国家，都说中国话。沟通的次数那叫一个寒碜，三、五天都不一定能接上头，接头的方式基本是邮件和IM，电联不多，软件本身的开发经费就不高，如果直接电联估计都支援给中国移动了。
在项目进行中第一次改变需求的时候，我是做好了心理准备的，毕竟那么多前辈的经验摆在那里。此时我在想借由着自己快速迭代，不断的改进软件原型来拿到真正的需求，理论上这种方式是可行的，总会拿到最终的需求，然后做下去就是了。可现实是残酷的，没有充足的时间，即使你承接项目不要多少钱，客户那边随着时间的流逝也会损失很多本该赚到的利润，咱都是凡人，耗不起呐。
和此类不甚明白软件开发的客户打交道还有个问题，软件里面的实现似乎并那么重要，漂亮好用的UI才是让他们看起来软件是如此美妙的东西。作为独立工作的程序员，大多对外在美没有多少的品味，黑客们更是喜欢默默无闻、稳定可靠后台运行的程序。缺少在美的层次上的交流，后端代码交流更是一团糟，客户说在这里加个东西然后这样动，你后端的东西写的不好则会伤筋动骨。
总之，定制软件开发的项目成本很高，劳神费力不讨好。因为程序员不但要保证有一个很快的开发速度来适应软件的变化，同时也要担负起教育客户的重任，还要培养出对美欣赏的品味。通常此类软件开发过程中得到的物质报酬不多，好处是对于软件开发的新手来讲，通过那么几次定制软件开发的折腾可以快速成长，怎么说也能成为一个快速山寨的熟手。如果你是一个拿着不错的薪水的在职人员，我看还是算了，与其浪费如此之多的精力和少的可怜的报酬，还不如好好钻研自己本身工作上的业务，或者干脆多陪陪身边的人吧。</description>
    </item>
    
    <item>
      <title>为Fedora 15安装64位的FlashPlayer - Update</title>
      <link>https://tairan.net/posts/2011-06-20-install-flashplayer-64bit-for-fedora-15/</link>
      <pubDate>Mon, 20 Jun 2011 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2011-06-20-install-flashplayer-64bit-for-fedora-15/</guid>
      <description>Update 现在Adobe已经提供正式版本下载 http://get.adobe.com/flashplayer/  总的来说，复制下面的代码并执行就可以将64位的flashplayer安装到fedora 15 x86_64上去了。截至目前为止，Adobe 依然没有官方的正式版flashplayer 64bit版本释放出来，只有在http://labs.adobe.com 能拿到测试版本。不管怎样，测试版本在fedora上工作的也不错。:-)
INSTALL
#!/usr/bin/env bash FLASH=http://download.macromedia.com/pub/labs/flashplayer10/flashplayer10_2_p3_64bit_linux_111710.tar.gz cd /tmp wget -c $FLASH tar zxf flashplayer10_2_p3_64bit_linux_111710.tar.gz # apply plugins for firefox cp libflashplayer.so /usr/lib64/mozilla/plugins/libflashplayer.so # remove cache rm -rf libflashplayer.so rm -rf flashplayer10_2_p3_64bit_linux_111710.tar.gz  UNINSTALL
rm -rf /usr/lib64/mozilla/plugins/libflashplayer.so  </description>
    </item>
    
    <item>
      <title>转战亚马逊EC2</title>
      <link>https://tairan.net/posts/2011-04-14-move-on-amazon-ec2/</link>
      <pubDate>Thu, 14 Apr 2011 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2011-04-14-move-on-amazon-ec2/</guid>
      <description>EC2 Nginx PHP FastCGI MySQL WordPress
关于 Amazon EC2 的教程已经铺天盖地了，有英文也有中文。现在EC2对新注册的用户有优惠，及Micro Instance级别的会有1年的免费份额。注意只是对新注册用户，如果你已经注册了 AWS 账户，即使并没有开通任何服务也不属于新注册用户，意思就是只要你使用就没有免费的。这一点我是用了$2美金的账单换来的教训。网上也有其他同学遇到，看来不仔细阅读文档就是没文化的代表。这里是账单查询地址https://aws-portal.amazon.com/gp/aws/developer/account/index.html?ie=UTF8&amp;action=activity-summary 一旦发现产生莫名其妙的费用，赶紧查。
我这次使用 Amazon EC2 的目的是把即将到期的博客迁移到这里，并且让手中的一些闲置域名也利用起来。其中还有一个更重要的目的就是为部署一个很重要的网站，基于Django的。
首先要做的是迁移博客。 进入 EC2 后需要安装一些软件，因为Micro Instance只能使用Amazon Linux(redhat系)，所以包管理器使用的是yum。
sudo yum install mysql mysql-libs mysql-server php php-mysql spawn-fcgi nginx  启动MySQL后，并更改root用户的密码
sudo service mysqld start /usr/bin/mysqladmin -u root -p -h localhost password &#39;newpassword&#39;  配置 Nginx， 在这里我遇到了一些问题，折腾了一天才搞定。这里要十分的感谢网友 hfw_1984 的帮助。遇到的问题主要集中在fastcgi部分，如果要让Nginx支持我博客的URL格式如http://www.tairan.net/index.php/2011/03/30/follow-the-right-way/ 则必须参照以下配置：
location ~ ^.+\.php { fastcgi_split_path_info ^(.+\.php)(/.+)$; # 这一行必须放在 SCRIPT_FILENAME 上面，否则会被覆盖。 fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; #fastcgi_param PATH_INFO $fastcgi_path_info; # 这两行并不需要 #fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info; include /etc/nginx/fastcgi_params; fastcgi_pass 127.</description>
    </item>
    
    <item>
      <title>守规矩才能行的方便</title>
      <link>https://tairan.net/posts/2011-03-30-follow-the-right-way/</link>
      <pubDate>Wed, 30 Mar 2011 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2011-03-30-follow-the-right-way/</guid>
      <description>规矩是无处不在的，使用工具也有使用工具的规矩，就像你不能拿个榔头去拧螺丝一样。 就算是软件也有其使用的规矩， 经常看到有人抱怨某个软件怎么样的难用，其实大多数情况下他是用使用其他软件的习惯去使用另一个软件，也就是因为没有遵守使用此软件的规矩而带来的诸多不便。当然也有极少部分的软件真的很难用，那么就打破规矩，重新建立一个。
举几个例子， Windows 上的软件管理，如果不用第三方的软件管理工具的话，那么使用MSI安装，卸载就是它的规矩。 Debian/Ubuntu 则是 apt-get 进行软件的管理，如果你使用咒语的话 ./configure &amp;amp; make &amp;amp; make install 那么就要自己去管理软件的诸多文件。 Mercurial 如果你要删除或者移动文件那么就使用 hg rm / hg mv 的命令来做，而不是直接的 rm / mv</description>
    </item>
    
    <item>
      <title>如何判断程序是安装后第一次执行</title>
      <link>https://tairan.net/posts/2011-03-26-is-first-run/</link>
      <pubDate>Sat, 26 Mar 2011 00:00:01 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2011-03-26-is-first-run/</guid>
      <description>有时我们需要在程序第一次启动的时候进行一些初始化工作，如何识别程序是部署后第一次运行呢？ .net framework就提供了这样的功能。
参考这里 http://msdn.microsoft.com/zh-cn/library/system.deployment.application.applicationdeployment.isfirstrun.aspx 
这里还有更多的关于.net 程序部署相关的技术说明 。http://msdn.microsoft.com/zh-cn/library/system.deployment.application.aspx</description>
    </item>
    
    <item>
      <title>如何在Alwaysdata上部署Django应用</title>
      <link>https://tairan.net/posts/2011-02-24-how-to-deploy-django-app-on-alwaysdata/</link>
      <pubDate>Thu, 24 Feb 2011 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2011-02-24-how-to-deploy-django-app-on-alwaysdata/</guid>
      <description>Alwaysdata是一个法国的ISP，提供相当不错的VPS，共享主机等服务，而且免费的项目也相当的好，可惜你需要在墙外才能享受到如此高档的服务。
在Alwaysdata的wiki上已经详细说明了如何部署Django的应用，但是如果一丝不苟的依葫芦画瓢你未必能一次成功，因为这篇文档还遗漏了一点。
你还需要在project的根目录中放一个.htaccess 如下
project |-- apps |-- public |-- django.fcgi |-- .htaccess |-- .htaccess |-- settings.py |-- manage.py  而这个 .htaccess 的内容是：
AddHandler fastcgi-script .fcgi RewriteEngine On RewriteCond %{REQUEST_FILENAME} !-f RewriteRule ^(.*)$ public/django.fcgi/$1 [QSA,L]  </description>
    </item>
    
    <item>
      <title>读《创业者》</title>
      <link>https://tairan.net/posts/2010-11-29-note-of-founders-at-work/</link>
      <pubDate>Mon, 29 Nov 2010 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2010-11-29-note-of-founders-at-work/</guid>
      <description>这本书我读的是中文版，现在我还是无法流畅的阅读英文版以及购买英文版对于墙内的我来说也是在是不方便。既然是翻译版，那么总会有几个人跳出来说翻译的不好，我认为翻译的质量固然重要，但是你不能因为还不至于影响阅读的小毛病来排斥一本好书。
英文版 中文版
曾经在书店蹲点看过第一篇关于Paypal的，其他的都是跳着看的，因为这本书对32个不同的创业者的采访，所以跳着看是最合适的。你喜欢谁就可以先看谁！
这本书里，我最喜欢的几个人是：史蒂夫·沃兹尼亚克、大卫·海涅米尔·汉森 、乔尔·斯波斯基、埃文·威廉姆斯、梅娜·特洛特。当然其他的人我也很喜欢，但是这几个人对现在的我来说，影响颇深。
在我眼里，史蒂夫·沃兹尼亚克简直就是一个完美的黑客，好吧，你可以把Apple I当作一个玩具，但是Apple II对个人计算机产生了划时代的影响，正是史蒂夫·沃兹尼亚克一个人独立完成的Apple II，从硬件组装设计到操作系统以及编程语言等。我最欣赏史蒂夫·沃兹尼亚克对待计算机的态度：如果没有那就自己设计一个吧。另一方面，史蒂夫·沃兹尼亚克的人格魅力也很强悍。就是一超脱的大侠，自己专注技术的同时并不去计较物质上的所得，也许你觉得他赚了很多钱，并不单纯，可赚钱对他来说真的只是副产品。所以他会将自己的股份分给40位他认为对苹果有贡献却没有得到股份的工程师。
埃文·威廉姆斯和梅娜·特洛特要放在一起才会更有味道，他们分别是Blogger和TypePad的创始人。Blogger最终被Google收购，目前被挡在墙外。而Blogger在被收购之前的发展并不是一帆风顺的，因为埃文·威廉姆斯开不起员工的工资，把公司解散了，成了孤家寡人。但是埃文·威廉姆斯并没有放弃，带着Blogger扛过来了，而且他还创建了Twitter，当然这个也是墙外的。TypePad在发展的过程中好像并没有比Blogger惨，但是这对程序员夫妻过的也不是一帆风顺。虽然没有得到被大牌收购的命运，但是他们写的优秀的博客程序赢得了众多的付费用户。他们不但运营着TypePad，还创造了一个很强大的独立博客程序MovableType。有意思的是埃文·威廉姆斯和梅娜·特洛特都在很糟糕的环境下坚持了下来。
大卫·海涅米尔·汉森和乔尔·斯波斯基是我目前的指路明灯！大卫·海涅米尔·汉森是2005年的开源软件评选出来的年度最佳黑客，他们的团队不仅创造了划时代的RubyOnRails，而且运营的产品也很成功。乔尔·斯波斯基更是大名鼎鼎的著名小公司的领头羊。他们两个人让我看到了希望，公司并不一定要大，要上市，重要的是要让公司健康的运行，良好的舒适的工作环境，不错的盈利能力，即使是小公司也会活的很滋润。这种小公司的发展模式很适合互联网时代的程序员。这就是我看到的希望！</description>
    </item>
    
    <item>
      <title>论人生</title>
      <link>https://tairan.net/posts/2010-10-26-that-is-life/</link>
      <pubDate>Tue, 26 Oct 2010 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2010-10-26-that-is-life/</guid>
      <description>这篇文章已经躺在我的硬盘中一个月有余，题目起的有点大，正因此我总是觉得自己写出来的东西不够深刻。不过我还是先把它放出来，现在不放又不知道多久才能放出来。借此希望能够引起一些看客的共鸣，最好能得到一些中肯的建议，让我完善自己的思想。
文章全文如下：
论人生  在岔路口 爱丽丝问猫：我该选择哪一条路？ 猫：那要看你去什么地方？ 爱丽丝：随便什么地方都行。 猫：那你选择任何一条路都可以。
 人生就是岔路口的选择题，一条是随便走一条路，另一条是选择一条通向自己目的地的路。
不管你做出什么选择都没有对和错，人生就是如此，出生后一步步地走向死亡。
当你随便选择一条路，可能你在认为这是顺其自然，路通向何方走着瞧。我认为这是很浪漫的选择，能顺其自然则不会感受到被自然规律所束缚的痛苦。然而做出这样的选择，则说明你有足够的信心和一份不用为物质所担忧的心。如果没有这些，这个浪漫的选择会被现实打击地粉碎，并不断的折磨你。当你认为你是在顺其自然的时候，请回忆一下，你是否为之前的一个决定，例如没有得到更好的收入、浪费了好机会而后悔？如果你回答是，那么你真的没有足够的能力去浪漫。
如果选择的是另一条通向自己目的地的路，恭喜你，你选择了一条充满荆棘的痛苦之路，但当你接近或者达到终点的时候会充满着幸福。选择这一条路，在世人眼中你是功利地，世俗的。其实我说这是条现实之路，当然现实并不是说让你势利，而是脚踏实地的一步步的前进。人的能力总是有限的，如果你认不清自己的能力，那么通常你会高估自己，而高估自己的结果就是不断的碰壁。
在人生的路上，很多人遇到的问题是在这两条路门口徘徊，想浪漫，但没有资本，想现实，却不知目的地是何方。
一颗聪明的大脑加上一笔丰厚的遗产足以让你做出浪漫的选择。如果你没有那么还是现实一点比较好，意欲带来的痛苦总是自己心甘情愿忍受的。
实事求是的做出自己的选择，无论是在宝马车里哭，还是在自行车上笑都应该是无怨无悔的。</description>
    </item>
    
    <item>
      <title>安全与易用</title>
      <link>https://tairan.net/posts/2010-10-21-security-and-ease-of-use/</link>
      <pubDate>Thu, 21 Oct 2010 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2010-10-21-security-and-ease-of-use/</guid>
      <description>今天在公司里出现了一件事情，让我认真的思考了下Windows平台的易用性和安全。
事情是这样的，我们需要远程登录到一台德语的机器上工作。为了设置可以同时有两个相同用户名的用户远程登录，我们修改了组策略。两个德语文盲想当然的把一个和英语环境相同位置的选项给禁止了，然而那是拒绝远程用户登录的选项。刚改好的时候还很高兴马上用另外一台机器远程登录试用，很不幸将另外一个已经在上面的用户踢掉后自己也无法登录。
根据以前使用Windows的经验加上问Google，发现Windows远程维护是如此的强大。不仅仅是远程注册表编辑，还可以远程编辑组策略，AD，等等一大堆的东西。这一切在MMC中就可以完成。
如此强大的远程管理，却把我引入到为什么Windows不安全的地方去了。因为如果这是在Linux上把唯一的SSH关闭了，我还真的没辙。
在Windows上的这些远程控制是可以管理的，你可以选择让它不提供这些服务，然而这一切是Windows的默认设置。没有不安全的系统，只有不靠谱的管理员。默认开启了如此之多的远程服务，又遇到了不靠谱的管理员，在互联网上这个服务器绝对是挂了。
为什么是互联网？互联网就是一个狂野丛林，一不小心就成了别人口中的美味。既然那么危险，为什么Windows还开启了那么多的默认服务？让我们来看看Windows的主要用户吧。企业用户，企业内部和外界的联系至少有道墙，或者根本就不和外界联系。个人用户，虽然它们经常暴露在外面，但是即使他们受到伤害，通常损失也不会太大。这两种用户都有共同点，就是不太关心计算机的技术问题。
了解了Windows的使用者，那么Microsoft&amp;reg;有足够的理由开启这些默认服务，让他们的客户更简单的使用Windows，如果遇到问题，可以让IT远程配置即可。这一切的代价就是开启了很多潜在风险。Microsoft&amp;reg;的人当然不都是傻瓜，解决不了问题，只是这个世界有条准则就是做的越多错的越多。在你不真正了解Windows的时候冒然用它作为互联网服务器，那你会得到很多不错的教训！
在这里我并不是声讨Microsoft&amp;reg;和Windows，而是想提醒自己和大家，浅尝辄止害死人！你懂的。</description>
    </item>
    
    <item>
      <title>使用App Engine跟踪ADSL外网IP</title>
      <link>https://tairan.net/posts/2010-10-12-get-adsl-ip-use-app-engine/</link>
      <pubDate>Tue, 12 Oct 2010 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2010-10-12-get-adsl-ip-use-app-engine/</guid>
      <description>在家使用ADSL拨号上网，并使用一台电脑作为Home Server，这样以来可以在工作的时候发现什么好东西，就可以远程连接到家中的电脑进行下载，也可以在家托管自己的代码仓库等，工作学习生活都不耽误。
使用ADSL有个问题，ADSL使用DHCP服务动态分配的，可能每一次拨号得到的IP都不一样。为了跟踪当前所获得的IP地址，我设计了一个简单的IP跟踪解决方案。下面是结构图：

整个架构分为3个部分 1. Home Server, 定时向 App Engine 发送请求告知自己当前的外网IP 2. Google App Engine, 管理用户和IP地址 3. 用户, 提供预定义的口令后就可以看到当前Home Server的外网IP
我的Home Server使用的是 Gentoo Linux, 每一个小时向 App Engine 发送一次请求，如果使用Windows XP，可以使用系统自带的计划任务，但计划任务的最小执行单位是每天。
Home Server 发送请求，是通过 cURL 来实现的，Windows 需要单独下载。我推荐在Windows上安装 GoW 来使用*nix命令提供的便利。 curl http://xxx.appspot.com/collector?key=GUID 
App Engine 预置了一个字典，用来记录使用者的信息以及GUID auth_data = {&amp;lsquo;auth_name&amp;rsquo;: GUID} 
用户访问 http://xxx.appspot.com/ ，填入自己的 auth_name 提交即可看到 App Engine 最后一次接收到IP信息。
这只是一个简单的解决方案，暂时够我使用。有兴趣研究 Google App Engine 的朋友可以来交流。</description>
    </item>
    
    <item>
      <title>夜爆上下班的路</title>
      <link>https://tairan.net/posts/2010-10-06-walk-in-night/</link>
      <pubDate>Wed, 06 Oct 2010 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2010-10-06-walk-in-night/</guid>
      <description>日复一日，周复一周，月复一月的走上下班的路。在非上下班时间那条路又是什么样子的？这个夜晚，我走在上下班的路上，欣赏着这条日日相见的马路。
晚上9点，我坐上了每天上班的178路公交，9点11分汽车开动直达龙华车站。其实上班的时候我是在终点站的前一站下车的，这次把上下班的路延长，沿着178路大站车的路线夜爆。9点50分从龙华车站开始步行到徐家汇，那里是我这次夜爆的起点。
 
假日里，此时徐家汇的人头依然很多。

走在天钥桥路上，被一位MM以俯视的姿态搭讪问路，我表示压力很大。
过了体育馆，补充了一些事物和水，继续上路。一路上哼着小曲，脑袋轻松了许多。不知不觉地就走到了上班的地方。

离开的公司所在地，终于近距离的看到每天经过的那个雕塑厂，很多的雕塑放在门口。

市区渐渐远去，在出市区的一路上到处飘荡着孤魂，三三两两，无所事事。

植物园，很多人的结婚记忆都在这里。

正式的提示你正在往化工厂的方向。

已经午夜，脚力有些不支，体力虽然还可对付，却难以阻挡瞌睡虫来袭。趁着夜宵车的点，在夜爆的半路我坐车回来了，虽然已是12点半，夜宵车上挤满了从市中心回家的人。</description>
    </item>
    
    <item>
      <title>读Facebook</title>
      <link>https://tairan.net/posts/2010-09-18-note-of-the-facebook/</link>
      <pubDate>Sat, 18 Sep 2010 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2010-09-18-note-of-the-facebook/</guid>
      <description>时机到了。
我经常去怀疑那些企业成长的神话故事，难道他们真的是一夜长大的吗？《Facebook》用翔实的采访加上作者的精彩演绎，给我们讲解了Facebook是如何爆炸式的成长的。一开始看这本书的时候有一些不适应，因为用中文来翻译老外写的书总感觉词汇的使用是那么的别扭。好在Facebook的精彩故事让我忽略了本书的措辞。尽管本书的作者一开始在前言就告诉我们说，这本书的写作并没有的到马克本人的任何交流，但马克身边的人们也足以让我们来描绘出马克的大致轮廓。
马克，作为Facebook的主要缔造者, 他在高中阶段就被传言曾拒绝微软百万年薪的邀请，初入哈佛就撰写了好友课程配对系统，受到了不错的欢迎。在开发Facebook之前马克写了若干个爬虫，分别从哈佛大学各个宿舍楼的学生信息系统中爬取了大量学生信息，并搞了一个“辣妹排行榜”(Facemash)程序中在学校里广为传播(有很多负面消息)。这些足以证明马克是一个不错的程序员，一个不错的Geek，这些正是开发Facebook最基本的技术保障。
爱德华多，Facebook最初的推动者。作为马克在哈佛不多的朋友当中，他的经济头脑让他有了一些资金，而这些正是Facebook最初的支撑。没有这些资金，即使在初期，马克的学费绝对无法满足Facebook快速增长的胃口。并且有了这些资金，才有可能让马克一开始就专注程序的开发。
肖恩，也许中国人对他很陌生，至少我以前没有听说过他，但是他在美国可是个神话级人物。在加入Facebook之前，他缔造了两个互联网重量级产品。虽然最终他被资本家赶出了自己创立的公司，但是他的经验是Facebook助推器，有着火箭加速的助推力。在肖恩的引荐下，Facebook获得了Paypal创始人的投资，并让马克结识了互联网界的巨鳄们，这些将Facebook引入了一个可以快速膨胀的轨道。
Facebook诞生之前已经有了不少的交友网站，正是这些已经存在的不温不火的交友网站给马克提供了借鉴，避免重复他们的错误的经验，并从他们那里看到了他们缺少的东西。Facemash的火爆证明了马克自己的设想，而孪生兄弟的一次程序开发的相约让马克开动了编写Facebook代码的机器。
Facebook的成长没有什么神话，是一个个的环节组成的，这些环节都紧密的链接在一起，缺少任何一个都无法促成今天的Facebook。马克在哈佛结识了爱德华多，创立了Facebook，而Facebook初期的成功吸引了肖恩的加入，在肖恩的指引下，Facebook登上了火箭发射架并真正的起飞了。
Facebook的成功是一个团队的成功，并不是马克一个人的。即使作为Geek的马克的技术再牛B，没有这些战友的帮助也无法让Facebook攀上今天的高度。也许这是从后往前看，好似每个点都恰如其分的发生在那里。我相信在事情正在发生的时候，他们都努力在自己的岗位上做着自己认为最好的事情，当时机来到，一切准备就绪开始起飞。</description>
    </item>
    
    <item>
      <title>面试总结兼谈外包公司</title>
      <link>https://tairan.net/posts/2010-08-29-find-the-job/</link>
      <pubDate>Sun, 29 Aug 2010 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2010-08-29-find-the-job/</guid>
      <description>终于又上班了，这是虎年以来第一次上班。在正式确定上班之前在上海待了近一个半月，加上之前南通尝试的几次面试，这次面试的周期有两个月。在这两个月的时间内约平均一周2次面试，从时间上讲还是算密集。正所谓在家靠父母，出门靠朋友，如此之多的面试机会大部分是朋友介绍的HR，少数是在51job上投简历获得的。
现在已经上班，之前的面试经历需要总结，给自己和大家一个交代，同时也给其他找工作的人一点参考。
面试公司的类别 因为我前一份工作的关系，这次面试的大部分是外包公司，外包公司又以微软外包为主，其中有一家是承包国内电信类型的项目。另外的是一些是电子商务类型的公司。
外包公司看上去规模都不小，有的还有自己的办公楼，而电子商务类型的公司责依附在其他传统行业上，软件开发只是他们的一个部门，团队比较小。10人左右。
面试的内容 国内外包公司喜欢让你动手，管他三七二十一看你能不能干活是第一，不管什么手段，整出来就行，至于代码质量，他们除了在乎SQL外，其他的能用就行。我在半年没有摸微软系的代码的条件下去面试，竟然做不出什么东西，活生生的被鄙视。
在微软外包公司的面试的模式就是英语+算法。 英语，这是基本的沟通技能，有些团队跟老外联系紧密，需要口语，而另一些则主要通过邮件联系。无论如何英语是必备的，至少能看，能写邮件。
算法，原来我认为只要能解决问题就行，经过这次的面试，我觉得算法还是很重要的，重要的不是会背那几个固定的算法，而是在你写代码解决问题的时候需要尽可能的少写代码，尽可能的少占用程序运行的时间和空间。当然，如果你一直写Hello World是可以不用在乎算法。
在算法方面有几个几种常见的面试题： 1. 以单词为单位反转字符串，如&amp;rdquo;I am Daniel Wang!&amp;rdquo; =&amp;gt; &amp;ldquo;!Wang Daniel am I&amp;rdquo; 2. 从字符串转换成数字， 如&amp;rdquo;123&amp;rdquo; =&amp;gt; 123 3. 剔除有序数组中重复的值。如[1, 2, 2, 3, 4, 4, 4, 5] =&amp;gt; [1, 2, 3, 4, 5]
为什么选择外包公司 外包公司是邪恶的，对于需要成长的程序员来说更甚。不明白的可以参考一下别人的看法 去大公司还是去小公司工作？ 如何规划你的职业发展道路去跨国公司还是去创业公司？
为什么这次我还是主动的选择了外包公司？我很缺钱，我需要一个稳定的，不会占用我的业余时间的工作。这样的状况我需要维持2-3年，视具体情况而定吧。
而外包公司能提供： 在相同职位外包公司的待遇要略高于非外包公司，大约在1k-2k+的差别。 外包公司所从事的工作内容技术含量较低，但是做事流程很专业。 外包公司规模也不小，不差钱，在里面只要稍微努力就会获得不错的待遇。参考 别为大公司拼命
总之，一朝进入外包的门，要十二分的努力才出的去！
PS: 原本想深刻的吐一些口水出来，但是有些东西(自己的)不方便公开，加上自己又犯懒了，写了个流水账。文章里提到的链接应该可以让看官明白外包公司是邪恶的，如果还不明白，欢迎来信。</description>
    </item>
    
    <item>
      <title>夜袭上海</title>
      <link>https://tairan.net/posts/2010-07-26-go-to-shanghai-by-bike/</link>
      <pubDate>Mon, 26 Jul 2010 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2010-07-26-go-to-shanghai-by-bike/</guid>
      <description>有一个不算老的年轻人，他有一个很爱他的老婆，还有一个很可爱的女儿，通常有这样身份的人都很安稳，都在努力的工作，用辛苦工作赚来的钱来换一些闲暇时间陪伴家人。而我们这位年轻人的心里却不那么的安份，他总想以自己的方式来体验这个世界。他特别喜欢看有关英雄，独行侠的故事。两年前他喜欢上了骑自行车旅行，吹着风，看着路两旁的风景，享受着运动的乐趣。
这一次是这位年轻人的初次长途旅行的尝试，他的计划是傍晚出发，骑行一夜，150公里的路程，大约早上可以到上海的住处。
在这次旅行之前，他已经计划了很多次不同目的地的旅行，但是时间并没有给他机会，这次他终于抓住了机会。外面有风，是外围台风的影响，在他看来这点风还不足以让轮渡封航，他的老婆很心疼地挽留他，可他还是坚持上路了。
我们的年轻人，有很多装备都是在为这一刻而准备的，配有运动绑带的MP3，车载手电筒，驼包，还有朋友赠送的那辆心爱的捷安特。这些装备很长时间都是静静地躺在储物柜中，但是我们的年轻人始终坚信会用到。

出发了，我们的年轻人听着MP3，开心的上路了。此时是下午6：30分。刚开始的一段路已经走了很多次，在路上虽然和原计划的路线有点偏差，但是这条路足够的熟悉，丝毫不影响什么。当到了s338公路的时候，征程才刚刚开始。这一次他要走和往常去南通相反的方向，朝着海门前进。

一路向东，他在留意需要转向的路口，耳边的风声盖过了MP3中的音乐，天色渐渐的暗了下来，他带着的眼镜却让夜色显得有些明亮。天气不错，天上飘着云，有点风，温度是他喜欢的那种，受夏日台风外围影响后的上海的感觉。月亮也开始升起，很明亮，看着月亮，他知道没几天就是月半了。
这次上路，年轻人并没有准备详细的地图，只是在一张A4的纸上记下从Google地图上查找的需要转弯的路口，他很自信自己的方位辨别能力，可经验告诉他如此简单的记录也会出错的，他将自己无法链接GPRS的手机在临行前使用wifi将路线缓存了一下，这样的准备他认为还算很充足。
在骑行了很久还没看到转弯的方向时，他停了下来。直觉告诉他，路口就在附近，这时手机上的路线缓存用上了，果然路口就在附近，他刚走过。他再一次的暗爽，运气真好。掉头来到路口，这是一条小路，没有路名，没有路灯。他找了一个人打听一下，可那个人是外地人，也不清楚，只好去问路口卖熟菜的摊贩，摊贩告诉他这的确是海太汽渡的路，最近在修路，推荐他走另一条。很大，很好走的一条路，摊贩说，你一直向前，第一个路口右转就行，大约8公里。年轻人，心里掂量了下，按照摊贩所说的方向继续上路了。

吹着风，年轻人很快的到达了转弯的地方。这真的是一条大路，是到海门市的主要通道，转弯处有很多商店，很是热闹。年轻人想去买一瓶盐汽水，这是他在旅行中最爱的一种饮料，味道不错而且还可以补充盐分。可这次他失望了，来之前去超市采购时没有买到盐汽水，这次依然没有找到。年轻人摸了摸口袋，然后拿了一罐可口可乐出来了。来到自行车旁，发现车载手电是爆闪的状态，随手关掉了。年轻人打开可口可乐，骑上自行车又上路了。
这是一条向南的路，过往的车辆不算多，路况也不错，还有一路的路灯。年轻人手中的可乐喝完了，随手捏扁扔到了路边草丛中，在扔可乐罐的一瞬间他感觉到了一种轻松，并不强烈，但是他知道这是轻松的感觉。
夜晚的路上不时有附近的居民出来散步，年轻人像一阵风一样从他们身边飘过。这条路很长，一路上都有路灯，他感慨，现在的生活都那么的富裕，想当初年轻人老家的小镇上安装的路灯到9点以后就会关闭，按照当时的说法是政府无力开支。
年轻人欣赏着路两旁的风光，也在密切的留意一切指示路牌。当看到海门市的界牌时，他笑了，这么快就到了海门。继续前行，进入海门市，路旁他看到了去海太汽渡的指示。当他没有选择那条可以直达海太汽渡的小路时，也就意味着他到了这里要折回再走8公里，路有很多，难走的路近，好走的路远，代价差不多。

海太汽渡就在前面，年轻人开始感觉有点累了，转了几个弯，还是没有看到海太汽渡的影子，不过他从风中已经闻到了长江的味道。此时已经将近10点，他出发的时候告诉老婆自己会在老婆睡觉前到海太汽渡，为了让老婆放心他拿起了电话。电话中，他告诉老婆，他闻到了江风，汽渡就在前面，让老婆休息去。可他老婆却很是思念，说到了给她发短信。通话完毕，他继续上路。

人在付出很多体力的时候，胃口会出奇的好，年轻人出发前吃过了晚饭，可是很快就饿了。三下五除二解决了一瓶矿泉水和一根火腿肠后一鼓作气来到了海太汽渡。年轻人开心极了，可是当车子来到渡口值班室，他发现有些不对劲。上前讯问后，才知真的封航了，而且还被告知开航时间未知，让他明早再来。“明早再来？”年轻人不甘心，既然都已经在路上了，怎么能再回头呢？ 跟老婆报告后，他还是决定在这里等候。为了掩饰心中的不甘，他将这个消息告诉他的那个整天吵着要嫁人的小徒弟。小徒弟天真的让我去找个如家待着，唉，这前不着村后不着店的地方。
轮渡值班的哥们看我在外面徘徊，上前说，你是要等咯？你可以来值班室坐坐。年轻人心里庆幸，还是好人多。进入值班室，跟值班的哥们聊了起来。说对岸风大，封航了。一般8级以上的风才会封航。那哥们还说，你运气不好，如果早来半个钟头有个想过江的车刚才载了个摩托从苏通大桥走了。年轻人听了这话虽然有些不快，但是还是很乐观的期待能快些通航。
夜，风大了起来，江水开始涨潮，很快就淹没岸边的宣传标语。周围没人，年轻人跑到江边撒了泡尿。漫漫长夜不能就这样干等着，年轻人想到了随身带来的书。年轻人总喜欢带书在身边，而且不止一本。他很渴望看书，可是真正看的却不多，他总是担心当想看书的时候手边没有书，于是他有点强迫症。手边没有几本书，他会觉得不安。这次他看的是《微软的秘密》。
年轻人曾经很幸运的混进微软外围，并在里面工作了两年，他看着书，不断的和自己经历过的微软印证着。他一边看一边感叹微软当初的好时机，以及怪兽一样的微软是如此强大。微软在PC软件领域开创了自己的时代，定制了微软标准，可最近在网络时代，微软却有力使不上。
书的内容很精彩，但是没有挡住瞌睡虫的侵扰，3点多了，年轻人睡着了，在睡着的时候他能感觉到自己睡的很香，而且还打着很响的呼噜。睡时间不长，汽笛声吵醒了他和另外的一个半夜换班后的中年值班员。他们循着汽笛出去，中年值班员告诉他，这是去崇明的船，去太仓的还不确定。年轻人很沮丧地回到了值班室。没多久汽笛声又再度想起，哈哈，要准备过江了。
在船靠岸的间隙，中年值班员看到前面有个骑电瓶车的人，将她叫来问，买票了么？电瓶车说，多少？ 15块，转头又来问年轻人，买票没？年轻人随中年值班员进入值班室，小声的说，玻璃上贴的公告，散客5块。中年值班员说，你还有自行车，10块。年轻人对这种事情已经习惯了，于是讨价还价后5元买了票上船去。

在船上，年轻人看到电瓶车也上来了。船开了以后，年轻人上去和电瓶车搭讪，原来电瓶车也是要去上海，而且从一个比年轻人还远20多公里的地方过来的。年轻人在心里又开始寻找自己的理论，男人年轻时容易冲动，女人则在不年轻的时候冲动。
刚上船的时候天还是黑的，远处苏通大桥闪着灯光。没多会，天开始亮了，风浪不时将船左右的摇晃着，年轻人看着旁边的货车，总担心它要倒下来压到他，他开始打量着坐着的楼梯，掂量着万一危险就往上爬。虽然惊险，货车始终还是没有倒。

在轮渡上，年轻人对自己的感觉发生了疑问，为什么苏通大桥看到了三次，每次角度都不一样。他甚至想到了鬼打墙，好在最后一次看到的时候也发现船要靠岸了。船靠岸后，电瓶车没有按照约定在岸上等待，直接走了。年轻人上前追了过去，因为电瓶车告诉他，自己从来没有走过这条路，也不知道该怎么走。年轻人追到电瓶车后，问她怎么打算的，她看出年轻人嫌电瓶车慢，说，你在前面走，她尽量跟上。
年轻人以为电瓶车速度应该还可以，就放开使劲的踩，没多会就看不到电瓶车了。在一个路口，年轻人有些不放心，停下来喝点水，等了等电瓶车。电瓶车来了以后，年轻人告诉她，这条路直走然后左转就是去上海的一条直路。其实电子地图告诉年轻人这段路有几个地方需要转弯，可以节约一些路程，年轻人知道自己一时给电瓶车讲不明白，就告诉了她这条简单的路。
早上5点多，太阳已经开始升起，很明亮的天。路上到上海60公里的标示，让年轻人相信再过2个多小时应该就可以到上海洗个澡睡上一觉。却不知，这才是煎熬的开始。

上半夜连续的狂奔，加上一宿没睡，年轻人的体力已经无法连续的快速骑行。路上遇到几座原来从不放在眼中的桥，年轻人却无力上去，只好下来推着走，这样还能缓解一下一直骑行的双腿。年轻人已经没有力气去注意时间，只觉得太阳越来越热，偶尔飘过的云遮住太阳的光芒都让年轻觉得好清凉。在走小路的时候，年轻人总是故意找一些阴凉的地方，而且年轻人开始幻想，不时的向路边有水的地方望去，总希望可以有个地方可以洗一洗。如果在多年以前，年轻人随时可以到水里，现在能轻易靠近的河边，水上都泛着油花。这就是我们的现代化。

饥饿，炙热的阳光如影随形，年轻人好不容易找到路边一处阴凉地，补充了一下，也许有一分钟，一瓶水和半袋饼干被消灭了。年轻人不敢多停留，多停留一分钟就要承受更毒辣的太阳炙烤一分钟。

界牌，是年轻人最爱看到的。[江苏-上海]，年轻人已经没有多少力气，只在心里大喊，“上海，我来了”。望着上海的收费站，年轻人拍了张照片，沿着自行车道继续前进。通过卡口时，保障世博会安全的警察、武警并不去检查非机动车辆，年轻人还在盘算着怎么应付检查的空隙，就已经进入沪太路了。

按照原计划，年轻人并没有在曾经坐大巴经过许多次的沪太路上停留多久就转入到旁边的蕰川路上去。来到上海，一切都不一样了，平坦的路面，详细的标志，这就是有钱的上海。在蕰川路上，年轻人看到了只有上海郊区才能看到的湛蓝的天空，朵朵白云，飘在天上。

年轻人以为沪太路很长，原来蕰川路也不短。太阳开始发威了，年轻人已经没有快速前进的力气，原来以为不远的距离，却走了很长时间。从蕰川路转到江杨北路后，年轻人记录的地图路线结束了，此时手机上的地图也不给力，因为连不上GPRS，Google地图需要打开两次才能让GPS正常工作。到了这里，Google给的路线显得一点也不经济，按照地图上，我需要到复旦那边然后过江去浦东。于是年轻人开始和自己的大后方沟通，老婆帮他查最佳路线，此时老婆在家里要照顾床上的老妈子，又要耐心的给老公查地图。本来查地图就不是女人的强项，在电话那头，老婆开始不耐烦起来。我们的年轻人，虽然很体谅她，可心里却嘀咕，她什么时候能心平气和的和在外面的老公说话？难道就不担心老公被太阳强暴后从自行车上摔下从此不起？埋怨只是暂时的，路还要继续。
年轻人再一次凭着直觉相信，吴淞渡口就是他过江的地方。在询问了一对老夫妇后，也不顾答案并不十分确定，头也不回的前进了。路上他注意到一辆公路，有时在后，有时在前，在等红灯的时候年轻人和公路搭上话。公路也不知道吴淞渡口是否能到浦东。已经在路上的年轻人，还是选择了继续前进。
在A20底下的泰和路上，一路到底就来到吴淞渡口，年轻人在这里终于补充到一瓶盐汽水，虽然不是他喜欢的延中牌，可这是凉的。在渡口年轻人再次向工作人员确定这是去浦东的轮渡时，被工作人员仔细的检查一遍。这是来上海一路上接受的唯一一次检查。世博，上海的安全检查多了很多。可这真的有用吗？最多也就是威慑作用，顺带多花一些经费改良和增加装备。
浦东，我来了，年轻人感觉胜利在望。在渡船上年轻人给自己换了块黑色的镜片，原来黄色的镜片在白天太耀眼。顺便擦了擦脸上和脖子上的盐粒。
下了渡船，年轻人找不到路，不知道该如何走。他开始留意路边，他觉得上海会有很多地方卖地图，一般卖报纸的地方就有。路两旁飘来鸡肉的香味，让年轻越发的感到饥饿。年轻人不敢停留，因为这一停留不知道何时才能到达。出了渡口没多远，年轻人就看到卖报纸的地方，而且的确有地图卖。买到地图，跟地图老板一起研究了路线，然后又上路了。就在看地图的那一会功夫，自行车座子已经滚烫了。
买地图的这一条路叫江东路，一直走到浦东北路，然后再到五洲大道，转弯直走，东靖路就不远了。
江东路不宽，过往的大卡车很多。路两旁开着很多店。在靠近江城路的一段，不少的工厂在路旁，有的地方还在修路。因为在轮渡上的少许休息，年轻人的体力好了不少，这段路走的很快。过了江城路，年轻人开始凭着路牌骑行，在上海只要看路牌就不会迷路，如果走过就更快。在这一段，绕来绕去，年轻人来到了杨高北路，看到了外高桥保税区。在路旁还看到高耸的麦当劳广告牌。
外高桥南地铁站，让年轻人很兴奋，因为下面不远处他看到了平时经常坐的181路公交车的站牌，他开始数到家还有几站路。3站，是的还有3站路就到了。年轻人现在已经没有多少力气了，自行车的速度只能是平时散步时的那样。不过年轻人的意志力还是很强大的，在如此炙热太阳下，饥饿，口渴都没有让他中暑。看到上坡时，再一次的发起了冲锋。多年前，年轻人就养成了一种习惯，不管是跑步还是骑车，在最后阶段他总能凭着毅力向前冲刺。
2站，1站，终点就在眼前。年轻人好饿，心里在盘算，是先到家洗澡，歇息后再出来，还是弄点吃的打包带回去？当到了平时坐车的地方，年轻人再按不住饥饿去买吃的去了。3个汉堡，3个肉串，一份凉皮。汉堡和肉串是现做的，几分钟的光景让年轻人感觉如此的漫长。
拿上吃的，年轻人终于回到了在浦东的住处。三下五除二推掉身上的衣服后奔向浴室。
中午12点，结束了，年轻人的第一次长途骑行就这样结束了。和计划偏差了很长时间，也多骑了几十公里，可我们的年轻人还是成功了。
ps: 老婆还是一个好编辑</description>
    </item>
    
    <item>
      <title>我学习Kohana的方法</title>
      <link>https://tairan.net/posts/2010-06-23-my-way-for-learning-kohana/</link>
      <pubDate>Wed, 23 Jun 2010 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2010-06-23-my-way-for-learning-kohana/</guid>
      <description>Kohana 是一个PHP的开放框架，所以在学习之前需要深入了解PHP。另外Kohana也是一个遵循MVC模式的开发框架，同样在学习之前还需要深入了解什么是MVC，最好动手写过MVC模式的页面，一个练习也行。
接下来我们从那里开始呢？
在动手练习之前，需要阅读文档。先哲说：闲时读手册，忙时问Google。刚开始我们有充裕的时间，那么开始阅读文档吧。
作为入门，属于Getting Started的文档需要优先阅读。通过阅读What is Kohana?，来了解下Kohana都有哪些东西。而 Model View Controller则告诉你Kohana使用了一种改良型的MVC模式。接下来 Cascading Filesystem 告诉你这个改良型的MVC模式是怎么工作的。最后通过阅读Request Flow来了解从浏览器发出请求后Kohana在服务器端是怎么处理的。okay，通过阅读以上的文档就入门了。
阳明先生说，知是行之始，行是知之果，知行功夫不可离。意思是光看文档并不代表你知道，需要动手操练一番才算真知道。
Kohana安装还是很容易的，将整个工程放到web服务器上就可以工作了。如果遇到问题跑不起来怎么办？Fix it! 安迪教授也说了，当你在工作过程中没有得到想要的东西时你就获得了经验。
程序员动手的第一招是&amp;rdquo;Hello World&amp;rdquo;，Kohana已经提供了这一招，所以通过阅读源码来学习这一招是如何发出的，因为Kohana是改良的MVC(也就是HMVC)，那么需要多注意项目的目录结构，看看这些源文件是以什么样的方式组织的。在观摩Kohana提供的入门招数后，让我们来破解这个招式。尝试着修改文件名，类名，以及改变文件目录位置等来验证这一招在什么情况下会失效，这对你加深理解有帮助。
入门招数，学了也拆了，开始模拟演练吧。
新手入门第一课，留言板。很多前辈都推荐新手来实现一个留言板用以学习新的开发环境。动手之前，我们要有个蓝图，不用大，将期望了解的知识点囊括进去即可。web开发的知识点通常有，Session,Cookie的管理，数据库的操作，URL的管理，Ajax，表单验证，异常处理等。限定已经有了，那么就开始来实现留言板吧。
演练开始我们就忙了起来，这时Google就发挥作用了，遇到疑难杂症问Google。作为修炼内力，阅读API加深理解各个类是如何工作。
最后，先哲也说了，尽信书不如无书。文档也有bug，当实际操作和文档描述的行为不相符的时候，那么我们就要玩外科手术了。这就是开源的好处，有bug直接解剖，肚皮划开后一目了然！</description>
    </item>
    
    <item>
      <title>快速建立HTTP Server共享文件</title>
      <link>https://tairan.net/posts/2010-05-28-shared-by-simplehttpserver/</link>
      <pubDate>Fri, 28 May 2010 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2010-05-28-shared-by-simplehttpserver/</guid>
      <description>Python内置了一个简单的Web服务器可以用来建立一个HTTP Server来共享某个目录下的文件，尤其是在Unix-Like+windows的混合网络中更是方便快捷。
Server 假设 IP 为 192.168.1.1
首先进入到需要共享的目录，如 cd ~/share/ 
python -m SimpleHTTPServer 8000 #Python 2.6  OR python -m http.server 8000 #Python 3.0  Client 访问http://192.168.1.1:8000就可以看到Server共享出来的文件了。</description>
    </item>
    
    <item>
      <title>如何识别手机浏览器信息</title>
      <link>https://tairan.net/posts/2010-04-16-how-to-identify-mobile-browser/</link>
      <pubDate>Fri, 16 Apr 2010 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2010-04-16-how-to-identify-mobile-browser/</guid>
      <description>想作一个网站，根据不同的访问者提供不同的显示模板，如适合手机的模板，适合PC浏览器的模板。
从哪里识别访问者的信息，以及如何识别呢？
依据 HTTP 协议，客户端浏览网页的时候会提供一些信息给服务器端。下面是PC浏览器访问时的 $_SERVER 的 dump 信息。 (array) Array ( [ALL_HTTP] =&amp;gt; HTTP_CACHE_CONTROL:max-age=0 HTTP_CONNECTION:keep-alive HTTP_CONTENT_LENGTH:0 HTTP_ACCEPT:application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,/;q=0.5 HTTP_ACCEPT_CHARSET:ISO-8859-1,utf-8;q=0.7,*;q=0.3 HTTP_ACCEPT_ENCODING:gzip,deflate,sdch HTTP_ACCEPT_LANGUAGE:en-US,en;q=0.8 HTTP_COOKIE:__utmz=259664206.1262318873.1.1.utmcsr=google|utmccn=(organic)|utmcmd=organic|utmctr=51xna; __utma=259664206.724256099.1262318873.1262318873.1262318873.1 HTTP_HOST:www.51xna.com HTTP_USER_AGENT:Mozilla/5.0 (X11; U; Linux i686; en-US) AppleWebKit/533.2 (KHTML, like Gecko) Chrome/5.0.342.9 Safari/533.2
[HTTPS] =&amp;gt; off [SCRIPT_NAME] =&amp;gt; /private/Kohana/index.php [HTTP_COOKIE] =&amp;gt; __utmz=259664206.1262318873.1.1.utmcsr=google|utmccn=(organic)|utmcmd=organic|utmctr=51xna; __utma=259664206.724256099.1262318873.1262318873.1262318873.1 [AUTH_PASSWORD] =&amp;gt; [AUTH_TYPE] =&amp;gt; [AUTH_USER] =&amp;gt; [CONTENT_LENGTH] =&amp;gt; 0 [CONTENT_TYPE] =&amp;gt; [PATH_TRANSLATED] =&amp;gt; g:\wwwroot\51xna.com\wwwroot\mobile\index [QUERY_STRING] =&amp;gt; [REMOTE_ADDR] =&amp;gt; 221.227.130.23 [REMOTE_HOST] =&amp;gt; 221.227.130.23 [REMOTE_USER] =&amp;gt; [REQUEST_METHOD] =&amp;gt; GET [SERVER_NAME] =&amp;gt; www.</description>
    </item>
    
    <item>
      <title>基于(LFS)构建一个属于自己的Linux(一)</title>
      <link>https://tairan.net/posts/2010-02-22-building-the-linux-for-myself/</link>
      <pubDate>Mon, 22 Feb 2010 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2010-02-22-building-the-linux-for-myself/</guid>
      <description>想挑战LFS很久了，终于从今天开始动工制作了。以前虽然没有动手开始创建LFS，但是也积累了不少的相关信息，一切都还算顺利。
今天是第一天，主要的工作是编译工具链和一些系统工具为Building the LFS System作准备。
准备HOST(宿主)系统，没有使用LFS-LiveCD, 而是在虚拟机中安装LinuxMint(没有特殊的含义)，在开始之前需要在LinuxMint中安装编译LFS的相关工具。
sudo apt-get install build-essential bison  LFS 的版本为 6.5
LFS 提供了一个文件, 其中包含了构建LFS所有用到的源码下载链接 LFS-BOOK-6.5-wget-list
可以使用wget下载这些源码 wget -c -t 2 -i LFS-BOOK-6.5-wget-list -o down.log 
需要注意的是，Perl-5.10.0 的路径已经被移除，取而代之的是Perl-5.10.1。采用了新的版本Perl后，原来针对5.10.0的patch就不用了。
依照LFS-BOOK的指示，编译起来还是很顺利的。如果英文不好可以对照着金步国翻译的中文版的LFS-BOOK-6.2
通常编译的步骤如下，先解压源码包，如果有patch则应用patch
patch -Np1 -i path_of_the_patch  之后就是念咒语
./configure --prefix=/tools #需要根据文档指示 make make install  具体的编译还是应该参照文档，除非你运气真的很背，否则都会通过的。
编译是一件苦力活，根据机器的性能，也许会耗费你一天甚至更长的时间。其实也有自动化的操作，但是动手敲上一段咒语还是有很多额外的收获。
到此，编译了N个程序后准备工作就告一段落了，编译的这些程序是新世界的基础，很重要、也很费时！ 接下来进入 Building the LFS System</description>
    </item>
    
    <item>
      <title>天才，榜样</title>
      <link>https://tairan.net/posts/2010-02-20-genius-is-example/</link>
      <pubDate>Sat, 20 Feb 2010 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2010-02-20-genius-is-example/</guid>
      <description>每次看到这些大牛们的事迹，心难免都要加速跳动。爱迪生说没有那1%的灵感即使是99%的汗水也不一定能成功，可是付出那99%的汗水也是必要的，不然1%的灵感也只是耍耍小聪明而已！
相信Fabrice Bellard也一定是在不断的挥洒着汗水来实现那1%的灵感。
 计算的威力，智慧的传奇 —— Fabrice Bellard 作者：吕娜 这个世界从来不缺天才，只缺乏利用天分坚持理想和信念不断创新的人，这些人用恒心和努力缔造一个又一个传奇。法国人Fabrice Bellard 就是这样一个了不起的程序员。 Fabrice Bellard1972年生于法国，曾就读于巴黎高等综合理工学院和法国电信研究院。对计算机有着浓厚兴趣的他，高中时就崭露头角，编写出了LZEXE，这是DOS上第一个广泛使用的文件压缩程序。 Fabrice Bellard是一位计算机奇才，在业界有着重要的影响。1996年他编写了一个简洁但是完整的C编译器和一个Java虚拟机Harissa。Fabrice Bellard发明的TinyCC是GNU/Linux环境下最小的ANSI C语言编译器，是目前号称编译速度最快的C编译器。Fabrice Bellard杰作众多且涉及广泛，1998年编写了一个简洁的OpenGL实现TinyGL，2003年开发了Emacs克隆QEmacs，2005年还设计了一个廉价的数字电视系统。 Fabrice Bellard的一个重要杰作是在Linux内核上写了一个CPU模拟器QEMU，这套开放源码的模拟器软件与Bochs、PearPC近似，但具有后两者所不具备的高速度及跨平台等特性。QEMU可以在不同的机器上运行独自开发的操作系统与软件，经由KQEMU这个开源的加速器，能模拟至接近真实电脑的速度。QEMU构思巧妙， 效率极高， 在借助核心态的KQEMU加速器之后，模拟代码的执行速度甚至能够接近真实机器。QEMU已成为目前使用最广泛的模拟器，KVM和Google Android的模拟器都是基于QEMU的。 Fabrice Bellard 可谓博学多才，他另外一个重量级项目是FFmpeg。FFmpeg 单词中的FF 指的是Fast Forward，FFmpeg这个2000年发起著名的开源多媒体播放器项目， 是MPlayer的姊妹项目。这是一个如此重要的成就，没有这个项目，就没有我们今天广为使用的暴风影音等播放器。这个多平台、多功能的多媒体编码解码器由Fabrice Bellard发起并管理，现在是由Michael Niedermayer在进行维护。 天才的创新经常是离经叛道式的超越，Fabriced Bellard的一些项目让人感觉疯狂。比如他曾有一个项目是将带有VGA显卡的PC改装成DVB-T的信号发射器。这样一来，为了防止泄密，公司不仅要封声卡插口，还要焊上显卡插口。 Fabrice Bellard在圆周率算法方面也有着惊人的成就，1997年FabriceBellard提出最快圆周率算法公式。在计算圆周率的过程中，Fabrice Bellard使用改良后的查德诺夫斯基方程算法来进行圆周率的计算，并使用贝利-波温-劳夫算法来验证计算的结果。为了纪念他对圆周率算法所作出的杰出贡献，Fabrice Bellard所使用的改良型算法被命名为Fabrice Bellard算法，这种算法是目前所有圆周率算法中最快的一种，这个计算N位PI的公式比传统的BBQ算法要快47%。 2009年的最后一天，Fabrice Bellard宣布另一重大突破：他用桌面电脑打破了由超级计算机保持的圆周率运算记录。这是一个壮举， 他将PI计算到了小数点后2.7万亿位！更令人惊讶的是， 他使用的不过是价格不到2000欧元的个人PC，仅用了116天，就计算出了PI的小数点后第2.7万亿位，超过了由目前排名世界第47位的T2K Open超级计算机于2009年8月17日创造的世界纪录。新纪录比原纪录多出1200亿位，然而，他使用的这台桌面电脑的配置仅为：2.93GHz Core i7 CPU，6GB内存，7.5TB硬盘! 不过这次为了加快计算完成的速度保住排名第一的位置，Fabrice Bellard使用了9台联网的电脑来对数据进行验证， 若使用一台电脑来验证计算结果的话， 则需要额外增加13天的计算时间。 Fabrice Bellard在圆周率方面的辉煌成就， 使他创造多次圆周率单一位计算的世界纪录（计算10的整次幂位） ， 也曾因此而登上《科学美国人》法文版。 （本文来自《程序员》杂志2010年2月刊） </description>
    </item>
    
    <item>
      <title>谷歌要退出中国了</title>
      <link>https://tairan.net/posts/2010-01-13-google-considers-leaving-china/</link>
      <pubDate>Wed, 13 Jan 2010 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2010-01-13-google-considers-leaving-china/</guid>
      <description>今天互联网上最热的新闻就是谷歌要退出中国了，对于在中国境内的谷歌用户来说，这个无疑是一个巨大的噩耗。有人因此已经为谷歌准备好了谷歌墓志铭。
我本人是一个谷歌重度用户。 第一个是搜索，这个自不用多说，Google的搜索引擎一直是我忙时的最佳伴侣，它总是能给我我想要搜索的结果； 第二个是Google Docs，受够了隔三差五重装Windows时的备份工作，把自己的文档放在Google Docs上，不但有编辑的历史记录，还很方便跟朋友一起分享、共同编辑文档； 第三个就是Gmail了，Web版本的邮件系统Gmail是我使用最舒服的一个，因为在收发邮件的时候根本感觉不到Gmail的存在，一切都那么的如行云流水一般 ，而且还不在你的邮件中插广告；另外企业级的Gmail也很好用，可以使用自己的域名作为邮箱后缀，虽然别人也提供，但Google还是不错的，至少比Live Domain强！ 第四个是Google Reader，一个Online的RSS订阅工具，我的很多知识都是通过Google Reader去订阅获得的，因为很多有价值的信息都放在博客里，而Google Reader就提供了订阅博客以及搜索其中内容的服务。如Gmail一般的易用，如果显示器大点的话更好用，毕竟订阅的太多啦。:-) 第五个是Google Host，这个呢就是用来放一些自己和朋友随便写写的代码，也挺好用，速度也很快。 第六、七、八 &amp;hellip;&amp;hellip; Google为我带来的太多太多了，继续写下去只是会觉得更伤心
这次Google真的要走了，以后访问Google就变成了非法访问！在这个神奇的国度里，我只能努力学好翻墙术来报效祖国了！</description>
    </item>
    
    <item>
      <title>阿凡达 Avatar</title>
      <link>https://tairan.net/posts/2010-01-05-avatar/</link>
      <pubDate>Tue, 05 Jan 2010 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2010-01-05-avatar/</guid>
      <description>说啥呢？ 其实对于电影本身真的没啥好说的，有条件的去看IMAX+3D，没条件的看普通3D，剩下没条件的去创造条件到电影院看。
不在电影院看《Avatar》就等于没看过！
鼓吹完大家为美帝国贡献GDP之后，来谈谈Avatar背后的故事吧。
作为技术人员，研究一下电影背后的有关技术的话题，还是很有意思的。《Avatar》所带来的震撼是科技的进步！
　为了能百分百的表现潘多拉这个奇绝的梦幻世界，卡梅隆使用了三项突破性技术：虚拟摄像技术、表情抓取，和联合数字立体摄影机（fusion camera system）。 虚拟摄像机技术目前为止还主要用于3D虚拟世界游戏，比如《塞尔达传说》系列游戏，游戏者控制虚拟世界中自己的人工智能体，将人物行为信息实时双向反馈，人物所处的三维立体环境随着其动作位置变化实时发生变化。在《阿凡达》中，演员佩戴无数感应器进行“行动抓取”，电脑对抓取的数据直接进行处理，将其所代表的虚拟人物按预制比例直接显示在监控器上，从而使导演能实时观测虚拟人物与虚拟电子潘多拉世界的交互效果。 表情抓取指抓取演员表情的电脑图形技术。卡梅隆在洛杉矶的Playa Vista建立了一个比一般表演抓取工作室大5倍的专门舞台（the volume），安装了120个固定摄像头，全角度抓取演员表演的全部信息；扮演Na&#39;vi人的演员同时佩戴一个特制的帽子，由一部微型摄像机详细记录其在表演中面部表情的一切变化。卡梅隆希望借此传输95%的演员表演和面部表情信息到他或她的数码虚拟人物身上。结果便是无比逼真的成像效果，观众完全无法区别真人与虚拟人物的交互。 （http://www.popularmechanics.com/technology/industry/4339457.html） 联合数字立体摄影机则是导演卡梅隆和数字摄像技术创新者，摄像师Vince Page共同开创的3D立体摄像系统。此系统使用两台索尼HDC-F950 高清摄像镜头，如同人的左右眼一样距离大约70毫米同时拍摄，随着人物距离镜头远近的变化自动调整左右两个镜头之间的距离，并将数据传回相应的EVS XT[2]成像处理系统进行合成，制造出最类似人眼的立体景深感受。联合数字立体摄影机如今已被广泛用于了不少3D电影的拍摄，包括卡梅隆自己使用同一技术拍摄的3D纪录片《深海异形》。 （http://video.google.com/videoplay?docid=-241532803911842846#） 没有这三项技术创新就没有那种身临其境的潘多拉星体验，观众就不能切身体会那种神秘、迤逦、瑰奇，不能感受身骑龙鸟翱翔的速度、不能领会漫游夜森林的色彩，不能感知生命之树的呼吸与呢喃。而这一切的感受都是属于影院的，是确保故事逼真情感真切的关键。  作为程序员，当看到 Fenng 的这篇文章 制作《阿凡达》特效的超级计算机时，我的心加速跳动了几下。
是 Linux！ 
HP Cluster Platform 3000BL 集群平台作为其解决方案， 操作系统是 Linux！ 看到了吧，研究和使用Linux是大有前途的，可大(大型集群)、可小(嵌入式)，作为程序员的你，赶紧加入这趟Linux高铁吧！</description>
    </item>
    
    <item>
      <title>国进民退</title>
      <link>https://tairan.net/posts/2009-12-15-guo-jin-min-tui/</link>
      <pubDate>Tue, 15 Dec 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-12-15-guo-jin-min-tui/</guid>
      <description>[这里是一块墓碑，因为这里的一句话，网站被维护了。默哀&amp;hellip;]
最近国内比较热闹的话题是“国进民退”，虽然种种迹象表明国家并没有“国进民退”的指导方针，但并妨碍我们去分析以下这种话题的后面是什么。
对于党和国家，咱无法作任何评论，那来看看我所在的IT行业的相似者。
同样众所周知的是Microsoft是一个桌面操作系统的垄断者。我们将历史的镜头移到Windows早期的时代，那时桌面平台是百花齐放，尤其是开发环境。有《Borland传奇》中提到的C++之战，有John carmark英雄般领导的OpenGL和DirectX的3D图形之战，Sun公司出奇招的Java登录桌面之战。
如今，再来看看Windows这个昔日的战场，凭借微软自身的平台优势，现在只有微软第一，其他的都是微型软件供应商，用Joel的话说就是微软不屑的那些剩下来的软件开发商。
只要你选择了微软的操作系统，那么开发工具是微软的，开发语言是微软的，办公软件是微软的，数据库是微软的，web服务器是微软的，甚至开发方式、思维模式也都是微软的。
即使有一天你在微软的地盘悄悄的成长，一旦被微软看中，对不起，你被吸入微软了。搭上一个垄断者的贼船，后果只有一个，牺牲自己来为这个垄断的机器提供能量！
微软作为垄断者需要不断的吸收更多的能量来维持自身的发展，上了路就由不得自己，即使在互联网时代微软想再续往日的辉煌也无法摆脱垄断者的本性像黑洞般的自我吞噬。
EOF</description>
    </item>
    
    <item>
      <title>理解Drupal模块之Google</title>
      <link>https://tairan.net/posts/2009-12-02-understand-the-google-module-drupal-modules/</link>
      <pubDate>Wed, 02 Dec 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-12-02-understand-the-google-module-drupal-modules/</guid>
      <description>Google 是居家旅行、工作学习必备之搜索引擎，而且Google还可以给我们的网站带来收入。请看我细细道来：
Google的爬虫自不用说，不知道哪天就过来爬了你的网站，可这太依赖于运气，我们需要主动一点，向Google提交我们的网站信息帮助Google更好的索引我们的网站内容(?_? 咋就那么心甘情愿的交给Google呢)。同样Google为了方便我们提交资料，搞了个叫Sitemap的东西作为所有提交资料的规范格式。如此一说，我们对Drupal相关模块需求就了解了，我们需要一个能自动生成网站Sitemap的模块来供Google爬虫享用。
在Drupal模块页搜索&amp;rdquo;sitemap&amp;rdquo;， 首先映入眼帘的就是我们需要的那个啦 :-) 。下载、上传、启用模块不用罗嗦。Drupal Sitemap　模块中有５个功能，其中　Sitemap　是核心功能，必须滴！剩下的在仔细阅读说明后酌情启用！在51xna.com我启用了　XML sitemap engines　和　XML sitemap node　两个功能。这两个功能的用法还是蛮简单的，仔细阅读说明即可。
我们网站的资料都交给Google了，那么怎么知道网站都有哪些人来访问呢？这个问题Google也有解决方案，Google Analytics，顾名思义就是用来分析网站访问者的，如访问者的来源地、使用的浏览器、操作系统、访问页面、停留时间等等。
Drupal也有相关的模块来满足我们的这个需要，再次到Drupal模块页搜索“Analytics”，然后。。。（省略若干苦力活）在设置页面填上Google Analytics的帐号即可，其他的设置仔细阅读说明酌情操作。
最后，我们要从Google那里弄点米米养小站了。题外话，你该不是真的以为Google就是一个搜索引擎吧？其实Google是一广告机器，详细点说Google是一个跟广告有关的赚钱机器。Google Adsense 就是这部机器的关键部件之一。我们在Google Adsense上申请个账户，然后在自己的网站上提供广告位，然后Google利用你提供的广告位放广告，如果有人点击这些广告位上的广告，Google就按照专门的计算方式来给你分成，注意啦，分的是$美元。所以弄个Adsense的模块放在网站上是有必要的。
Drupal那里也有Google Adsense的相关模块（真的是要什么有什么:-)）
Adsense模块的功能还挺多，有7个。AdSense core 这个是核心模块必须启用，Managed ads 管理广告滴，负责显示广告区块的后面详述，其他的功能带 old 的说明是不推荐使用的。
进入到 首页 › 管理 › 站点设置 › AdSense 有一个Publish ID，这是用来输入Google Adsense帐号的，必须滴！现在用 Managed ads 来管理广告啦。在 首页 › 管理 › 站点设置 › AdSense 中设置 Adsense Blocks，这里输入一个正整数，用来表示你准备在页面上放多少个广告位的，先设置一个练练手。这时在 首页 › 管理 › 站点构建 › 区块 中就可以看到一个AdSense: unconfigured 0 的待设置的区块，在配置选项中配置好相应的设置以后，把这个区块放到某个地方，保存收工！</description>
    </item>
    
    <item>
      <title>近距离Drupal概览</title>
      <link>https://tairan.net/posts/2009-11-24-drupal-overview/</link>
      <pubDate>Tue, 24 Nov 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-11-24-drupal-overview/</guid>
      <description>面对国内用户，中文是必须的，因此需要安装中文语言包，目前6.x版本的中文语言包做的不错，下载后直接解压到drupal文件根目录即可。我是在使用drupal安装脚本配置之前就将中文语言包放到drupal所在的文件目录的，这样开始使用drupal安装脚本配置的时候会提示配置中文的。
Drupal 支持主题(Theme)和模块插件(Module)，如此一来给网站换马甲和增加武器装备就变得容易。
如果你浏览了Drupal的主题和模块下载页面，你一定会惊讶主题和模块的种类是如此的多。挑一个喜欢的，实用的下载后分别解压到 drupal/sites/all/{theme,modules}目录下，如果这两个目录没有先创建。把主题和模块放在这里是推荐设置，顾名思义，这是对所有site生效的设置（Drupal支持同一程序下多个站点）。当然如果非要放到Drupal核心模块和主题那里也是可以的，只是不推荐而已。
在确定网站需要的功能后先到module下载页找找，实在没有的话就自己写，如果自己写的还有其他人需要的，再反馈给drupal社区，良性循环！
这是我对Drupal的第一次仔细观察的印象，之前也安装了几次，一直就没仔细瞧过，惭愧。
参考：  Drupal 语言包 Drupal 主题 Drupal 模块  EOF</description>
    </item>
    
    <item>
      <title>Drupal</title>
      <link>https://tairan.net/posts/2009-11-23-setup-drupal/</link>
      <pubDate>Mon, 23 Nov 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-11-23-setup-drupal/</guid>
      <description>Drupal是一个出色的开源CMS系统，Whithouse也在使用。 现在把我今天配置Drupal的时候遇到一些问题以及解决办法记录在此，备查。
软件版本信息 Windows7 IIS7 + FastCGI php-5.3.1-nts-Win32-VC9-x86 drupal-6.14
在PHP官方文档中提供了IIS7如何使用FastCGI配置PHP，需要注意的是当启用php.ini-development作为php.ini配置环境时，在CGI部分默认的是无法工作的，需要做如下修改 cgi.force_redirect = 1 cgi.nph = 0 cgi.fix_pathinfo = 1 fastcgi.impersonate = 0 fastcgi.logging = 1 cgi.rfc2616_headers = 0 
在php.ini文件中需要启用的 extension extension=php_gd2.dll ;用来画图 extension=php_mbstring.dll ;多语言支持 extension=php_mysql.dll ;连接MySQL extension=php_pdo_mysql.dll ;使用PDO的方式连接MySQL，非Drupal必须 extension=php_sqlite3.dll ;连接sqlite3，非Drupal必须 extension=php_xmlrpc.dll ;xmlprc实现接口，非Drupal必须  使用PHP5.3会有遇到 Function ereg() is deprecated Error 在询问了万能的Google后并参考这篇文章Function ereg() is deprecated Error 错误对策，使用文章中提到的最后一种办法来解决这个问题： 在 drupal\includes\file.inc 第 902 行 //elseif ($depth &amp;gt;= $min_depth &amp;amp;&amp;amp; ereg($mask, $file)) { elseif ($depth &amp;gt;= $min_depth &amp;amp;&amp;amp; preg_match(&amp;lsquo;/&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>在linux上使用swap文件</title>
      <link>https://tairan.net/posts/2009-11-22-using-the-swap-file/</link>
      <pubDate>Sun, 22 Nov 2009 00:00:03 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-11-22-using-the-swap-file/</guid>
      <description>作为个人用户，为swap分一个磁盘分区有些浪费，其实我们可以使用swap file来替代swap 分区，而且还可以很方便的调整swap file文件的大小。
 To add a swap file: 1. Determine the size of the new swap file and multiple by 1024 to determine the block size. For example, the block size of a 64 MB swap file is 65536. 2. At a shell prompt as root, type the following command with count being equal to the desired block size: dd if=/dev/zero of=/swapfile bs=1024 count=65536  3. Setup the swap file with the command: mkswap /swapfile  4.</description>
    </item>
    
    <item>
      <title>云存储</title>
      <link>https://tairan.net/posts/2009-11-16-storage-on-cloud/</link>
      <pubDate>Mon, 16 Nov 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-11-16-storage-on-cloud/</guid>
      <description>过上云生活
如今的生活已经很难离开电脑了，上班在用电脑，下了班到家还是在用电脑，有些人的家里有不止一台电脑。如果有一些方便的工具把自己的一些不那么私密，又经常用到的资料，文件等在这些电脑中同步多好。
这里我有两个云存储要推荐给大家，其实我已经用上了。
一个是 Dropbox 选择Dropbox的原因是他已经可以跨平台，尤其是在Linux上表现不俗。而不像半死不活的liveMash那样只为Windows和Mac提供服务。新注册用户有2G的空间，完成指定的操作后，会给你加上250M，如果你还能邀请到其他人使用Dropbox的话，你的空间就可以升级到3G。如果只是放一些文字资料的话，这个容量还是够用的。
原来还比较担心Dropbox会遇到GFW的挑战，当看到Dropbox是基于Amazon S3的时候，稍微宽心了一点。 All files synced by Dropbox are encrypted and stored securely on Amazon&amp;rsquo;s Simple Storage Service (S3) over several data centers.
另一个是 SkyDrive 难得M$很慷慨的为我们提供了25G的存储空间，可M$到底是M$，在提供这么大空间后小家子气就犯了，不再提供其他的附加工具，你只能在Web上进行文件管理操作（IE当然首选）。不过可以借助第三方软件，把这个25G的网络存储空间当作本地硬盘来使用。如SkyDriveExplorerWindows Only!
这两个工具其实配合起来使用是佳选择，据我的体验来看，Dropbox的文件传输速度相对较快，适合放一些经常要用的资料。SkyDrive作为补充，放一些比较大，使用不是很频繁的资料，或者软件、AV什么的。
工具我给推荐完了，至于怎样用，发挥你的想象力吧！
最后,如果你看完这篇文章还是不知道什么是云存储，去问Google，什么是云存储。
EOF</description>
    </item>
    
    <item>
      <title>只言片语</title>
      <link>https://tairan.net/posts/2009-11-07-the-snippet-of-thinking/</link>
      <pubDate>Sat, 07 Nov 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-11-07-the-snippet-of-thinking/</guid>
      <description>智慧是由内而外的。
如果你说不好，写不好，那是你肚子里没货。
写作，有话要说的时候就写出来了。如果你是为了其他的目的而写作，只能是将垃圾塞进纸里。
不能直言他人的缺点，尤其是平庸之辈，因为你伤了他的自尊心，他会像疯狗一样咬你，如果是有智慧的却会因此而感激你。
学习是学出来的，不是教的。当然有一个好的教导者则会让你学的更好。
这个世界是彩色的，不是非对即错的。
童话、小说都是虚假的，在没有认清真实的世界之前，不要去接触它们。
难道我们就不能为梦想而做点什么吗？</description>
    </item>
    
    <item>
      <title>不患无位，患所以立</title>
      <link>https://tairan.net/posts/2009-10-16-you-go-to-work-for-what/</link>
      <pubDate>Fri, 16 Oct 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-10-16-you-go-to-work-for-what/</guid>
      <description>很多年轻人尤其是刚工作，或者工作不久的年轻人会告诉你他想要一个能学习到东西的工作。
其实企业付钱让你来工作不是让你来学习的。
解决问题是你来公司的首要任务，在解决问题的同时你的经验值就上去了。
你想要什么样的经验值，就去需要解决什么问题的公司。
学习？ 准确的来说应该是在战斗中成长起来的经验值。</description>
    </item>
    
    <item>
      <title>我的Linux-KVM</title>
      <link>https://tairan.net/posts/2009-10-14-my-linux-kvm/</link>
      <pubDate>Wed, 14 Oct 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-10-14-my-linux-kvm/</guid>
      <description>kvm Originally uploaded by tairan.wang   用Linux当HOST有很多好处，有很多自由的虚拟机软件可以使用。现在我选择的是 Kernel-based virtual machine &amp;ndash; KVM。</description>
    </item>
    
    <item>
      <title>上海动物园游记</title>
      <link>https://tairan.net/posts/2009-10-11-shanghai-zoo/</link>
      <pubDate>Sun, 11 Oct 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-10-11-shanghai-zoo/</guid>
      <description>其实我并不喜欢去动物园，因为看到那些关在笼子里的动物就看到了关在cubicle中的自己，在狭小的空间中无助、孤独的存在着。
虽然不怎么喜欢去动物园，为了让孩子看到真实的动物，还是有必要偶尔去看看的。就像虽然不喜欢上班但是为了讨生活也要偶尔出卖劳力一样。
动物园里的动物们，我在野外没有接触过，也没有机会去野外，但是看到动物园里到处散落的麻雀好像也比那些笼中之物自在。虽然仅仅是一块玻璃、或者一些铁丝相隔，两边的世界却如此的大不相同。
动物园里的动物也许可悲，可是在cubicle的人是不是更可悲呢？动物一旦进入动物园，除了老死再无出笼之日，而人却可以自由的选择，即使有人强留你，现在的劳动法也能在一个月后还你自由之身。有选择的人啊，行动吧，笼子外的天地更广阔！
话又说回来，不是所有的动物都适合去野外的，尤其是那些习惯了在动物园内的生活，弱不禁风的家伙。 是你吗？</description>
    </item>
    
    <item>
      <title>TMD还是Linux的桌面好用</title>
      <link>https://tairan.net/posts/2009-10-10-linux-destop-is-very-nice/</link>
      <pubDate>Sat, 10 Oct 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-10-10-linux-destop-is-very-nice/</guid>
      <description>本人过着双重生活，白天在MS讨生活，夜晚沉浸在Linux的世界中。一直以来总是认为Windows的桌面环境，尤其是WIN7要比Linux的桌面要易用一些，毕竟Windows是傻瓜化的操作。可今天我才发现Linux的桌面其实更好用。
在本人的双重世界中，Linux的运行时的硬件总是距今有3－4年之久，而Windows的硬件却是当今主流中端配置。所以在在Linux上运行桌面时总感觉没那么的流畅，没有Windows的方便。当我给Linux一个当今低端配置时，Linux世界发生了翻天覆地的变化。输入法也不迟钝了，窗口切换也流畅了，高清电影播放ok了，再跑个Virtual Box玩XP也绰绰有余了。
如此的好处只能自己亲自体验才行，如果你不相信的话，赶紧装个Linux试试！
废话少说，有图为证：</description>
    </item>
    
    <item>
      <title>如何成为一名黑客</title>
      <link>https://tairan.net/posts/2009-09-18-how-to-become-a-hacker/</link>
      <pubDate>Fri, 18 Sep 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-09-18-how-to-become-a-hacker/</guid>
      <description>如何成为一名黑客 原版在这里http://catb.org/~esr/faqs/hacker-howto.html
Copyright © 2001 by Eric S. Raymond
译文来自这里 http://www.aka.org.cn/Docs/hacker-howto_2001.html
翻译：Barret
允许未经作者及译者的同意进行非商业目的的转载，但必须保持原文的完整性。
内容一览 为什么会有这份文档？ 什么是黑客？ 黑客应有的态度 黑客的基本技能 黑客文化中的地位 黑客和书呆子(Nerd)的联系 风格的意义 其它资源 FAQ（常问问题解答）
为什么会有这份文档？
作为 Jargon File 的编辑和一些其他有名的类似性质文章的作者，我经常收到充满热情的网络新手的email提问（确实如此） “我如何才能成为一名出色的黑客？”非常奇怪的是似乎没有任何的FAQ或者Web形式的文档来说明这个十分重要的问题，因此我写了一份。
如果你现在读的是这份文档的离线拷贝，那么请注意当前最新版本（英文版）在 http://www.tuxedo.org/~esr/faqs/hacker-howto.html可以得到。
注意：在这份文档最后有 FAQ（常问问题解答）。请在向我提出任何关于这份文档的疑问之前读两遍。
目前这份文档有很多翻译版本： 保加利亚语， 简体中文， 繁体中文， 丹麦语， 荷兰语， 法语， 德语， 匈牙利语， 印尼语， 日语， 朝鲜语， 葡萄牙语， 俄语及 瑞典语。注意由于这份文档时有修正，所以以上翻译版本可能有不同程度的过时。
什么是黑客？
Jargon File 包含了一大堆关于“hacker”这个词的定义，大部分与技术高超和热衷解决问题及超越极限有关。但如果你只想知道如何 成为 一名黑客，那么只有两件事情确实相关。
这可以追溯到几十年前第一台分时小型电脑诞生, ARPAnet 实验也刚展开的年代，那时有一个由程序设计专家和网络名人所组成的, 具有分享特点的文化社群。这种文化的成员创造了 “hacker” 这个名词。黑客们建立了 Internet。黑客们发明出了现在使用的 UNIX 操作系统。黑客们使 Usenet 运作起来， 黑客们让 WWW 运转起来。如果你是这个文化的一部分，如果你对这种文化有所贡献，而且这个社群的其它成员也认识你并称你为 hacker, 那么你就是一位黑客。</description>
    </item>
    
    <item>
      <title>写博客</title>
      <link>https://tairan.net/posts/2009-09-16-management-for-your-mind/</link>
      <pubDate>Wed, 16 Sep 2009 00:00:02 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-09-16-management-for-your-mind/</guid>
      <description>我思故我在。 -- 笛卡尔 写文章最大的好处就是用来整理思想，文章的形式可以是博客，也可以是日记等其他的形式。写博客有个显而易见的好处，就是可以和更多的人来一起分享你的思想，或者来一场头脑风暴。
每天用点时间来思考是必须的，可以审视自己这一天的成绩，也可以为自己的明天稍作规划。
思绪来的快，走的也快。
停留在脑子里的想法，大都是只还是一些轮廓，即使你再如此的费力去考虑细节，可还是有东西会被遗漏。同时在脑子里的思绪还有一些杂乱。此时就需要把脑子里的思绪整理成文了。
在写文章的同时，那些在思考中被遗漏的小精灵都一一出现，原本杂乱的思绪也开始变得井井有条。
写文章其实不在于你是否有很多技巧，而是你到底有什么内容要说。没有内容，即使写作技巧再好，写出来的东西也只是塞满纸张的垃圾。
通常一篇文章会有个中心思想，这是文章的魂。
在漫无边际的思考中需要很大的毅力才能将思绪整理好，此时我们最好借助一些外部的工具来辅助我们思考。 将我们思考的东西写下来，用直观的方式将头脑中的思维具化下来。
现代生活让一个人需要交叉关注很多事情，如果不去整理这些交叉的节点很容易就迷失了，会发现自己的时间不知被谁偷走了，忙忙碌碌一天只剩下疲惫的身躯。
写博客的好处有很多 我认为最重要的就是整理思想
微博客也有一定的好处，好的思想总是灵光一闪，一刹那出现后，此时应该把它记录下来。然后在抽出大块的时间来解决和消化这个灵光一闪。
微博客也好，博客也罢，重要的是你要随时的去整理自己的思绪，只有不断的思考才能看的越来越清晰。</description>
    </item>
    
    <item>
      <title>管理你的知识</title>
      <link>https://tairan.net/posts/2009-09-16-management-for-your-mind/</link>
      <pubDate>Wed, 16 Sep 2009 00:00:01 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-09-16-management-for-your-mind/</guid>
      <description>我是这样来管理自己的知识的
文章，备忘录，联系人，文档，常用软件的配置文件，一些自动化脚本。
知识要保存
外在的形式一定会变
最佳格式不是 word, 更不是PDF， 而是文本格式 TEXT
TEXT是完美的中间格式
格式化你的文本 reStructuredText DocBook Troff TeX
利用版本控制工具来管理这些文本， 什么东西该放进仓库，什么东西不该放进去？
找个地方来保存仓库，如果不是涉及隐私，就放在Google上吧。“保存文件最好的方式就是把它放在一个公开的地方，让全世界的人去镜像” &amp;ndash; Linus
本地保存，则需要定期备份。
写一些脚本来生成最终发布版本</description>
    </item>
    
    <item>
      <title>你要知道多少东西才够？</title>
      <link>https://tairan.net/posts/2009-09-16-do-you-know-how-many-is-enough/</link>
      <pubDate>Wed, 16 Sep 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-09-16-do-you-know-how-many-is-enough/</guid>
      <description>多多益善
相似的东西知道一个就行，关键在于知道多少能让你改变习惯的知识。
核心： 对每一项技术都应该把握到核心，对于细节上的精通一样就 可以了</description>
    </item>
    
    <item>
      <title>Linux 发行版漫游指南</title>
      <link>https://tairan.net/posts/2009-09-10-how-to-eat-linux-distribution/</link>
      <pubDate>Thu, 10 Sep 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-09-10-how-to-eat-linux-distribution/</guid>
      <description>平时大家口中所讲的Linux都是指Linux发行版，而真正的Linux则只是Linux kernel。
Linux发行版有很多，这么多的发行版让刚入门和还未入门的人觉得无所适从，不知道该选择哪一个发行版。
在选择发行版之前，对这么多的发行版做一个分析是有必要的。
Linux各个发行版本质的区别是包管理器的区别，相对次要的区别是软件和配置文件在文件系统中的组织方式。
包管理器决定着发行版的特色。
RPM 阵营 Redhat, Fedora, CentOS, OpenSuSE 原始的RPM包没有解决依赖关系，需要自己来安装相关的依赖 RPM新生代 yum, YaST 现在推荐使用这种方式安装
DEB 阵营 Debian, Ubuntu apt-get
ArchLinux 为I686而存在的发行版
源码 Gentoo, BSD Portage emerge 他们的包管理器是用来管理源码的，记录软件源码所在地，以及安装目录和编译选项。
古老的二进制发行版 Slackware 12.0 .tgz 13.0 .txz 目录风格跟BSD很像，同样也需要使用者自己解决依赖关系。
LFS 制作自己的发行版
在使用这些发行版的时候，最好是遵守发行版的包管理策略。如果你要安装的软件并不在现有的包中，最好的解决办法不是念咒语（configure &amp;amp; make &amp;amp; make install）而是是自己都手做一个包，然后再来安装。
众所周知没有万能的解决办法，每个发行版都各有特色，合适的才是最好的。
我最喜欢的桌面发行版 LinuxMint 基于ubuntu, UI定制细腻,稳定。让使用的时候更关注要做的事情，而不是一直的磨刀。</description>
    </item>
    
    <item>
      <title>博客改版记</title>
      <link>https://tairan.net/posts/2009-09-08-my-blog-update-theme/</link>
      <pubDate>Tue, 08 Sep 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-09-08-my-blog-update-theme/</guid>
      <description>我一直想拥有一个简洁的博客主题，因为我始终坚信简单就是美。在更换这个主题之前使用的是从WordPress下载的whitebox主题，选用WhiteBox主题的主要原因也是在于它的简单，虽然离我的要求还有点距离，不过也算是不错的了。
作为一个在互联网上公开的博客，主要目的就是写自己想说的话给别人看，当然有时仅仅是为了给自己看。无论如何，&amp;rdquo;看&amp;rdquo;，是博客对外的主要功能(对内的功能是写)。那么主题样式首先就应该为这个“看”所服务。让看客更方便、更舒服的去关注内容，而不是用脸上那一层厚厚的遮羞粉来刺激看客的视觉神经。
从WordPress的网站上没找到一个比WhiteBox更符合要求的主题了，既然没有现成的，那就自己动手做，合适的东西总是定制的。
在构思了几个草图之后就开始动手了，因为没有美工方面的技能无法从自上而下的实现构思，于是自下而上的用记事本来一转一瓦的堆切成了我的选择。自下而上的推进实在痛苦，在痛苦的间隙我在w3c的网站上找到了理想的样式。http://www.w3.org/html/
主题的样式找到了，可是这也不能直接就用。在对照着其他主题的源码，开始了自己开发WordPress主题之路。
WordPress主题的开发还是比较容易的，去实现几个特定的文件就可以有自己的主题了。
经过一天多的学习＋修补，总算可以投入使用了。做软件产品是一个渐进的过程，第一版上线之后还是有很大的改进空间以及也会有不少隐藏角落的Bug。随着时间的推进，慢慢的来优化这个主题吧。
在测试新样式的时候，IE浏览器总是给你刺激，明明按照标准来写的代码到了IE这里却变了样。一个网友说IE的容错性最好，一想到这个我就对着垃圾桶吐了口浓痰。
IE在容错方面的表现其实是用自己的财力制造壁垒，当大家都遵守标准开发的时候，IE没有什么优势。但是互联网的网站并不都是遵守标准开发的，有些人图省事自作聪明的把代码写的像狗屎一样，而且这样的人还不少。于是IE给这些写狗屎代码的人擦屁股，借此博得他们的好感，毕竟让他们可以更懒，更不负责人的写代码。此时MS的财力优势显示出来了，他可以雇佣大量的测试人员来发现不符合标准的写法，然后在现有的基础上强行的去兼容。就这样，大家看到了今天的IE，已经肥的拽不动了，而且还不好重写。
鉴于IE如此低劣的表现，以及垄断的事实，本博客也就勉强的兼容它了。博客主题的样式以Firefox和Chrome测试为主，除非有什么明显的IE上的失常表现，我才去修理它。所以这里推荐你使用Firefox 或者 Chrome 来浏览本博客。
声明：除了得到使用时的快感以外，本人没有得到任何其他来自Firefox或者Chrome的好处。</description>
    </item>
    
    <item>
      <title>瞧，搭讪犯</title>
      <link>https://tairan.net/posts/2009-09-07-look-this-accost-man/</link>
      <pubDate>Mon, 07 Sep 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-09-07-look-this-accost-man/</guid>
      <description>搭讪犯本质上和露阴癖没什么两样，都是在寻求一种和平常不一般的刺激体验。
在开始搭讪之前，内心里做着痛苦的挣扎，总是担心万一失败了怎么办。呼吸急促，心跳加速，终于鼓起勇气走到对方面前开口说声:&amp;ldquo;Hi&amp;rdquo;。就像在门口莽撞之后终于插了进来。此时若遇到对方的迎合，就像真的在做爱一样。言语中不断的变换着话题，在寻找机会，给对方留下好感。当对方表示愿意继续交往，并留下联系方式后随之而来的就是久违的高潮。
没有做不完的爱，搭讪也会结束，对于搭讪结果的满意程度影响着后面的心情，有高潮带来的余温会持续很久，也有会因为兴奋过后没有得到高潮的愤愤之情。
随着时间的流逝，即使再美妙的高潮久了以后也不会像刚结束时那样的耐人寻味。再次搭讪的动力又来了。
搭讪犯的这种行为有时也会带来副作用，一次成功的搭讪也许会成就美满而短暂的姻缘，同时也可能会让人上瘾，如吸毒一样。
上面所说的是目的性并不是很强的搭讪犯，另外还有一种职业的搭讪犯，就是大家很排斥的那种推销的家伙，一些人开始被搭讪时也如同搭讪者一样觉得刺激，可是正当激情时推销员的那种目的性裸露出来就像绿头苍蝇飞到嘴里一样恶心，里面还有屎！</description>
    </item>
    
    <item>
      <title>妙用Apache虚拟主机</title>
      <link>https://tairan.net/posts/2009-08-30-the-tips-of-apache-virtualhost/</link>
      <pubDate>Sun, 30 Aug 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-08-30-the-tips-of-apache-virtualhost/</guid>
      <description>如果在本地要同时测试多个网站, 通过子目录的方式访问有些不方便. 而只通过IP地址访问则无法同时访问多个站点. 这里我们就通过httpd server的虚拟主机功能和修改本地DNS文件来模拟通过域名来访问本地的多个测试站点.
这里以apache2为例, 其他的httpd server只要支持虚拟主机也可以使用这样的方法.
首先修改本地DNS解析文件,这样我们就可以通过域名来访问本地站点.
Windows: C:\windows\system32\drivers\etc\hosts
Linux: ubuntu, fedora /etc/hosts
增加新的解析如: #ip url 192.168.1.1 www.tairan.net 192.168.1.1 www.51xna.com  Note: 这里的域名要跟虚拟主机配置中的ServerName保持一致
基于ServerName的虚拟主机配置 NameVirtualHost *:80 ServerName www.tairan.net ServerAdmin webmaster@tairan.net DocumentRoot /var/www/tairan.net ErrorLog logs/tairan.net-error_log CustomLog logs/tairan.net-access_log common  ServerName www.51xna.com ServerAdmin webmaster@51xna.com DocumentRoot /var/www/51xna.com ErrorLog logs/51xna.com-error_log CustomLog logs/51xna.com-access_log common  
设置完毕, 重启apache. 然后就可以通过我们指定的域名来访问在本地的网站了.
另外虚拟主机还可以基于IP设置, 在这里并不适合我们使用.
其他关于虚拟主机的配置参见 Apache document</description>
    </item>
    
    <item>
      <title>闻道</title>
      <link>https://tairan.net/posts/2009-08-28-looks-tao/</link>
      <pubDate>Fri, 28 Aug 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-08-28-looks-tao/</guid>
      <description>《道德经》云：上士闻道，勤而行之；中士闻道，若存若亡；下士闻道，大笑之。不笑，不足以为道。
自己要做什么样的人呢？
你又要做什么样的人呢？
道理大家都明白，为什么不做呢？这就是人和人之间的差距吧，天注定，除了自己，别指望你能改变谁。</description>
    </item>
    
    <item>
      <title>可以抛弃 Live Domain 了</title>
      <link>https://tairan.net/posts/2009-08-18-discard-live-domain/</link>
      <pubDate>Tue, 18 Aug 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-08-18-discard-live-domain/</guid>
      <description>Live Domain 在 Google Apps 面前变得如此鸡肋。
还没有使用 Google Apps 的赶快行动吧！ http://www.google.com/a</description>
    </item>
    
    <item>
      <title>上海世博会的安全</title>
      <link>https://tairan.net/posts/2009-08-17-security-for-expo-shanghai/</link>
      <pubDate>Mon, 17 Aug 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-08-17-security-for-expo-shanghai/</guid>
      <description>上海世博会很快就要来临，由于这是一场国际化的活动，所以安全保卫工作已经开始进行了。
上周末，我需要去上海南站坐长途汽车回家，途中去了趟徐家汇。在刚进东川路轻轨站的时候，就有地铁方面的安保人员注意到我了。我看到有个年轻小伙子正在前面被开包检查，难道我也要经过这一关？ 早上老婆把包整理的很利索，牢牢的捆在小推车上。那人问我：包里放的什么？ 我说：是衣服。他用手摸摸，然后看到我们一家三口就没多做盘查就让我们过去了。
在徐家汇，我跟老婆孩子分开以后，再次来到地铁，准备去上海南站。这时我单身一人，拿着个小推车成为了重点关注对象。刚进轧机，就被叫到一旁来盘查。这次我的心情很不好，坐地铁被两次三番的盘查，好像我跟本拉登有什么关系似的。一番强力的辩解后，那人用扫描设备扫了扫就让我过去了。
从老家回到上海时，因为又是一个人，一辆小推车，再次成为盘查的对象。
这次回家经过几次被盘查，才真的感觉到世博会的来临。作为一个在上海工作生活的人，如果每次坐地铁都被盘查肯定不爽，另外盘查好像也没有什么效率，安保人员拦住你劈头盖脸的问你包里是什么东西，如果你底气比较足却可以蒙混过去（如果真的有危险品）。另外安全扫描设备明显配备不足，来回地铁6-7次才发现一个有扫描的。如果真的有恐怖分子，这些又足以保证市民的安全吗？
其实世博会也不是什么天大的事情，只不过促进一下经济，满足一些人的虚荣心而已。在这个复杂的社会里，没有哪个政府能保证你一定安全，所以在世博会相关的日子里除非必要还是少到人多的地方去。为了减少被盘查的可能，最好空手出门。</description>
    </item>
    
    <item>
      <title>我在跑步时穿什么？</title>
      <link>https://tairan.net/posts/2009-08-12-i-am-running-what-to-wear/</link>
      <pubDate>Wed, 12 Aug 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-08-12-i-am-running-what-to-wear/</guid>
      <description>跑步的时候应该穿什么？
我喜欢在室外跑步，跑步时的穿着很重要，她会带来安全同时也会带来舒适和好心情。跑步时的穿着我试过很多种，现在我就把我尝试过的组合的优劣说出来。
做为一个爷们，跑步时光膀子是很正常的(只是在上海的马路上有些害羞)。光着膀子除了可以暂时的释放下裸露的身躯，显摆一下还算有棱角的肌肉之外没有什么其他的好处。首先，在城市的马路上光着膀子的确有一些不雅。其次，因为跑步时会出大量的汗，当汗水从额头留下，快要渗入眼角的时候总要擦拭一下吧，这时光着膀子就很不方便擦汗。最后还有一条需要对比着说才有效果，按下不表。
穿紧身衣，如紧身背心。紧身背心摆脱了光膀子的不雅，也能显摆一下肌肉，但同时也和光膀子一样不方便擦汗。还有一条就是由于是紧身的衣服会束缚上身，防止畅快的呼吸，运动时畅快地呼吸是很重要的。
宽松的T-shirt，长袖短袖根据天气的冷暖来选择，夏天当然是短袖的比较凉快了。宽松的T-shirt，最好还是大一号的那种，擦汗的时候，可以选择就近的抬一下上臂擦，也可以掀起衣角来擦。这样在运动中擦汗的问题就解决了。因为宽松，所以呼吸也很顺畅。在运动的过程中，大量的汗水会浸湿T-shirt，并贴在身上，身体由于运动带来一定程度的膨胀，把T-shirt贴在身上的感觉增加的异常强烈，此时意念中可以感觉到自己的身体，肌肉在增大。这不正是自己想要的么？ 在漫长的运动路程中也会因此带来了信心和动力。因为长时间的穿着宽松的T-shirt，让自己的自恋情结最小的去关注身体的变化，因为光着膀子跑步会天天看着自己的身体，毕竟身体的变化不是突变，每天都见面很难察觉这些细微的变化，就如同天天见面的人来问你：“你看我瘦了没有”，长此以往难免会有一些丧气。而天天穿着宽松的T-shirt会让你在运动的过程中不去关注这些。长时间坚持下来，某一天脱掉T-shirt会有惊喜哦。
以上都是说的上衣，裤子呢，夏天普通的运动短裤，冬天的运动长裤都行。但是要合身，不能太宽松，跑步的时候会因为太宽松让两腿摩擦，当疲惫的时候有可能出意外。至于鞋子，各位自己看着办吧，我想你不会穿着皮鞋或者拖鞋去锻炼身体的。</description>
    </item>
    
    <item>
      <title>上海博物馆游记</title>
      <link>https://tairan.net/posts/2009-08-04-shanghai-museum-travels/</link>
      <pubDate>Tue, 04 Aug 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-08-04-shanghai-museum-travels/</guid>
      <description>参观上海博物馆已经是两周前的事情了，一直想把这次参观记录下来，一来给后来人提供一些攻略参考，还有就是看看自己写游记的水平是不是能比小学时的流水帐好一点。
这次参观上海博物馆有一定的偶然因素，虽然对博物馆仰慕已久，在博物馆收门票的时代就想去，可一直囊中羞涩。等到了博物馆免费开放的时候，每次经过都被长龙般的队伍给震退。
缘分呐，这次缘分真的是到了。
去博物馆排队的时间是中午12点左右，天气很热，也许是正赶上吃饭的点，所以队伍排的很短，老婆去趟洗手间的空，我就排到博物馆门口了。因为相对论的影响，在门口排队时间总是过的很慢。我不时的回头看三倍于我排队时的长龙，心中窃喜！
博物馆有两条入口通道，其中一条是给享受国家优惠待遇的人士，如70岁以上老人，现役军人等，以及旅行团预约的专用通道。经过专用通道进入博物馆的人实在太少。另一条就是我所排的正常的免费通道。
进入博物馆是需要安检的，和机场的安检差不多。有工作人员会提醒你把兜里所有的物品都放在随身携带的包中，包括钱包，手机，喝的水等；如果没有包，就把东西放在安检通道旁边的塑料篮子里。
安检以后，整个博物馆就是你的了，一共四层可供参观。博物馆的设计还是很合理的，每一层你都可以通过一个入口进入，一直顺序的绕一周，完整的参观。在一楼有免费的博物馆参观指南，如果你是第一次来到博物馆，那么从头到尾的走马观花是有必要的。因为博物馆的藏品实在太丰富了，半天的时间是绝对无法仔细的欣赏的。走马观花的看一遍以后，下次再来就可以有的放矢，找自己喜欢的去看了。
对于馆藏的物品，我无法用文字去描述，只能上图。照片是用手机拍的，Nokia N70，质量不好，如果谁能捐赠一个单反相机，那么我还是能拍出比较靠谱的照片的。在博物馆拍照有点要注意，就是在拍摄的时候不要使用闪光灯。你应该不想你的孩子去博物馆的时候没什么可看的吧？ 以前我们也敢说自己是帝国！ 有了这次参观博物馆的经验，以后只要有时间就去赶下午场！既可以减少排队的等待，又可以有的放矢的参观。yeah！
最后想到很久以前看到的一则故事，说是一个在卢浮宫附近住了几十年的老太太，在移民到美国以后才想起来还没参观过卢浮宫。在上海的朋友，如果你不想有这样的遗憾，赶紧行动吧，既然在上海，那就好好的把玩上海，不仅是博物馆！</description>
    </item>
    
    <item>
      <title>最近很累</title>
      <link>https://tairan.net/posts/2009-07-30-i-am-tired/</link>
      <pubDate>Thu, 30 Jul 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-07-30-i-am-tired/</guid>
      <description>用身心疲惫来形容此时我的状态恰到好处。
脑袋整日紧绷着，无法装入更多的东西，以前学习的技术性的东西也都忽然的想不起来。
停下来，细想一下，最近自己身上的事情实在太多，可事情虽然很多但实际去处理的却又没有几个，也许是整日的空想占据了自己的全部。这正说明自己不是真的很忙，而是假装很忙，让无聊暂时无法侵蚀自己而已。
大多数的人生是很痛苦的，当你处在社会底层的时候需要跟物质的匮乏&amp;ndash;痛苦做终日斗争，而到了上层社会时却又和无聊进行着一场近似乎绝望的搏斗。如何才能平衡自己呢？
这几天在业余时间看叔本华的《人生的智慧》收获很多，恨不能让身边的人都去读一读。因为这本书是给那些不幸福的人写的，如果你也觉得自不幸福那么也有读一读这本书的必要。
读书是一件很惬意事情，尤其是领悟到一本好书的真谛并以此实践更是令人振奋的。</description>
    </item>
    
    <item>
      <title>小子，这就是规矩</title>
      <link>https://tairan.net/posts/2009-07-16-the-rule-2/</link>
      <pubDate>Thu, 16 Jul 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-07-16-the-rule-2/</guid>
      <description>小子，还在整天操这个他妈的不公平的世界吗？ 呸！你这是不懂规矩。
你以为在鸡巴上镶个铁珠就是标新立异，斜着看人就算自己真的牛逼啦。
你错了，这是一个有规矩的世界，懂得规矩才可以去特立独行。
难道你真的会天真的以为你自己能操的动这个世界吗？ 其实是这个世界在不断的干你。叫你丫的不懂规矩！
看看你周围那些庸庸碌碌的人吧，他们这个样子就是被这个世界整的。因为他们不懂规矩，被世界操了以后就老老实实的按照这个世界的意志活着了。到如今他们还是不懂规矩，继续的被这个世界折磨着。
想真的特立独行吗？ 好好研究这些规矩吧！懂了规矩才能真的不被规矩左右！</description>
    </item>
    
    <item>
      <title>身不由己</title>
      <link>https://tairan.net/posts/2009-07-11-cannot-help-doing/</link>
      <pubDate>Sat, 11 Jul 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-07-11-cannot-help-doing/</guid>
      <description>身不由己
我要离开你， 让你独自郁闷、 唠叨和吵闹， 还有痛苦与愤怒。 我要离开你， 让你固执地走下去， 让你独自在抱怨中走下去。 过去、现在、将来，你都不能放弃。 我要离开你，让你无法控制！ 但我却总是身不由己。
现在，当看着镜中的我， 那是我吗？ ---- 那个呆滞、愚蠢、古板而冷漠的家伙。 -- 梅丽莎.麦金托什.布朗</description>
    </item>
    
    <item>
      <title>本站最新网址</title>
      <link>https://tairan.net/posts/2009-07-06-the-latest-url-of-this-site/</link>
      <pubDate>Mon, 06 Jul 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-07-06-the-latest-url-of-this-site/</guid>
      <description>你是否知道现在搜索色情网站的关键字？ 不知道？ 我来告诉你本篇文章的标题其实就是一个搜索色情网站的关键字。你也许会怀疑，这个看上去和那个毫无关系的词怎么是搜索色情网站的关键词呢？ 看人家CCTV曝光的Google上搜索也是直接和身体器官相关的英文，你这个标题能行吗？
现在就先来说说这个标题为什么能成为搜索色情网站的关键字。
众所周知，色情网站在我国内是违法的。所以开办色情网站的服务器一般都放在国外，放在国外虽然可以在一定程度上躲避国内法律的追究，但是国外的网站很容易被GFW以及5毛党盯上。被盯上的后果大家都知道，被封IP，域名等。那么这些开办色情网站的人就开始和国内警方玩猫捉老鼠的游戏了。你封我一个IP，域名，我再换一个IP，域名。这样的躲猫猫游戏不可避免的会影响色情网站的流量，那么怎么让色狼们知道最新的网址呢？于是，他们就开始发一些垃圾信息，上面写着：本站最新网址 xxxxx
像黄色网站的这种和国内警方斗智斗勇的例子还有很多，有些网站是为国外华人提供的，那么他们也就不担心国内的用户能否访问。这样国内想访问的用户就练成了一身翻墙的好功夫。当然练习翻墙的人们并不全是为了发泄性欲，还有一个很重要的诱惑就是了解一些对于当前政府不利的信息，呼吸一下自由的空气。为了给这些人提供翻墙的手段，于是催生了一些翻墙的软件，免费而且质量绝对比那个4170万的绿坝强很多。
还有一些网站仅为了不被GFW抓住，采取了使用HTTS协议来提供信息，这是一个在传输过程中加密的协议，和银行用的没有两样。这样就可以避免了GFW的追踪，如果GFW连这个也不放过的话，那各位看官就要看紧自己的荷包了。
以上的种种躲猫猫的技术都是在互联网上广为使用的。促成这些技术的使用都是为了规避政府的追踪。因为互联网技术的特性，你用一种方法来堵，我就用另一种方法破，永无止境。我们的政府是一个有一定能力的政府，但是绝对不是一个聪明的政府。我个人认为聪明的政府绝对不会偷偷摸摸的去遮盖，而是应该制定规则，我给你生存的空间，你不能越界，否则严惩。像一些发达国家一样，允许文化的多样性，尊重人民。
最后，这个本站最新网址的关键字是不是真的有效？你去试试就知道了。</description>
    </item>
    
    <item>
      <title>慈溪摸奶门视频</title>
      <link>https://tairan.net/posts/2009-07-02-young-sex/</link>
      <pubDate>Thu, 02 Jul 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-07-02-young-sex/</guid>
      <description>昨晚从一个朋友那里得到了这一段视频，视频里是一个自称19岁的女生被多个男同学一起抚摸乳房，如果只是这个倒也没什么，这是人家的私事。通过观察，你会注意到这段视频的背景：白天，教室里，旁边还有很多其他的学生。原来他们是慈溪一所职高的学生，大白天在教室干这些让大多数人觉得不可思议的事情。
本人也年轻过，自己也亲身经历过各种手抄本的传阅，半夜翻墙到校外去看黄色录像等；在初中的时候就对周围的某些学生的艳情生活有所耳闻，那也只是有所耳闻某某男同学和某某女同学夜不归宿而已。这些事情基本上都是属于个人或者小规模团体的地下行动，这些事情很多人都经历过，但是如果拿到台面上，或者被其他不相干的人撞见总也觉得不好意思。
我始终相信社会是进步的，我们总能接受一些以前无法接受的事物，就像我们现在接受了同性恋一样。现在互联网上会经常看到一些换偶、群交等信息，有那么一些人的确有这样的需要，于是他们就可以在一些秘密的圈子里去做这样的事情。而像这样大白天在教室里做摸奶的事情，虽然本人对视频很感兴趣但是还是无法想象他们做这件事情需要多大的勇气，是一时的性冲动还是他们真的如此开放？</description>
    </item>
    
    <item>
      <title>安全的上网</title>
      <link>https://tairan.net/posts/2009-07-01-the-security-internet/</link>
      <pubDate>Wed, 01 Jul 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-07-01-the-security-internet/</guid>
      <description>我们需要安全和保护个人隐私，在单机时代我们所要作的保护主要集中在本地机器的密码方面。在现在的互联网时代，我们除了要面对本地计算机的账户密码安全之外，网络安全是绝对不容忽视的。
这里所说的网络安全主要是指在网络传输过程中的安全。我们浏览网页一般是通过HTTP 协议，而这个协议本身是个一个明文协议，因此就有很多手段来监听数据传输内容。同样也产生一些信息过滤工具。如果你浏览的信息对你来说是保密的或者是隐私信息，那么就需要使用HTTPS（Hypertext Transfer Protocol over Secure Socket Layer）协议了。使用这个协议的主要作用可以分为两种：一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性。
保证数据安全传输一般用在用户信息的确认方面，比如网银或者购物网站等的用户登录，如果网站内容整体都是私密信息，那么整个网站都采用HTTPS也可以。因为HTTPS协议增加了数据传输的验证，那么就带来一些额外的资源占用，在具体应用时就需要在安全和速度方面作一些权衡。
作为互联网的用户，当在一些网站需要输入个人账户信息，以及发布敏感信息的时候就需要关查一下当前所在的网站是否采用了HTTPS协议。
今天是绿坝系统部署的日子，虽然在前一天有关部门已经松口说部分厂商可以推迟部署，但是这也足以引起一些对信息比较敏感的网站提高警惕。比较有特色的 twitter 网站，在大陆访问的用户就会默认使用HTTPS协议。另外在Google App Engine上也支持HTTPS协议。
除了在浏览互联网信息的时候需要注意安全外，发送电子邮件时也是需要注意的。目前比较流行的保密的做法是，把邮件内容进行加密，收件人收到邮件后再进行解密。现在相对安全的加密解密工具是PGP，开源的实现是GnuPG。
总而言之在互联网上作私密的事情一定要充分的利用最先进的保密工具。
参考： HTTPS http://baike.baidu.com/view/14121.htm PGP http://baike.baidu.com/view/7607.htm</description>
    </item>
    
    <item>
      <title>俞军离职前演讲：谈管理之道</title>
      <link>https://tairan.net/posts/2009-06-29-the-talk-of-junyu-before-leave-the-baidu-company/</link>
      <pubDate>Mon, 29 Jun 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-06-29-the-talk-of-junyu-before-leave-the-baidu-company/</guid>
      <description>俞军离职前演讲：谈管理之道
http://www.Baiduer.com.cn 2009年06月29日 责编:俞昊然 来源:百度　添加到搜藏 百度副总裁俞军将于明天正式离职。上周，俞军在离职前在公司做了一个演讲，谈了关于管理的一些内容，直白而又深刻。以下是俞军演讲全文：
以文取人——所有选手站在同一个起跑线
如何选人？选什么样的人？很多经理都会面临这样的问题。选对一个人，会大大提升团队的“战斗力”，而选错一个人，会给团队带来可能很严重的“伤害”。俞军说，在搜索引擎领域，我们在选人时，不会特别看重这个人的相关经验，所有人都是在一个起跑线上。至于今后的个人发展也和是否有相关工作经验无关，而是这个人是否投入到了这个领域，在认真的学习这个领域，是否具有潜力。俞军告诉我们，用有经验的人可能一时轻松，但如果他不能再跟着产品成长，将来你会更累；用有潜力的人，现在你可能要多付出一点来带他，可是将来他会加速成长，比你对产品的理解更深。
产品部门在选人这一点上，可以用四个字概括——以文取人。我们不看重简历上的背景，性别，血型，而是根据他写的产品分析看这个人对于产品和用户的感觉，这些感觉是从文字上可以感觉到的。而判断力是源于自己对于产品和用户的感觉积累，当你读过一千个或者更多的产品分析后，再读到一篇产品分析的时候就会一下子给这个分析打一个准确的分数。另外从产品分析里的方法运用上可以看出这个人发现问题和分析问题的逻辑能力。
“以文取人”之后，还要看这个人是否喜欢并能够投入的做这个工作。喜欢的投入，和没有感觉的投入呈现的效果完全是两码事。俞军举了一个赛车的例子，他说，有些人开车，就是开车，把车作为一个工具把自己送到目的地，所以开了一辈子车，还是一样的开车。但是赛车手会琢磨怎样把车开的更好更快，所以也许赛车手开一个月的车，就已经比开一辈子车的人开的好的多了。我们需要选的人，就是喜欢并愿意投入的人，在又酷又炫的搜索引擎领域，这样的人可能并不难找。
俞军在总结选人经验时，特别强调了要选择和公司，团队的价值观一致的人，这样会大大提升工作的效率。更应该遵循“宁缺毋滥”的原则，宁可人少，每个人累一点或是少做一些事，也不要盲目扩充人力，种下不良的种子。
给他成功与犯错的机会——用人的关键在于授权
选对人之后就要考虑如何用好他（她），培养他（她），不能浪费人才资源，这也是本次讲座的重点和意义，引起了在场同学的广泛关注。俞军说首先的一个大原则就是要——充分授权，目标管理。充分授权能够提高人的主观能动性，而目标一定是协调后达成一致的目标。对于产品部门而言，和不同的产品团队合作，就会做出不同的东西，因此依赖于脑力劳动的工作，能动性是非常重要的。
另外就是要营造平等的工作氛围，有试错的心态，并能够不断总结。平等的氛围有助于发挥个人能动性。对于试错的心态，俞军分享自己带团队的经验，他说当自己和团队的成员出现意见不一致的时候，要尽量在把控关键点前提下将“试错”的机会留给团队成员。因为如果这个成员的想法此次被证明是错的，那他（她）就会从“错”中学到最多的经验，从而尽快成长。如果领导的意见被证明是错的，那团队成员将没有机会获得“错事经验值”。最后总结尤为重要，总结要有开放的心态，多总结不好的方面，下次可以得到更好的改善。之后再与团队成员互相分享，整体成长会很快。
俞军提到应该“助理比经理更懂，经理比总监更懂”，越专注细致的了解一件事情的人最有发言权。最差的方式就是向上分享，单线汇报。真正需要做的是和自己的团队商量，得出什么样的结论，基于事实本身推出结论。需要培养个人持续否定自我的精神，最终的结论是靠发现更多的不足找到，而不是推销观点，永远站在事实的一边，结论会越来越正确。
用人时一门学问，需要大处着眼，小处着手，就像下一盘棋。人才培养，是一个厚积薄发的过程，需要高瞻远瞩，也正如一盘棋局。培养人才，用好人才，才能赢得这盘棋，做好这个项目。
愿景清晰，赏罚分明——薪酬之外的留人之道
用心培养的人才，应该怎样留住？最后俞军总结了吸引人才最重要的三个条件，一是公司的愿景，是否足够吸引人才留下；二是工作空间，是否能够提供发展和上升的空间；三是个人待遇。对于每一个在百度工作的同学来说，我们其实正在合力做一件非常有意义的事情，做中国最好的搜索引擎，降低人们获得知识的成本，填补人们信息的鸿沟，每一个百度人都有理由骄傲和自豪！ 其实俞军自己的例子就证明了这一点，他告诉我们，其实他并不喜欢在北京生活，8年来无日无夜不想着回上海老家，正是为了做出中国最好的搜索引擎这个愿景，才使他留了下来。
两个小时悄然滑过。抓住难得的与俞军可以交流的机会，大家也开始在人才选择培养之外踊跃提问有同学问：“你认为百度成功的原因是什么？”俞军说： “是在正确的时间做了正确的事情，那个时候，如果没有百度，也一定会有另一个中文搜索引擎兴起，而百度在这个最佳的时机选择了这个领域，且做得最好，所以这种成功可以说是天时地利的必然。
继而有同学问，那么只要百度不犯错，是否就不会被其他搜索引擎超过了？。俞军说非常坦诚地说：“如果是与百度同质的产品，在这个领域想要超越已经几乎不可能了，但是并不排除新的满足人们信息需求的领域上，出现能颠覆搜索引擎的产品或公司。
他告诉我们他的思考——产业生命周期的更迭总是从具有颠覆性的新技术开始的，聚光灯曾经照耀过一个个新兴的产业，使他们成为增长最快的经济引擎，如今这个焦点正是搜索引擎，但如果有一天，搜索引擎不能带给用户更多的价值——无论怎么努力去改进，其对于用户体验的提高已经微乎其微了的话，其光芒与风头被另一种产业替代，也将是一种必然。
那么我们怎么保持我们的领先地位呢？俞军再次强调了百度做产品的用户导向原则。以用户需求为导向，只做有需求，我们有优势和有利益的产品。“对于用户需求，请记住，我们永远是发现者，而不是创造者。”俞军说。</description>
    </item>
    
    <item>
      <title>我是一个条内存</title>
      <link>https://tairan.net/posts/2009-06-27-i-am-a-memory/</link>
      <pubDate>Sat, 27 Jun 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-06-27-i-am-a-memory/</guid>
      <description>我在一台台式电脑里工作，但是我记不得我是从哪里来的，是什么牌子，因为我健忘。我的上司是cpu大哥，他是我们的老大。都说他是电脑的脑子，可是我看他的脑子实在是太小了，比我还要健忘。每天他总是不停的问我，某某页某某地址存的是什么？我总是不厌其烦的告诉他，可是不出一秒钟他又忘记了，又要问一遍，一次我说大哥你烦不烦，你就不能记住点有用的东西？他说“内存兄弟，我有苦衷啊，每天都在不停地做题，头晕眼花的，我也难啊。”
其实我不愿意跟他计较，因为他脑子小，思维也很简单。虽然说他是我的上司，可是每次睡觉醒来，他连要干什么都不记得了，总是急急忙忙地找BIOS兄弟，“嘿，哥们，今天干什么来着”。BIOS总是很不耐烦地把每天必做的工作说一遍，然后就去睡觉了。接下来就轮到我和 CPU 哥瞎忙了。
在机箱里的兄弟中，我最喜欢硬盘。他脑子大，记得东西多，而且记得牢。他说话的速度很慢，而且很少说错，这说明他很有深度，我这么感觉。CPU也这么想，不过他很笨，每次都忘了硬盘是谁。开机自检的时候总要问∶“嘿，那家伙是谁？” “ST！”我总要重复一遍。
硬盘很喜欢忧郁，我觉得象他这样忧郁的人不适合做技术活，迟早会精神分裂的，但是他不信。
其实睡着的时候我总是把几乎所有的东西都忘记掉，但是我从来都不会忘记朋友。有一块地方叫做CMOS，那是我记忆的最深处，保存着硬盘、光驱的名字。有些东西应该很快忘掉，而有些东西应该永远记得。我在梦中总是这么想着。
BIOS是一个很奇怪的家伙，他老是睡觉，但是却总是第一个醒过来。让我们自检、启动，然后接着睡觉。我知道如果我在 CMOS里头把BIOS Shadow选项去掉，他就睡不成了，但是看着他晕晕乎乎的样子，也就不忍心这么做了。他对人总是爱搭不理，没有什么人了解他。但是这次硬盘恋爱的事，却使我重新认识了他。
那是很久以前的事了，机箱里似乎来过一块笔记本硬盘，很可爱，说实话我也喜欢她。不过现在除了记得他可爱，别的都忘记了。这就是我比硬盘幸运的地方，我把所有应该忘记的都忘记了，但是他却什么都记得。
自从笔记本硬盘走了之后，硬盘就变得很不正常。每次他的磁头经过一些地方的时候，我们都能感觉到电流很不正常。
“硬盘这是怎么了？”我问CPU。
“谁是硬盘？”
我就知道和CPU没有办法交流，倒是 BIOS没好气地说∶“那个傻瓜恋爱了”。我不知道什么是恋爱，因为我记不住东西，似乎有一些人或者事在我生命中留下过痕迹，但是我都轻率地把他们忘记了。
BIOS对我说∶“对你来说记忆太容易了，所以你遗忘得更快，生命中能够永刻的记忆都带着痛楚。”我不懂，但是我知道BIOS曾经被刷写过，那时他很痛，象要死了一样。我的记忆是轻浮的，不象他们……我很羡慕他们，因为他们拥有回忆，而我们有，从此我也学会了忧郁，因为我在 CMOS 里面写下了“忧郁”两个字。
硬盘一天比一天不对劲，终于有一天，CPU 对问说∶“下条指令是什么来着？” 我一看，吓了一跳∶“format”
“是什么？”CPU 很兴奋，这个没脑子的家伙。
我还是告诉了他, 我不知为什么这么做。
硬盘犹豫了很久，终于说了一句 Track 0 bad，Disk unusable。
电停了，很久很久，我在黑暗中数着时钟……
一个月后硬盘回来了，也许最后的挣扎也没有使他摆残酷的命运，他被低格了。他什么也不记得了，如同一个婴儿，我们很难过，但是这未必不是一件好事，他以后不用痛苦了。
为了恢复数据，笔记本硬盘回来了。“Hi，ST”，她说，“你不认识我了？”硬盘没有说话，似乎低格对他的伤害很大。过了一会，他说∶“对不起，好象我们没有见过……”。
笔记本硬盘显得很伤心，我能感觉到她带泪的电流。“想不到连你也这么健忘”。
“哦……”。硬盘没有回答。
我很难过，笔记本硬盘的心里依然记着他，他却把一切都忘了，而那正是他最不希望忘却的。究竟是幸运，还是痛苦，我说不上来，只是觉得造化弄人，有一种淡淡的悲凉。
这时从 BIOS 传来一阵奇怪电流，我感觉到硬盘的表情在变化，由漠然到兴奋，由兴奋到哀伤，由哀伤到狂喜……
“IBM，你回来了……”。
……
后来 BIOS 对我说，其实他并没有睡觉，自从硬盘把那些文件藏起来以后，他就到会有这样的结局，于是偷偷地把其中一些文件放到了备份里。
“幸好我是DUAL BIOS，虽然藏得不多，还足够让他想起来……”。
我想BIOS保存这些东西的时候一定很疼，当我问他“为什么这么做”时，BIOS轻描淡写的说∶“呵呵，我们是朋友嘛”。
嗯，朋友，永远的朋友……
转载，来源未知</description>
    </item>
    
    <item>
      <title>我是一个硬盘</title>
      <link>https://tairan.net/posts/2009-06-26-i-am-a-hard-disk/</link>
      <pubDate>Fri, 26 Jun 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-06-26-i-am-a-hard-disk/</guid>
      <description>在一个普普通通的台式机里工作。别人总认为我们是高科技白领，工作又干净又体面，似乎风光得很。也许他们是因为看到洁白漂亮的机箱才有这样的错觉吧。其实象我们这样的小台式机，工作环境狭迫，里面的灰尘吓得死人。每天生活死水一潭，工作机械重复。跑跑文字处理看看电影还凑活，真要遇到什么大软件和游戏上上下下就要忙的团团转，最后还常常要死机。
我们这一行技术变化快，差不多每过两三年就要升级换代，所以人人都很有压力而且没有安全感。每个新板卡来的时候都神采飞扬踌躇满志，几年光阴一过，就变得灰头土脸意志消沉。机箱里的人都很羡慕能去别的机器工作。特别是去那些笔记本，经常可以出差飞来飞去，住五星级的酒店，还不用干重活，运行运行word，上网聊聊天就行了。 但我更喜欢去那些大服务 器，在特别干净明亮的机房里工作。虽然工作时间长点，但是福利好，24小时不间断电ups，而且还有阵列，热插拔，几个人做一个人的事情，多轻松啊。而且 也很有面子，只运行关键应用，不象我们这里，什么乱七八糟的事情都要做。不过我知道，那些硬盘都很厉害，不是SCSI，就是 SCSIII Fibrechannel，象我这样IDE的，能混到工作站就算很不错了。
我常常想，当年在工厂里，如果我努力一下会不会也成了一个SCSI？或者至少做个笔记本硬盘。但我又会想，也许这些都是命运，不过我从不抱怨。内存就常常抱怨，抱怨他们主板部门的复杂，抱怨他如何跟新来的杂牌内存不兼容，网卡和电视卡又是如何的冲突。
我的朋友不多，内存算一个。他很瘦的而我很胖，他动作很快，而我总是很慢。我们是一起来这台机器的，他总是不停地说，而我只是听，我从来不说。
内存的头脑很简单，虽然英文名字叫Memory，可是他什么Memory都不会有，天大事睡一觉就能忘个精光。我不说，但我会记得所有的细节。他说我这样忧郁的人不适合作技术活，迟早要精神分裂。我笑笑，因为我相信自己的容量。
有时候我也很喜欢这份工作，简单，既不用象显示器那样一天到晚被老板盯着，也不用象光驱那样对付外面的光碟。只要和文件打交道就行了，无非是读读写写，很单纯安静的生活。直到有一天……
我至今还记得那渐渐掀起的机箱的盖子，从缺口伸进来的光柱越来越宽，也越来越亮。空气里弥漫着跳动的颗粒。那个时候，我看到了她。她是那么的纤细瘦弱，银白的外壳一闪一闪的。浑身上下的做工都很精致光洁，让我不禁惭愧自己的粗笨等到数据线把我们连在一起，我才缓过神来。开机的那一刹那，我感到了电流和平时的不同。后来内存曾笑话我，说我们这里只要有新人来，电流都会不同的，上次新内存来也是这样。我觉得他是胡扯。我尽量的保持镇定，显出一副很专业的样子，只是淡淡的向她问好并介绍工作环境。
慢慢的，我知道了，她，IBM-DJSA220，是一个笔记本硬盘，在老板朋友的笔记本里做事。这次来是为了复制一些文件。我们聊得很开心。她告诉我很多旅行的趣闻，告诉我坐飞机是怎么样的，坐汽车的颠簸又是如何的不同，给我看很多漂亮的照片、游记，还有一次她从桌子上掉下来的历险故事。而我则卖弄各种网上下载的故事和笑话。 她笑得很开心。 而我很惊讶自己可以说个不停。
一个早晨，开机后我看到数据线上空荡荡的插口。她一共呆了7天。后来，我再也没有见过她。我有点后悔没有交换电子邮件，也没能和她道别。不忙的时候，我会 一个人怀念伸进机箱的那股阳光。
我不知道记忆这个词是什么意思，我有的只是她留下的许多文件。我把它们排的整整齐齐，放在我最常经过的地方。每次磁头从它们身上掠过，我都会感到一丝淡淡的惬意。
但我没有想到老板会要我删除这些文件。我想争辩还有足够的空间，但毫无用处。于是，平生第一次违背命令，我偷偷修改了文件分配表。然后把他们都藏到了一个秘密的地方，再把那里标志成坏扇区。不会有人来过问坏扇区。而那里，就成了我唯一的秘密，我常常去看他们，虽然从不作停留。
日子一天一天的重复，读取写入，读取写入……我以为永远都会这样继续下去，直到一天，老板要装系统却发现没有足够的空间。他发现了问题，想去修复那些坏扇区。我拒绝了。很快，我接到了新命令∶格式化！
我犹豫了很久 ……
track 0 bad，disk unusable
转载，出处未知</description>
    </item>
    
    <item>
      <title>一坨大便</title>
      <link>https://tairan.net/posts/2009-06-25-a-pile-of-shit-on-the-pavement/</link>
      <pubDate>Thu, 25 Jun 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-06-25-a-pile-of-shit-on-the-pavement/</guid>
      <description>从上周开始，每天上班时在出了小区门口不远处的人行道上总是出现一坨大便。很大一坨，很恶心。这一坨大便的制造者把它放在了这里到底是为什么？
这里每天有很多过往的行人，大多数人都是上下班时经过与此，而上班又都是为了为自己谋求幸福，难道这一坨大便的制造者把这一坨大便放在人行道上是为了阻止别人追求幸福？若不是这个原因，他完全可以到马桶上去制造大便，即使没有马桶也可以到草丛中去解决。把它放到了人行道上一定是阻止人们去追求幸福。
其实这一坨大便是阻止不了人们去追求幸福的，人行道很宽，我们可以绕过这一坨恶心的大便去继续追求幸福。
昨天晚上，google.com &amp;amp; mail.google.com 在中国内地无法正常访问了，GFW 就像一坨大便一样的放在了互联网的信息公路上。虽然恶心了点，不过没关系，我们可以绕着走继续追求幸福。</description>
    </item>
    
    <item>
      <title>野合万事兴</title>
      <link>https://tairan.net/posts/2009-06-24-go-to-happy/</link>
      <pubDate>Wed, 24 Jun 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-06-24-go-to-happy/</guid>
      <description>莫谈国是，中国在最近发生了很多的事情，在成都公交车被烧，在湖北石首警察出动万人去抢尸体，2009年6月22日看世界的窗口在强权势力诬陷而被关闭，2009年7月1日起绿坝-花季护航开始正式的强奸人民购买的电脑，这些种种以后还会有更多。可这么多事情却都是我们不应该谈的，因为在某些人眼里我们是不明真相的群众，因为我们不明真相，所以容易被别人煽动、利用。
我们是弱者，即使成年了也还是他们眼中弱者。</description>
    </item>
    
    <item>
      <title>即将消失的救命稻草</title>
      <link>https://tairan.net/posts/2009-06-22-where-is-freedom/</link>
      <pubDate>Mon, 22 Jun 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-06-22-where-is-freedom/</guid>
      <description>绿坝-花季护航从2009年7月1日起将随所有在中国境内销售的计算机为在大陆的中国人花季护航，2009年6月22日谷歌中国在CCTV对其狂轰滥炸后果断自宫&amp;ndash;停止所有境外搜索。这一切都是在披着保护未成年人的外衣下进行着，将人民的最后一颗稻草&amp;ndash;互联网打倒。
互联网是一把锋利的双刃剑，互联网也和我们现实的社会一样美好、肮脏。早期互联网人，到今天有功成名就的，也有沦为阶下囚的。难道真的是互联网太坏？ 其实不然，花季护航真实的目的是有那么一小撮人，想独裁、想世袭爵位、想妻妾成群，可是又怕别人戳脊梁骨而找到的蒙蔽不明真相的群众的借口。
互联网的确是把双刃剑，把他用在人肉搜索老百姓，明星的艳照固然不该，可用它来监督那一小撮人却是一把锋利的宝剑，贪官污吏在互联网这把利剑下纷纷倒地。正因为如此，人民把互联网当作了救命稻草，在这个法律只治百姓，信访被当作精神病，呼天不应，求地无门的大环境下借助互联网的力量来伸张正义。而与此同时，那一小撮跟人民作对的贪官污吏也纷纷各显神通来掐断这棵人民的救命稻草。
实体社会已然被这一小撮人控制，图书非阉割不能上市，出门散步拿枪打你，就是一个公民的死亡时间也被随意篡改。互联网是高科技的产物，那一小撮贪官污吏感到了力不从心，不管境内还是境外，只要一听说有能管制互联网的工具就不惜血本的去搜罗。GFW 是在境外高科技产品公司的协助下建立起来的，技术很先进达到了世界先进水平，可这一小撮人还是不放心，于是千方百计的利用互联网仅有的弱点而开始大肆宣传并以此大规模部署虑霸。2009年7月1日绿坝开始部署，然而这就结束了吗，不！暴行还在继续，静观其变吧。
民可以载舟，亦可以覆舟。希望那一小撮贪官污吏还记得，跟人民过不去的人绝对没有好下场。</description>
    </item>
    
    <item>
      <title>然后又该怎样？</title>
      <link>https://tairan.net/posts/2009-06-21-what-is-then/</link>
      <pubDate>Sun, 21 Jun 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-06-21-what-is-then/</guid>
      <description>网络上传来的消息一次又一次的刺激着网民，而网民一些行动的结果也同样刺激着脆弱敏感的人民公仆。
我们不能一遍又一遍的骂着操蛋的政府，又一次又一次的被政府剥削。
今天的政府为什么会成为今天的这个样子，我们需要好好的研究这段不算长的历史。
不能只提出问题就闪，这样和那个不负责的政府又有什么两样呢？
未来是我们的，我们应该多作一些实事。多到网下去看看，现在的人民的生活情况，什么是他们最需要的。整天面对虚假的媒体轰炸，你还会认为你的判断是正确的吗？ 毛主席说的对，没有调查就没有发言权。在没有得到信息的可靠的情况下，跟着起哄那你就是不明真相的群众。
我认为我们可以做的，</description>
    </item>
    
    <item>
      <title>这是一个操蛋的时代</title>
      <link>https://tairan.net/posts/2009-06-20-caodan/</link>
      <pubDate>Sat, 20 Jun 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-06-20-caodan/</guid>
      <description>都30岁的人了，还被当成花季少年给绿坝护航了。
有一份还不错的工作却还为温饱发愁。</description>
    </item>
    
    <item>
      <title>说一说那些迟早的事</title>
      <link>https://tairan.net/posts/2009-06-18-chitchat/</link>
      <pubDate>Thu, 18 Jun 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-06-18-chitchat/</guid>
      <description>坊间流传着一段关于吃饭的笑话： 常与领导吃饭,升官是迟早的事;常与大款吃饭,发财是迟早的事;常与老婆吃饭,厌倦是迟早的事;常与情人吃饭,肾虚是迟早的事;常与异性吃饭,上床是迟早的事。
说这是笑话也不尽然，里面是有很多故事的，咱闲聊调侃一下。
常与领导吃饭,升官是迟早的事; 咱们国人在公事上好面子羞于出头是大家所共知的，而领导要了解了对方才好提拔不是？在公司里不好表白，咱就私下里说吧，吃饭就是一个很好的借口，三五杯小酒下了肚就是自己人了。吃饭也不是非要正式邀请才行，在公司里，中午的工作餐也是一个不错的和领导吃饭的机会。
常与大款吃饭,发财是迟早的事; 陈安之的成功学里就讲了一个故事，一个百万富翁问一个千万富翁怎么才能和他一样有钱？千万富翁就说他的朋友都是亿万富翁。常跟比你有钱的人在一起，他们会告诉你如何能赚到更多的钱。所以，想成为什么样的人，就先交什么样的朋友吧。
常与老婆吃饭,厌倦是迟早的事; 这个是老生常谈了，我老婆看到这个绝对会拎着我的耳朵问是不是厌倦了？ 以前我也许会，而现在不会了。两个人在一起要学会发现对方的好，偶尔心情觉得不好的时候，两人可以保持点距离。模糊下视线，对方的吸引力就又回来了。
常与情人吃饭,肾虚是迟早的事; 有情人，首先要有过硬的身板才行。成年男女在一起免不了要上床嘿咻，身板不硬朗，你的老婆也许就是别人的情人了。
常与异性吃饭,上床是迟早的事。 这条绝对是单身男女的求偶必备之教条。如今谈诗词歌赋是把不到妹的啦，选择请客吃饭绝对是个好主意，吃饭时打开对方心扉，吃完后散散步、牵牵手水到渠成，既浪漫也不太过轻浮。说这条是教条，那就不要犯教条主义，灵活运用才能祝你成功。</description>
    </item>
    
    <item>
      <title>王者归来</title>
      <link>https://tairan.net/posts/2009-06-17-the-return-of-the-king/</link>
      <pubDate>Wed, 17 Jun 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-06-17-the-return-of-the-king/</guid>
      <description>沉寂了近两个月，Tairan&amp;rsquo;s Story 又回来了。 以前经常关注小站的朋友问这些日子都干什么去了，网站无法访问。细心的朋友已然知道，因为每当访问小站的时候，看到的是硕大的让我备案的页面。如今回来，也正因为领取了备案部门的良民证才得以重见天日。 这就是我的良民证编号： 沪ICP备09041650号，以后大家会经常的在网页的下角看到这一边号，若是有一天你发现我的良民证消失了，那么我应该是去解放邪恶的资本主义国家了。
这些被屏蔽的日子里，我并没有积极的配合有关部门来解决网站被停的问题。 这样做有两个方面的原因，一是我在备案网站填写一番真情的倾诉和忏悔后至今没有得到任何的同情和响应；另外就是这段时间我也没有多少写作的材料，前段时间忙于工作，近日忙于阅读。以后和大家慢慢的分享自己的一些阅读成果。
通过这次漫长的备案也管窥了一下天朝的备案流程。一般来讲依托一个有实力的公司来备案速度是相当快的，绝对是次日即达的快递速度。如果你不幸把网站托管到了一个小作坊式的公司就要看你的运气如何了。我猜测备案系统的结构是这样的。大家所共知的那个备案网站除了收集你提交的数据就没有什么用处了（对于备案者）。备案系统根据备案者填写的资料，主要网站主所在地址来分发给各个地区的分管部门。由分管部门来核实信息，核实的信息以主机托管商为主，也许就只是核实主机托管商的信息，为方便出现问题时拔网线顺带敲诈一番，因为主机托管商那里放的是物理的机器，如果想跑也至少要付出遗弃这些设备为代价。在主机托管商核实的阶段如果出了问题，那么申请备案者还可以拨打本地区备案主管部门的电话，让他们帮你删除以前填写的信息重新选一个主机托管商再备案。&amp;ndash; 可见核实主机托管商这一环是多么的重要。网站备案的网站绝对是强势的信息录入系统，信息只进不出。如果信息填写错误，除了打电话求救外是没有其他办法去更改或删除的。这个也是小站备案时间如此之长原因。说来也怪自己，填写信息时一定要慎重，慎重，再慎重，政府要对如此之多的网站进行备案，万不可再给政府增加额外的负担了。
无论如何，网站还是回来了，可以重新见人了。既然网站又得以见人，也要有些新的面貌示人。最近读了很多人文方面的书，回忆录、自传等，读了以后自己颇多思考，以后就把自己思考的写出来和大家共同探讨。最初建站时我是想写技术一类的文章，当开始写的时候发现写教程指南太烦，况且Google上已经有太多没有必要；写架构、技术分析等自己的料又太少。今后如果要写技术也写一些自己的体会吧，所以想在本站找现成示例的朋友可能就要失望了。</description>
    </item>
    
    <item>
      <title>Install VMware Server 2.0 on Slackware 12.2</title>
      <link>https://tairan.net/posts/2009-05-06-vmware-server-on-slackware/</link>
      <pubDate>Wed, 06 May 2009 00:00:01 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-05-06-vmware-server-on-slackware/</guid>
      <description>在 Slackware 12. 2 上安装 VMware Server 2.0 后，总是提示 Login failed due to a bad username or password
解决办法： 到 http://linuxpackages.net/ 去下载 Linux-PAM 我用的是 Linux-PAM 1.0.4 i486
 # &amp;lt;strong&amp;gt;installpkg linux-pam-*.tgz&amp;lt;/strong&amp;gt;  安装linux-pam后，重新安装 VMware Server 2.0 即可！</description>
    </item>
    
    <item>
      <title>优盘上的软件</title>
      <link>https://tairan.net/posts/2009-05-06-portable-applications/</link>
      <pubDate>Wed, 06 May 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-05-06-portable-applications/</guid>
      <description>每个人都有自己使用电脑的习惯，一些常用的设置，常用的工具等。可有时不能在自己熟悉的环境中工作，如临时给菜鸟帮忙等。此时如果有一些软件放在优盘中随身带着就方便很多。
现在，就有人把很多软件改造成可以装安装在优盘上的版本，这个网站http://portableapps.com，就是专门负责这事的。
很多开源的优秀软件，如 7zip, OpenOffice, WinMerge, Notepad++， Firefox, Filezilla 等都已经加入到这个队伍中，涵盖了开发，游戏，画图，教学，网络，多媒体等多个方面。
正是开源让软件世界便的多姿多彩。
除了这些软件，Python 也有可以安装在优盘上的版本。http://www.portablepython.com</description>
    </item>
    
    <item>
      <title>揭开&#34;同学聚会&#34;所谓的真实面目</title>
      <link>https://tairan.net/posts/2009-04-29-the-mask/</link>
      <pubDate>Wed, 29 Apr 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-04-29-the-mask/</guid>
      <description>【转】揭开&amp;rdquo;同学聚会&amp;rdquo;所谓的真实面目 http://timnew.posterous.com/untitled-41610
有钱有势，混得很得意的同学巴不得的天天同学聚会，在精神上压倒男同学，在肉体上征服女同学，将同学时期的意淫变成现实。而比较落魄的同学则害怕同学会上见面，精神上受到摧残不说，还要作为得意同学炫耀财势的一个用来作比较的道具，心里也许还有个小小的奢望，那就是那些混得好的同学能不能帮上自己一把，其实这是幻想，那些混得好的同学之所以乐衷于开同学会，就是来看你现在的落魄和女同学们的艳羡的!!而同学聚会只不过是又一次的表演罢了。
1、 同学聚会的首义者以外地归来者居多，往往已经混得有几分人样。多年衣锦夜行，憋屈得厉害，这回当然在同窗前显摆显摆。他希望来的人越多越好，聚会前夜说不定还要精读《毛主席回韶山》。
2、 当年有些姿色的女生这回一定会脸上精描细抹，衣柜里千挑万选。如果是提前知道消息的，铁定还要饿上几天，争取能穿进那件卡腰的高级套裙。
3、 抢着买单的那位多半当年穷得叮当响，或者成绩不佳。他要告诉大家，象我这样的也是可以混出来的，你们不要老眼光看人。他一定是开车来的。好车。并且他一定很愿意送每一位同学回家，一副情深义重不忘旧谊的样子。
4、 话少的同学并不是老成持重，而是因为经历平淡且混得不好。大家谈论的新潮名词或根本不懂，或掌握不熟练。怕说错了出丑，便索性不开牙。
5、 有富不显，有车不开，有单不抢。这种人多半当年就很风光，经过了也就不在乎了。当然也有当年就很糗，现在还能不动声色的。这类人比较可怕，要么城府很深，能成大事。要么虚伪狡诈，品质可疑。
6、 带老婆出席的有两种情况：一是老婆长得比较争气，带出来有面子。二是老婆担心他跟旧相好的擦出什么火花，一同出席能起警卫和监督之效。出门之前，必要叮嘱老婆几句：“平时怎么糟践我都没关系，但这次一定要给我留面子，我说话别插，不许瞪眼，记得要给我盛饭，递杯子……”
7、 去了趟美国的一定会找机会说出来，谈资本，谈纽约，最后来一句：“其实也就那样。”这边赶紧接茬谈起欧洲八国游，谈人文，谈艺术。那边去过澳洲的插不上话，急得抓耳挠腮。这时你要是能淡淡地来一句：“不才在伦敦呆了八年。”保管当场鸦雀无 声。
8、 当了官的接手机绝不肯离席，拿着电话指挥秘书或部属开展工作，声音不大但是足以保证在座的都能听到。语气较平时蛮横且坚决，表情略显威严且带一丝厌倦，一副运筹帷幄很懂管理的样子。
9、 官当得太大的人不会轻易参加同学聚会。
同学聚会,心眼多的钻被窝,心眼少的在唠嗑,不多不少在乱摸,一个心眼的在唱歌,缺心眼的往死喝！！：（</description>
    </item>
    
    <item>
      <title>向下兼容</title>
      <link>https://tairan.net/posts/2009-04-24-downward-compatible/</link>
      <pubDate>Fri, 24 Apr 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-04-24-downward-compatible/</guid>
      <description>向下兼容是好是坏？
传说Microsoft就是因为良好的向下兼容的作风赢得了今天的市场。可有些时候，向下兼容会带来很多的包袱。
这几天一直在为安装操作系统的事情发愁。这也是我聊向下兼容的起因。
最近买了一套服务器，配置如下：（终于用上XEON了 ^_^） ASUS P5BV-E INTEL XEON E3110 KINGSTONE ECC DDR2 2G × 2 Seagate ST3500320SV × 4 Seventeam 500w
冲着提高磁盘I/O的方向，准备做RAID 0。因预算紧张，没有买SCSI/SAS硬盘。 安装操作系统时遇到问题了，因为Windows2003的安装光盘没有集成RAID的驱动程序，在安装操作系统的时候需要按F6来用软盘安装驱动程序。如今网龄稍微年轻的人可能都不曾见到软驱为何物，为啥还要用软驱来装驱动呢？在主板上保留软驱接口是一种向下兼容的行为。也许服务器上也还有很多的软驱存在，也许品牌服务器上还提供软驱。
硬件提供商们能不能给个可选的方案，比如用光盘或者U盘来安装RAID驱动？
没有软驱，我开始找另一种解决方案：自己集成带RAID驱动的系统安装光盘。 做Windows 2003的集成光盘，一般都是采用配置OEM信息。手工集成OEM信息虽然简单，资料也多，但是毕竟手工容易出错。好在广大的程序员提供了好用的基于UI操作的集成工具 nlite 就是用来集成Windows 2003的好工具。如果要集成 VISTA 那么可以使用 vlite。在寻找集成工具的同时，我还发现一个好东西，就是下载操作系统更新补丁的工具，使用这个工具可以把操作系统历史的更新补丁下载到本地，然后配合 nlite/vlite 将补丁集成到安装光盘中。服务器嘛，安全第一！
安装好操作系统，还要安装其他的驱动程序如网卡。当我把主板带的驱动光盘插入光驱后，一度让我以为是光驱坏掉了。其实我的光驱是一个CD-ROM，而驱动光盘是DVD，为什么要用DVD作为驱动载体发布呢？是因为数据量太大？我自己检查了一下，光盘中的数据才400多M！此时我又在想，为什么不考虑一下向下兼容呢？明明没有那么的数据，非要用个DVD来装，真不成DVD光驱比U盘的普及度还高？
向下兼容/不兼容？是好是坏呢？这个还是要看市场，看大家有没有这个的需要！Python 3.0 就是迈出了不向下兼容的一步，是好是坏，让时间来说明吧。
PS：这次买的硬盘，有一块中奖了。4块硬盘中开包的第一块硬盘就中奖了&amp;ndash;坏的！我担心其他硬盘也有问题，就用 Linux 上的 badblocks 检查到半夜！淘宝上的卖家服务态度不错，硬盘已经发回去了。下周一就回到手里了。</description>
    </item>
    
    <item>
      <title>100本名著浓缩成100句话</title>
      <link>https://tairan.net/posts/2009-04-20-100books-to-100saying/</link>
      <pubDate>Mon, 20 Apr 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-04-20-100books-to-100saying/</guid>
      <description>1．神要是公然去跟人作对，那是任何人都难以对付的。 (《荷马史诗》) 2．生存还是毁灭，这是一个值得思考的问题。 (《哈姆霄特》) 3．善良人在追求中纵然迷惘，却终将意识到有一条正途。(《浮士德》)
4．认识自己的无知是认识世界的最可靠的方法。 (《随笔集》) 5．你以为我贫穷、相貌平平就没有感情吗?我向你发誓，如果上帝赋予我财富和美貌，我会让你无法离开我，就像我现在无法离开你一样。虽然上帝没有这么做，可我们在精神上依然是平等的。(《简.爱》) 6．大人都学坏了，上帝正考验他们呢，你还没有受考验，你应当照着孩子的想法生活。 (《童年》)
7，你越没有心肝，就越高升得快，你毫不留情地打击人家，人家就怕你。只能把男男女女当作驿马，把它们骑得筋疲力尽，到了站上丢下来，这样你就能达到欲望的最高峰。 (《高老头》) 8．我只想证明一件事，就是，那时魔鬼引诱我，后来又告诉我，说我没有权利走那条路，因为我不过是个虱子，和所有其余的人一样。 (《罪与罚》) 9．你瞧，桑丘.潘沙朋友，那边出现了三十多个大得出奇的巨人。 (《堂.吉诃德》)
10．我并不愿意你受的苦比我受的还大，希斯克利夫。我只愿我们永远不分离：如果我有一句话使你今后难过，想想我在地下也感到一样的难过，看在我自己的份上，饶恕我吧! (《呼啸山庄》) 11．幸福的家庭是相同的，不幸的家庭各有各的不同。 (《安娜.卡列尼娜》) 12．唉，奴隶般的意大利，你哀痛之逆旅，你这暴风雨中没有舵手的孤舟，你不再是各省的主妇，而是妓院! (《神曲》) 13．将感情埋藏得太深有时是件坏事。如果一个女人掩饰了对自己所爱的男子的感情，她也许就失去了得到他的机会。 (《傲慢与偏见》) 14．钟声又鸣响了……一声又一声，静谧而安详，即使在女人做新娘的那个好月份里，钟声里也总带有秋天的味道。 (《喧嚣与骚动》)
15．一个人并不是生来要被打败的，你尽可以把他消灭掉，可就是打不败他。 (《老人与海》) 16．当然，行是行的，这固然很好，可是千万别闹出什么乱子来啊。 (《套中人》) 17．面包!面包!我们要面包! (《萌芽》)
18．我从没有爱过这世界，它对我也一样。 (《拜伦诗选》) 19．爱情应该给人一种自由感，而不是囚禁感。 (《儿子与情人》) 20．暴风雨将要在那一天，甚至把一些槲树吹倒，一些教堂的高塔要倒塌，一些宫殿也将要动摇! (《海涅诗选》) 21．自己的行为最惹人耻笑的人，却永远是最先去说别人坏话的人。 (《伪君子》)
22．这时一种精神上的感慨油然而生，认为人生是由啜泣、抽噎和微笑组成的，而抽噎占了其中绝大部分。(《欧.亨利短篇小说选》) 23．历史喜爱英勇豪迈的事迹，同时也谴责这种事迹所造成的后果。 (《神秘岛》) 24． 整个下半天，人都听凭羊脂球去思索。不过本来一直称呼她作“夫人”，现在却简单地称呼她作“小姐”了，谁也不很知道这是为着什么，仿佛她从前在评价当中爬 到了某种地位，现在呢，人都想把她从那种地位拉下一级似的，使她明白自己的地位是尚叩摹?(《莫泊桑短篇小说选》)
25．如果冬天来了，春天还会远吗? (《雪莱诗选》) 26．我明白了，我已经找到了存在的答案，我恶心的答案，我整个生命的答案。其实，我所理解的一切事物都可以归结为荒诞这个根本的东西。(《恶心》) 27．世界上有这样一些幸福的人，他们把自己的痛苦化作他人的幸福，他们挥泪埋葬了自己在尘世间的希望，它却变成了种子，长出鲜花和香膏，为孤苦伶仃的苦命人医治创伤。(《汤姆叔叔的小屋》) 28．当格里高.萨姆莎从烦躁不安的梦中醒来时，发现他在床上变成了一个巨大的跳蚤。(《变形记》) 29．当现实折过来严丝合缝地贴在我们长期的梦想上时，它盖住了梦想，与它混为一体，如同两个同样的图形重叠起来合而为一一样。(《追忆似水年华》) 30．人与人之间，最可痛心的事莫过于在你认为理应获得善意和友谊的地方，却遭受了烦扰和损害。(《巨人传》)
31．现在我说的您要特别注意听：在别人心中存在的人，就是这个人的灵魂。这才是您本身，才是您的意识在一生当中赖以呼吸、营养以至陶醉的东西，这也就是您的灵魂、您的不朽和存在于别人身上的您的生命。(《日瓦戈医生》) 32．美德犹如名香，经燃烧或压榨而其香愈烈，盖幸运最能显露恶德而厄运最能显露美德。(《培根论说文集》) 33．亲爱的艾妮斯，我出国，为了爱你，我留在国外，为了爱你，我回国，也是为了爱你!(《大卫.科波菲尔》) 34．强迫经常使热恋的人更加铁心，而从来不能叫他们回心转意。(《阴谋与爱情》) 35．在各种事物的常理中，爱情是无法改变和阻挡的，因为就本性而言，爱只会自行消亡，任何计谋都难以使它逆转。(《十日谈》) 36．只要你是天鹅蛋，就是生在养鸡场里也没有什么关系。(《安徒生童话》) 37．就投机钻营来说，世故的价值永远是无可比拟的。(《死魂灵》) 38. 谁都可能出个错儿，你在一件事情上越琢磨得多就越容易出错。(《好兵帅克历险记》)
39．我们经历着生活中突然降临的一切，毫无防备，就像演员进入初排。如果生活中的第一次彩排便是生活本身，那生活有什么价值呢?(《生命中不能承受之轻》) 40．他发现了人类行为的一大法则，自己还不知道——那就是，为了要使一个大人或小孩极想干某样事情，只需要设法把那件事情弄得不易到手就行了。(《汤姆.索亚历险记》)
41．对有信仰的人，死是永生之门。(《失乐园》) 42．有一个传说，说的是有那么一只鸟儿，它一生只唱一次，那歌声比世上所有一切生灵的歌声都更加优美动听。(《荆棘鸟》) 43．离开一辈子后，他又回到了自己出生的那片土地上。从小到大，他一直是那个地方的目击者。(《尤利西斯》)
44．同上帝保持联系是一码事，他们都赞同这一点，但让上帝一天二十四小时都待在身边就是另一码事了。(《第二十二条军规》) 45．在甜蜜的梦乡里，人人都是平等的，但是当太阳升起，生存的斗争重新开始时，人与人之间又是多么的不平等。(《总统先生》) 46．开发人类智力的矿藏是少不了要由患难来促成的。(《基度山伯爵》)</description>
    </item>
    
    <item>
      <title>Windows Live Admin Center</title>
      <link>https://tairan.net/posts/2009-04-19-windows-live-admin-center/</link>
      <pubDate>Sun, 19 Apr 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-04-19-windows-live-admin-center/</guid>
      <description>在今天的经济危机中，微软能给我们带来什么省钱的方案呢？对于中小企业来说，微软的Windows Live Admin Center （ Windows Live 管理中心）绝对是个好东西！我给他五颗星的评价！
Windows Live 管理中心 是个什么东西呢？ 简单来说就是让微软的Hotmail来为你的域名提供免费的电子邮件托管服务。（也就是企业邮局啦）
如今的电子商务时代，如果公司的名片上印的电子邮箱地址是（@163.com, @126.com, @yahoo.com.cn）都有点不好意思拿出去，于是开始上马企业邮局。企业邮局如果自己维护，除了价格不菲外（硬件，软件，托管费），还有很多技术上的问题要处理。这样的话还要加个人来负责维护等等，反正开销不少。如果直接购买别人的企业邮局，可总觉得不太放心，毕竟现在国内过硬的企业邮局提供商还是很少的。
Windows Live 管理中心的前身是 Custom Domains。这个服务其实已经推出了有很长一段时间了。只是之前收发邮件总要登录到hotmail网站上，很不方便。现在配合 Live Mail 就可以直接在客户端访问，这样显得更专业了。:)
下面简单的介绍下，如何使用 Live Mail + Windows Live Admin Center 来创建自己的企业邮局
要求，用户要有自己的国际域名和一个Windows Live ID（能登陆hotmail的帐号）。
进入到 Windows Live 管理中心 http://domains.live.com/?mkt=zh-cn 并使用自己的 Windows Live ID 登录，然后按照提示一步步做。 其中 增加 DNS 记录类型: MX 需要在你的域名管理界面操作。在域名管理界面中叫 邮件交换记录 (MX)
在使用Live Mail收发邮件之前，需要注意的是。由于当前使用的自己域名为后缀的邮箱如@tairan.net 那么增加帐号时并不能自动的为你选择Hotmail。你可以先把自己的邮箱后缀修改成 @hotmail.com，注册完帐号后，在修改回来，然后就可以使用 Live Mail 收发自己域名的邮件了。或者在注册时选择HTTP协议的邮箱，在服务器地址一栏填上 http://mail.services.live.com/DeltaSync_v2.0.0/sync.aspx 也可以达到相同的目的。
现在去享受难得微软提供的免费的好服务吧！如果在使用过程中有什么疑问，记得留言哦！</description>
    </item>
    
    <item>
      <title>小规模低性能低流量网站设计原则</title>
      <link>https://tairan.net/posts/2009-04-18-small-site-arch/</link>
      <pubDate>Sat, 18 Apr 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-04-18-small-site-arch/</guid>
      <description>小规模低性能低流量网站设计原则 作者: Fenng
到处都是什么大规模啊，高流量啊，高性能之类的网站架构设计，这类文章一是满足人们好奇心，但看过之后也就看过了，实际收益可能并不大；另外一个副作用是容易让人心潮澎湃，没学走先学跑，在很多条件仍不具备的情况下，过度设计、过度扩展(高德纳大爷也说过，&#34;过早优化是万恶之源&#34;)，所以，这里反弹琵琶，讨论一下小规模、低性能、低流量的网站该如何搞法。 如果站点起步阶段可能就是一台机器(或是一台虚拟机，比如 JobsDigg.com )，这个时候，去关注什么数据拆分啊，负载均衡啊，都是没影子的事情。很多大站点的经验绝不能照搬，辩证的参考才是硬道理。 拥抱熟知的技术 动手构建站点的时候，不要到处去问别人该用什么，什么熟悉用什么，如果用自己不擅长的技术手段来写网站，等你写完，黄花菜可能都凉了。所以，有现成的软件组件可用，就不要自己重新发明轮子。人家说 Python 牛，但自己只懂 PHP ，那就 PHP 好了，如果熟悉 .net ?，那也不错。用烂技术不是丢人的事情，把好技术用烂才丢人。 架构层次清晰化 起步的阶段应该清楚的确定下来架构的层次。如果都搅和在一起，业务一旦扩增开来，如果原有的一堆东西拆不开就是非常痛苦的事情。 Web Server  (AppServer)Cache(eg. Memcached)DB层次清晰化的一个体现是(以 LAMP 架构为例)：即使只有一台机器，也应该起个 Memcached 的实例，效果的确非常好--一般人儿我不告诉他...不要把什么都压到 DB 上，DB 一旦 I/O 压力走到磁盘上，问题要暴露出来是很快的。没错，DB 本身也会利用自己的 Cache，但 DB 的Cache 和 Memcached 设计出发点毕竟不一样。 数据冗余? 有必要 很多人并不是数据库设计专家，如果应用要自己设计表结构什么的，基本都是临时抱佛脚，但三个范式很多人倒是记得牢，这是大多数小型 Web 站点遇到的一个头疼事儿，一个小小的应用搞了几十个表... 忘掉范式这个玩意儿! 记住，尽可能的冗余数据，你在数据层陷入的时间越多，你在产品上投入的就会越少。用户更关心的是产品的设计。 前端优化很重要 因为流量低，访客可能也不多，这时候值得注意的是页面不要太大，多数流量低的站点吃亏就在于一个页面动辄几兆(我前两天看到一个Startup的首页有4M之大,可谓惊人)，用户看个页面半分钟都打不开，你说咋发展? 先把基本的条件满足，再去研究前端优化。 功能增加要谨慎 不是有个 80/20 原则么? 把最重要的精力放在最能给你带来商业价值的地方。有些花里胡哨的功能带来很大的开销，反而收效甚微。记住，小站点，最有价值的是业务模式，而不是你的技术有多牛。技术是为业务服务的，不要炫技。 有些网站不停的添加功能，恰恰是把这些新功能变成了压死自己的稻草。 从开始考虑性能 这一点是可选的，但也重要。设计应用的时候在开始就应考虑 Profile 这件事情。一套应用能否在后期进行有效优化和扩展，很大的程度限制在是否有比较合适的 Profile 机制上。需要补充的是，对性能的考虑必然要把有关的历史数据考虑进来。另请参见网站运维之道的容量规划以及其它小帖子。 好架构不是设计出来的 这是最后要补充的一点。好的架构和最初的设计有关系，但最重要的是发展中的演化： 发展--发现问题--反馈--解决问题(执行力)-- 改进-进化到下一阶段--新问题出现(循环)有些站点到了某个阶段停足不前，可能卡在执行力这个地方，来自用户的反馈意见上来了之后，没有驱动力去做改进。最后也是死猪不怕开水烫了。最怕听到的就是&#34;业务不允许&#34;的托词，试想如果不改进业务都没了，那业务还允许么? 其实就是一层心理障碍。 这篇文章有浓重的山寨风格，所以，你不要太认真。如果在用短、平、快的方式构建某些山寨网站的话，可参考其中对你有益的点，不赞同的地方可以直接忽视掉，就没必要费力留言进行争论了。 --EOF-- •好的业务模式(产品) + 很好的技术 = 大赚钱 •好的业务模式(产品) + 能用的技术 = 也赚钱 •差的业务模式(产品) + 好的技术 = 赚吆喝(现在的SNS就差不多这样了) •差的业务模式(产品) + 差的技术 = 自己浪费资源 </description>
    </item>
    
    <item>
      <title>女强人真可怜</title>
      <link>https://tairan.net/posts/2009-04-17-dragon-lady/</link>
      <pubDate>Fri, 17 Apr 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-04-17-dragon-lady/</guid>
      <description>最近《魔兽世界》代理权易手的事情闹的沸沸扬扬。九城CEO陈晓薇因丢掉代理权而遭到各方的奚落。
有人调侃说： [caption id=&amp;ldquo;attachment_293&amp;rdquo; align=&amp;ldquo;alignnone&amp;rdquo; width=&amp;ldquo;350&amp;rdquo;][/caption] 注意下支持率。截止时间为2009/05/17 19:34
甚至还有人为女性不适合作为CEO找到了理论根据。参见：女高管没“远见”？
这不禁让我想起HP前CEO Carly Fiorina 更多
我觉得男人就应该做男人的事情，女人也应该做女人的事情。男人不能都成了奶油，女人也不都是李宇春。试问，男人你够man吗？女人你够女人吗？</description>
    </item>
    
    <item>
      <title>The Linux initating order</title>
      <link>https://tairan.net/posts/2009-03-30-the-linux-initating-order/</link>
      <pubDate>Mon, 30 Mar 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-03-30-the-linux-initating-order/</guid>
      <description>Linux 启动顺序 转自 http://blog.csdn.net/Tcrazyalways/archive/2008/11/27/3391243.aspx
了解了Linux的启动顺序有利于在系统启动时enable/disable各种系统服务
 Linux 启动顺序： 1、 BIOS自检 2、 运行系统内核并检测硬件 3、 运行系统的第一个进程init 4、 init读取系统引导配置文件/etc/inittab中的信息进行初始化 /etc/rc.d/rc.sysinit------系统初始化脚本 /etc/rc.d/rcX.d/[KS]*------根据运行级别配置服务 /etc/rc.d/rc.local---------执行本地特殊配置 其它---------不同运行级别的特殊服务 Linux启动运行init程序来启动相关程序初始化，与启动相关的一个概念是运行级，运行级是操作系统当前运行的级别，在不同运行级别上可以定义属于该运行级的启动程序，系统的运行级别可以在/etc/inittab文件指定，与运行级相关运行程序通过从源/etc/rc.d/init.d下链接到目的/etc/rcX.d，这里X为系统的默认运行级别，因此，默认的启动脚本放在/etc/rc.d/init.d下。 # 缺省的运行级，Linux用到的级别如下： # 0 - 停机（千万不要把initdefault 设置为0 ） # 1 - 单用户模式 # 2 - 多用户，但是没有 NFS # 3 - 完全多用户模式 # 4 - 没有用到 # 5 - X11 # 6 - 重新启动 （千万不要把initdefault 设置为6 ） # 对各个运行级的详细解释： 0 为停机，机器关闭。 1 为单用户模式，就像Win9x 下的安全模式类似。 2 为多用户模式，但是没有NFS 支持。 3 为完整的多用户模式，是标准的运行级。 4 一般不用，在一些特殊情况下可以用它来做一些事情。 例如在笔记本电脑的电池用尽时，可以切换到这个模式来做一些设置。 5 就是 X11 ，进到 X Window 系统了。 6 为重启，运行 init 6 机器就会重启。 如何让系统在启动是运行指定程序，根据启动顺序中的第四步，有两种方式。 一种方式是根据运行级别配置服务。 一种方式是执行本地特殊配置。 举例，任务在启动是运行命令cvslockd： 方式一： 1.</description>
    </item>
    
    <item>
      <title>The Game!</title>
      <link>https://tairan.net/posts/2009-03-21-the-game/</link>
      <pubDate>Sat, 21 Mar 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-03-21-the-game/</guid>
      <description>Just for fun!</description>
    </item>
    
    <item>
      <title>中国民众为什么不以偷税为耻？</title>
      <link>https://tairan.net/posts/2009-03-19-revenue-in-china/</link>
      <pubDate>Thu, 19 Mar 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-03-19-revenue-in-china/</guid>
      <description>原来除了每个月上缴的个税外，我们还通过各种渠道来纳税。不知道其他人如何，我倒是觉得缴税像被旧时恶吏抢劫一样！ 以下内容为【转载】，请读者保持自己的主观判断力！
自1995年以来，我国税收连续12年平均增长20%，而GDP平均每年增长却不到10%。全国城乡居民的收入增长，更低于GDP的增长率。 2008年，全球性的金融危机使许多民营企业经营不善，有的甚至陷入困境而亏损倒闭。不少城乡居民下岗，失去了收入来源。而截止到2008年7月，全国财政收入依然比2007年增长了26%。 我们为什么要向政府交税？政府为何要收税？中国的税负重不重？对如此快速增长的税收的使用，中国公民能不能监督，如何监督？ 去年底以来，北京的NGO——传知行社会经济研究所编写了《2008公民税权手册》一书，从税收的本质和来源入手，向公民进行“税”的普及，并探讨目前中国税收体制存在的问题。 《人物周刊》就此采访了该书主编岑科。 受访人 岑科（研究员） 采访人 实习记者 陈小瑾 1 我们习惯说“中国政府养活了13亿人口”，而你这本书则希望所有人有一个意识：是我们交的税养活了政府。为什么？ 岑科：税的本质，是民众购买政府（人员）服务的费用，体现的是政府和民众的一种交易关系。当然，在历史上——包括今天的世界，某些国家的政府和民众之间确实不是交易关系，而是某种程度的掠夺与被掠夺关系。但那不是正常的税收关系。 在现代文明社会，政府的角色是向民众征收税款，同时负责提供一系列公共物品和公共服务——如公路、街道、路灯、治安、消防、环保等等。本质上，这是一种交易。 2 一般中国人理解个人所得税是交税，其实这笔税收只占中国税收总额的10%不到，我们还交了哪些税？ 岑科：在中国，所有商品标价实行的是含税价，价格中包括了国家征收的税金——可能是增值税、消费税、营业税，也可能是城建税和教育费附加等。所以无论是谁，每买一件商品就在向政府交一次税。例如如果花100元买瓶化妆品，其中除14.53元的增值税外，还包含25.64元的消费税和4.02元的城建税。 此外，人们在生活中的其他场合也可能交税。例如，当你的工资收入超出一定标准，要交个人所得税；如果你买车，要交车辆购置税、车船税；如果你买房、卖房，要交相关的契税、印花税，也可能交营业税、个人所得税和土地增值税；如果你办企业，从事生产经营活动，涉及的税就更多，包括增值税、消费税、营业税、资源税、城建税、房产税、城镇土地使用税等。可以说，在生活中的每一天、每一个角落，税收无处不在。人人都是纳税人。 3 “税负的痛苦取决于政府如何使用税收，而不是税率”，这句话如何理解？ 岑科：发达国家中有高税国家，比如瑞典，税收占GDP的51%；也有低税国家，比如美国，税收占GDP的27%。但无论是高税还是低税，他们税收的主要用途都是社会保障、教育、医疗保健和公共服务。这些功能一般占税收总额的70%-80%。而政府成本相对较少。 中国正相反，这些支出的比例只占税收总额的25%，大量税收被政府自身消耗了。 在全国政协大会上，九三学社中央副主席、浙江大学教授冯培恩委员列举了公务用车消费、公款吃喝消费、公费出国消费、政府会议消费、“政绩工程”和办公楼建设消费、能源和资源消费等六种政府消费行为，例如公务用车方面，他调查认为我国目前大约有400万辆公车，每年消耗超过2000多亿元，其中真正用于公务的约占1/3；公费出国、公款吃喝每年各不少于2000个亿，至少吃掉一个三峡工程。 4 和这些高税率发达国家相比，中国的税收只占GDP的20%，为什么人们却怨声载道？ 岑科：发达国家名义税率高，实际税率低，因为公民纳税后享受的教育、医疗、社会保险水平很高，相当于交的税得到了返还。中国正好相反，老百姓纳税之后，政府提供的福利很少，很多人看不起病、上不起学，缺乏生活保障，所以，名义税负低，但是实际税负很高。 瑞典、丹麦和法国等国家的财政支出中，社会保障、教育、医疗保健和一般公共服务是花钱最多的4项，共占去全部支出的近80%。尤其是社会保障，在这 3个国家的财政支出中都占到42%以上的比例；而教育、医疗支出，合计起来也都占到总支出的25%以上。这意味着民众的社会福利保障非常高。把社保、教育、医疗、环保等公共事务支出加起来，占到了瑞典等国财政支出的绝大部分。 中国的9亿农民，基本没有医疗保障。医院的条件越来越好，但收费也越来越高，许多农民因此看不起病。教育方面，年年有考上大学却因缴不起学费而无缘读书的报道。中国有上千万的失业者，得到失业救济的微乎其微……与发达国家相比，中国民众享受的公共福利很少。 5 书中阐释了一些概念比如“明税”（就是法律规定由税务部门征收的税款）、“暗税”（就是政府在税务部门之外，通过其他渠道向老百姓取得的收入，例如各种罚款、收费）等，在中国，除了税收以外，政府还有哪些其他收入？ 岑科：主要还有行政收费、土地出让收益、垄断行业收入等。 根据2005年经济普查，中国的行政收费中，工商、质监、城管、消防、交通5个部门，加上法院，共收取费用9724亿。全体政府部门大约收取行政费用12500亿。 除了行政收费以外，中国的地方政府还有一个重大的预算外收入，就是土地。根据国土资源部统计，2006年全国的土地出让金约为7700亿，与土地出让价格相比，农民的土地补偿金额大约只有10%。政府净收益7000亿。 在正常税收之外，政府还掌握了一些垄断企业，包括电信、石油、金融等。这些垄断企业通过政府保护的垄断地位而获得巨额利润。我们估计其数额在2000亿元以上。 各种暗税加起来，足以让中国的名义税负增加10个百分点。 6 2009年全国公务员考试报名者多达百万，供需比年年提高，你怎么看待这种公务员报考的火热现象？ 岑科：公务员成为社会就业的热点不是好事。道理很简单：政府不直接创造财富，而企业却是实实在在地创造价值；官员致力于讨好上级，企业家却要讨好消费者。当更多的就业者希望从市场转向政府时，表明这个社会的创业环境正在恶化，生产财富的动力正在衰减。 7 你的书中写到，“如果纳税人对税收使用无法监管，那么纳税并不光荣”。如何理解？我知道其实现实生活里人们的交税意识很弱，常有偷税漏税发生。 岑科：不能监管的税收，严格地说不是“税收”，而是掠夺。被掠夺当然谈不上光荣。 这是由现行税收体制的弊端决定的。现代国家都有一整套的公民授权、监督、运作税收的方案，而中国的税收往往是行政部门主导，制定和征税成为行政部门不可控制的权力。 单方面制定的税收，不可能具有权威性和正当性。只有政府首先依照合法的程序，在纳税人同意的情况下，确定税收的种类和额度，然后才谈得上公民的纳税义务。对于未经合法程序确立的税收，公民本不应有任何纳税的义务，更谈不上什么纳税意识。 对此，人们往往采取消极抵抗的方式，就是尽可能偷税漏税，或者是为了少缴税向有关官员行贿。既然纳税人被强制征税，他们也就普遍不以偷税为耻，也不以行贿为耻。 8　中国公民对税收的审核和监督如何体现？ 岑科：从名义上看，全国人民代表大会是中国的最高国家权力机关，是代表中国人民的民意实体，帮助纳税人监督政府的收支活动，促使政府高效廉洁地为纳税人服务，是它的职责。 到目前为止，我国的各级人民代表大会也对政府财政预算进行审议，但从具体议程看，离“监督政府如何花钱”这一目标相差很远。例如每年开人代会时，代表们审议政府预算的时间最多一天，甚至不到一天；会议公布的预算报告只有几页纸，内容大而化之；具体的预算文本不发给代表，由代表团长掌握；有些地方虽把详细文本发给代表，但会后都要收回；等等。这样的审议，不可能达到了解政府支出状况、提出改进意见的效果。 人民代表大会尚且如此，其他方式能起到多大监督作用呢？ 9　和国外相比，中国的财政支出情况如何？ 岑科：有研究指出，在过去几年中，与美国、法国、瑞典、丹麦等发达国家用于公共福利的财政支出（占总支出的80%到90%）相比，中国财政的公共福利支出非常欠缺（约占总支出的50%）。2003年，美国公共医疗投入占GDP的比重是13.9％，而中国只有4.5%；2005年，我国的公共教育投入占GDP的2.8%，排在世界各国的末尾——比非洲穷国乌干达还低。 在行政开支方面，以2006年为例，中国政府的预算内行政支出占财政总支出的比重为18.73%，远远高于日本的2.38%、英国的4.19%、韩国的5.06%、法国的6.5%、加拿大的7.1%以及美国的9.9%。如果加上预算外支出，有学者估计，中国政府的实际公务支出至少占政府全部支出的 30%以上。 10　中国现行税制体系的弊端有哪些？ 岑科：不经纳税人同意，政府单方面制定税收种类和税收标准，并强制征收，而且不向公众提供对于税收的申诉和抗辩渠道，是目前中国税制最核心的问题，也是所有其他税收问题产生的根源。 在税收立法上，存在着行政法规多、国家立法少，以行政立法取代国家立法的状况，结果是，征税的行政本位突出，没有国家宪法和法律作为依据，使得税收的合法性不足。在实际运作中，有大量“暗税”，其运作过程非常混乱和随意。 这些弊端，导致了严重的后果：第一，政府的征收成本特别高，达到了西方国家平均水平的10倍左右；第二，税收的额外负担很高，对企业、纳税人造成了极大困扰。在税收征管大军的征稽下，大多数企业穷于应付，不得不采取消极抵制的方式与政府周旋；第三，一些暴力执法式征管和变相征管等政府不良行为，恶化了官民关系和社会秩序，对政府形象造成了巨大损害。 （来源：南方人物周刊） </description>
    </item>
    
    <item>
      <title>三十而立</title>
      <link>https://tairan.net/posts/2009-03-17-kongzi/</link>
      <pubDate>Tue, 17 Mar 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-03-17-kongzi/</guid>
      <description>[转载] 孔子的“三十而立” http://www.jcrb.com/n1/jcrb1298/ca603695.htm
己近三十，始志学，未晚矣！
有公司调查称，“三十难立”已成当今社会一种普遍现象。据说，有“４３．１％的人还没有过上自己喜欢的生活，４０．５％的人还没有找到让自己满意的工作，甚至有３８．９％的人还不知道３０岁之后自己要过什么样的生活”。有人则写文章说，“子曰：三十而立，指３０岁之前完成学业、离家居住、结婚生子、经济独立”；慨叹“‘三十而立’这一标准是否还适用于高强度竞争与快节奏的今天”。我想谈谈自己对这个问题的看法。 刚听学生说到这个问题的时候，说真话，我简直大吃一惊。简单地拿孔子说的一句话与今天的青年作比较，而且能得出如此悲观的结论，我不知道这是一种什么样的逻辑。如果“过上自己喜欢的生活”、“找到让自己满意的工作”之类，当真是“三十而立”的“ 标准”，那么，恕我直言，孔丘先生自己根本没有达到这个“标准”。什么叫做“过上自己喜欢的生活”？是当官？还是发财？３０岁的孔子既没有当上什么官，更谈不上发什么财。《孟子·万章下》：“孔子尝为委吏矣，曰，‘会计当而已矣。’尝为乘田矣，曰，‘牛羊茁壮长而已矣。’”张中行《顺生论》认为这是孔子对职业“尽职”的一种态度：“把本职工作做好，于己可以无愧，于社会当然也会有益。”可是后来孔子跳槽了，可见这并不是他“自己喜欢的生活”，也不是他“自己满意的工作”。司马迁《史记·孔子世家》说：“孔子贫且贱。”《论语·子罕》有孔子自己的话，说：“吾少也贱，故多能鄙事。”乃至于多年以后孔丘先生还为自己的经济收入大伤脑筋，《论语·阳货》孔子对子路说“吾岂匏瓜也哉？焉能系而不食”，就是证据。《论语·卫灵公》有孔子的名言：“君子固穷。”可见，终其一生，孔丘先生经济收入始终是个问题。 从社会地位来看，３０岁的孔子依然属于“草根阶层”。他曾经向上流社会靠拢，可是吃了闭门羹。《史记·孔子世家》说：“孔子要绖，季氏飨士，孔子与往。阳虎绌曰：‘季氏飨士，非敢飨子也。’孔子由是退。”狄子奇《孔子编年》谓阳虎此时尚未用事，怀疑此事是否可信。但是，由此可见孔丘先生３０岁之前屡屡遭受歧视和排斥，却是事实。蔡尚思《孔子思想体系》分析说：“一个被人瞧不起的私生子，虽然仰慕礼仪，却没有机会受教育，在母亲死后，忽然得知自己是邑大夫之子，顿时飘飘然起来，听说贵族开那种宴会，才会忘乎所以，凭着少年人容易有的冲动跑去参加，没想到被季孙氏的家臣大大奚落一顿。”这样的痛苦经历，比今天的青年求职时遭遇的歧视和挫折，可怕得多。 然而孔子确实说过“三十而立”。是吹牛吗？恐怕不是。问题出在对“三十而立”的理解上。程树德《论语集释》说：“窃谓立止是学有成就之义。”蔡尚思《孔子思想体系》说得更明白：“‘三十而立’，也就是学有所成。”这个学有所成，不单纯指知识和学问，还包括一个人的人生观、世界观、价值观，包括一个人的人格。南怀瑾《论语别裁》说：“立就是不动，做人做事处世的道理不变了，确定了，这个人生非走这个路子不可。李泽厚《论语今读》说：‘三十而立’，有人强调与‘立于礼’有关，是指人从六岁‘习礼’到三十岁才算完全掌握熟练，但后世注疏多不拘泥于学礼，而泛指人格的成熟，更佳。”因此，他把“三十而立”翻译成白话文“三十岁建立起自我”，颇耐咀嚼。而李长之《孔子的故事》则以孔子的口吻说：“我到了三十岁的时候，仿佛对任何事都有个主意了”，也就更为形象。从这个意义上说，孔子认为自己“三十而立”，恐怕只能说是实事求是。 综合起来看，“三十而立”，就是在完成学业的基础上，确立起一种积极进取的人生态度。这对一个人一生的发展至关重要。把“三十而立”解释为“过上自己喜欢的生活”、“找到让自己满意的工作”之类，是对孔子的歪曲和侮辱，也抹煞了当代青年对理想道德情操的追求。这种肤浅的功利化解读，是浮躁之音，更是对青年的误导，应当引起人们警惕。 </description>
    </item>
    
    <item>
      <title>The IDE is good or evil?</title>
      <link>https://tairan.net/posts/2009-03-14-the-ide-is-good-or-evil/</link>
      <pubDate>Sat, 14 Mar 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-03-14-the-ide-is-good-or-evil/</guid>
      <description>从Java世界的eclipse，netbeans到.NET世界的Visual Studio(VSTS), IDE的很多强大的功能为我们的开发带来了不少的便利，但有时候IDE也给我们带来了很多的烦恼，比如当没有IDE支持的时候，有些人竟然会写不出代码。这到底是IDE好还是坏？
首先可以肯定的一点是 IDE 是用来提高工作效率的。但他不能代替你去思考。所以在使用IDE这些便利的功能时，需要对IDE有一定的认识。
比如 IDE 是通过什么方式来帮我们管理源代码，以及如何知道我们的编译顺序的。 IDE 是根据什么方式来进行智能提示的？ 为什么IDE可以协助我们进行debug？
现在IDE的智能提示很强大，而我们在使用智能提示之前是不是先要清楚每个对象是干什么的？对象里面的方法属性是干嘛的？
如果离开了智能提示，就不知道该怎么写代码，那么即使写出的代码也靠不住。
在学习阶段还是多用文本编辑器(VIM, Notepad++)来写代码，当把程序的各个生命周期(编码，编译，链接，运行等)搞清楚，把所用的语言的各个特性，以及使用相关类库的功能搞清楚再用IDE来帮助你在生产开发时节省体力。</description>
    </item>
    
    <item>
      <title>Cash is King</title>
      <link>https://tairan.net/posts/2009-03-10-the-cash-is-king/</link>
      <pubDate>Tue, 10 Mar 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-03-10-the-cash-is-king/</guid>
      <description>现金为王
读者一篇文章，美国老太太和中国老太太的故事
次贷危机，所谓次贷，就是一些原本买不起房的家庭仍然获得了房贷，买了他们根本买不起的房子，借了过头债。
2005新闻 IT巨头现金储备排行 微软持380亿美元居榜首
如今 &amp;nbsp; 标普500指数最富有公司（非金融类）排名 公司名称现金及现金等价物总额埃克森美孚384亿美元思科技系统
295亿美元辉瑞公司260亿美元苹果公司256亿美元微软207亿美元通用汽车162亿美元谷歌159亿美元美国强生148亿美元惠氏公司142亿美元福特汽车134亿美元IBM129亿美元通用电气123亿美元英特尔118亿美元甲骨文106亿美元Verizon Inc.103亿美元惠普102亿美元
有了现金，可以维持公司的正常运转。个人家庭也是</description>
    </item>
    
    <item>
      <title>Environment</title>
      <link>https://tairan.net/posts/2009-03-09-environment/</link>
      <pubDate>Mon, 09 Mar 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-03-09-environment/</guid>
      <description>环境和人 在周筠博客上看到一篇文章 《梅花香自苦寒来&amp;ndash;真的吗》 ，里面提到作者对“梅花香自苦寒来”一句的疑惑。
本人就拿自己尚浅显的认识来说说自己对环境的一些看法。
有一个古老的话题， 究竟是时世造英雄还是英雄造时世。其实这是一个人和周围环境互相影响的结果。时世和英雄谁也离不开谁。就像大陆出不了李敖一样的道理。
环境是如何影响人的？ 我们从小生活在父母的周围，那么最大的影响就是来自父母以及经常往来的亲戚朋友等。他们的言行举动时刻影响着幼小的孩子，因为孩子刚到这世界，该干什么，不该干什么，并不能分辨，所以言谈举止都在模仿着父母。这也是我们为什么经常看见小孩子说着满口的大人话那样。
俗话说：3岁看小，7岁看老，你是什么样的人，在成年之前就基本定型了。
现代人都知道大脑是用来干什么的，记得有人这样研究过脑袋，人脑细胞的突触不是越连越多，而是越来越少，借此来适应周围的环境，大约在16岁左右就定型了。我想这就是我们适应环境的结果。
环境对我们的影响远不止这些。 当我们进入到学校(包括幼儿园)以后，会认识从各个不同家庭环境背景走出来的同学，当然也少不了“教书育人”的老师。同学们之间因不同的爱好而结交朋友，因为简单的好恶来接纳和排斥一些老师，如此一来把人以群分的现象体现的淋漓尽致。
毕业以后，从家里到学校养成的各种各样的脾性，到工作岗位以后开始传染给别人，同样别人也在传染给自己。经过一段时间的发展，一个团队伴随着接纳更多臭味相投的人加入而壮大起来，就形成了企业文化。
怎样才算好环境 合适的才是好环境，那么不合适的环境就是不好的环境了。
我们该如何找到合适的环境？ 昔孟母三迁，为的就是改善孟子周围的环境。出生在什么样的家庭我们无法选择，上什么样的学校我们不知该如何选择，工作后，逐渐接近而立之年，这时我们应该去选择了。三十而立，不是让你一定有房有车，而是你思想的独立。  近朱者赤，近墨者黑。看看他周围的朋友就知道一个人大致是个什么样的胚子了。
在人们的虚伪的自尊心的影响下，通常会选择比自己差一点的人在一起。这就是我们心中的私欲。坏的东西，一定要去掉！坏的东西一去掉就是好的环境就来了！
让我们从现在起，好善如好好色，恶恶如恶恶臭。不加任何私欲的去遵循心中的良知而行动起来。这是一个简单的道理，大家都知道的道理，区别就是每个人下功夫行动的深浅了。</description>
    </item>
    
    <item>
      <title>Run Trac on Windows used SCGI protocol</title>
      <link>https://tairan.net/posts/2009-03-01-run-trac-on-windows-used-scgi-protocol/</link>
      <pubDate>Sun, 01 Mar 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-03-01-run-trac-on-windows-used-scgi-protocol/</guid>
      <description>相关软件信息
 Windows 2003 Trac 0.11.2.3 Python 2.5.4 Apache 2.0.63 mod_scgi  tracd 以Windows service的方式运行 1. 下载Windows RST 2. 修改注册表
参考: http://trac.edgewall.org/wiki/TracOnWindowsStandalone http://onezstudio.blogspot.com/2006/09/getting-started-with-subversion-trac.html</description>
    </item>
    
    <item>
      <title>QUAKE LIVE™ is now available to the public as an open beta.</title>
      <link>https://tairan.net/posts/2009-02-27-quake-live/</link>
      <pubDate>Fri, 27 Feb 2009 00:00:01 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-02-27-quake-live/</guid>
      <description>你还在玩着那种用鼠标点啊点的网页游戏吗？ 太老土了！看看 id software 给我们带来了什么！
http://www.quakelive.com
Quake Live 开始公测了，这是 Quake3 基于浏览器的版本。 上班族可以利用休息时间好好的放纵一下了，Quake Live对机器配置要求不高，目前支持 Windows + IE or Firefox 组合，其他平台正在开发中。
目前游戏玩家众多，如果进来的时候不巧，那么要经过漫长的排队才能进入游戏。
好像在国内 Quake 的群众基础不如 CS。 不知道在 Quake Live 上能遇到多少国内的玩家。
我实在想知道在技术上他们是怎么实现的？</description>
    </item>
    
    <item>
      <title>Fire And Motion</title>
      <link>https://tairan.net/posts/2009-02-27-fire-and-motion/</link>
      <pubDate>Fri, 27 Feb 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-02-27-fire-and-motion/</guid>
      <description>这是一篇从Joel on Software转载的文章，也许大家在这里能得到一些启示: 中文 英文
行进中开火 作者： 周思博 (Joel Spolsky) 译： Siyan Li 李思延 编辑： Paul May 梅普華 2002年1月6日 时不时，总有一阵儿，我什么事也干不了。 我也去办公厅，东瞄瞄，西看看，每十秒钟查一次电子邮件，网上逛一圈。也许干点儿象付运通卡账单之类不需要大脑的事。不过要回去哗啦哗啦写程序，可没门儿。 这种不出活的状态，一般通常会持续一两天。在我的软件开发生涯中也有过几个星期干不了活的时候。就像他们说的，我不在状态，我进入不了情况，我找不到组织。 人人都有情绪波动，有的人温和一些，有的响动大点儿，也有的可以整个乱套。但不管怎么着，那段不出活期似乎总是跟忧郁有点儿关系。 我不由得联想到那些专家说，人们基本上控制不了自己吃什么。任何节食计划都长不了。大家总是悠回各自的正常体重。也许作为一个软件工程师，我也不能控制什么时候最能出活。我唯一希望的就是发呆那段能被哗哗干活那段扯平，最终还能混碗饭吃。 自从我干上软件开发这一行起，我平均每天只有两三个的高效时间。这真让我头大。我在微软实习的时候，另外一个实习生告诉我，他每天12点上班，5点下班。5个钟头还包括午餐时间，但他的同事还对他特别满意。因为他干的活比一般人都多。其实我也一样。我每天只有两三个小时的高效时间。看着别人那么卖力的干，还有点不好意思。不过呢，我总是组里出活最多的。由此可见，“人件理论”和极限编程都坚持不加班，每周只干40小时，还是有点道理的。他们都清楚这么做不会降低一个小组的生产能力。 每天只能干两小时还没让我太担心，真让我担心的是完全干不了活的那些天。 我老想这是怎么回事儿。我努力回忆我出活最多的时候。估计是微软把我搬到一间漂亮的新办公室的时候。舒适豪华的办公室，窗外风景如画，窗对面樱桃花开满了石头堆砌的庭院。所有的一切都那么恰到好处。我马不停蹄地干好好几个月，一口气把Excel Basic的详细设计搞定。用象纪念碑那么高的一叠纸，详细描素了一个超大型目标模型和编程环境，工作之细致，令人难以置信。我自始至终就没停过手。去波士顿参加MacWorld I的时候，我都带着一台手提电脑，坐在哈佛商学院的大阳台上把Windows类别的所有文件都写完了。 按步就班并不难。通常我一天是这样度过的：1，去上班。2，查电子邮件和上网等等。 3，考虑是否应该吃完中饭在开始干活。4，吃完中饭回来。5，查电子邮件逛网。6，终于决定应该开始工作了。7，查电子邮件逛网，东瞄瞄，西看看。8，再次决定确实应该开始开始干活了。9，打开该死的编辑器。10，一直会些程序学到晚上7：30，写到忘记时间。 在以上第8步和第9步之间似乎有点缺陷，因为我不是每次都能顺利地执行下去。 对我来说，启动是唯一的难题。静止物体在不受外力作用的情况下会保持静止。大脑里有些物质的质量大得不可思议，让它加速太难了。但是只要速度上去了，在全速行使的情况下，倒不用使什么劲就能继续走下去。就象骑着自行车去作一次自费横穿美国的旅行，一开始，你根本想象不出要花那么多时间让车轮动起来，可是一旦动起来了，让它们继续转就不是一件很难的事了。 也许高效率的关键就：启动起来。配对编程法之所以成功，说不定就靠两个人在一起，互相强迫对方启动起来。 我在以色烈当伞兵时，一次，有个将军来给我们讲实战战术。他告诉我们，步兵战术其实只有一种：行进中开火。你一边开火一边朝着敌人冲过去，火力让敌人抬不起头来，不能朝你开火 (当一个军人喊：“掩护我”的时候，他的意思就是“在我冲过街时候，你朝敌人猛烈开火，迫使他猫起来，没法朝我开火)。前进了，你就可以占领阵地，接近敌人，这样你的胜算要大的多。你要是不往前冲，敌人就有时间来搞清楚形势，这可不妙。你要是不开火，敌人就要朝你开火，撂倒你。 我很长一段时间都在想着这个教导。我想通了不论是战斗机空中格斗还是大规模舰队攻击，大部份军事战略战术都是以行进中开火作为基础的。我又化了十五年时间才想通了行进中开火也是一个人在现实生活中成功的基本原则。你每天都得往前进点儿，不用想你写的程序怎么差劲，怎么卖不出去，只要你不停地写，不停地改，滴水也能穿石。同时， 要注意你的竞争对手朝你开火。他们是不是想让你全心全意应付他们的扫射，好让你往前走不了呢？ 想想这些年来，微软开发出来的资料存取方法，从OBDC，RDO，DAO，ADO，OLEDB直到现在的 ADO，.NET，不停翻新，技术上有必要吗？还是因为那个设计组实在蹩脚，每过他妈一年就得重新发明一遍资料存取技术？(实际上可能真是)。它最终的效果其实是一道掩护火力，让竞争者别无选择，只能把本来该用来开发新功能的宝贵时间都用来移植和升级了。仔细看看软件行业，干得好的公司对那些对大公司都依赖最少，不用把所有精力都用来为赶潮流而把程序重写一遍，还得修改那些只有在Windows XP上才会出现的缺陷。那些花太多时间去猜测微软未来发展方向的公司，日子都好过不了。有些人见了.NET就发怵，忍不住要按.NET来完全重建自己的体系结构，以为自己别无选择。哥门儿，看清楚了，微软是在朝你开火呢，而且这只是掩护火力。这游戏就是这么玩儿的。这样一来，他们就可以大步朝前走，而你却不能。你要支持Hailstorm 吗？SOAP呢？还有RDF？是因为你的顾客需要，所以你支持它们？还是因为有人朝你开火而你觉得应该还击？大公司的营销部都懂火力掩护。他们到客人那儿就说，“你们不一定非买我们的。谁的产品最好您就应该买谁的。不过，我们想提醒您，在下单之前最好先确认他们支持(XML/ SOAP/CDE/J2EE)。否则你们就会被他们的技术套牢。”。等到小公司去向这个客户推销的时候，那个听话的CTO就会问他们：“你们有J2EE吗？”。他们回去就只好不管卖不卖得掉，都埋头打造他们的J2EE。他们也就再没有机会来展示自己的特色了。其实，这只不过是个打勾功能。因为有个打勾拦在那儿空着，你就必须有这个功能。其实谁都不需要它。这就是火力掩护。 对于我这样的小公司来说，行进中开火意味着两件事。别跟时间过不去，同时你还得每天都进步。天不负苦心人，你终有出头的一天。我昨天花了一天时间只不过让FogBUGZ的颜色稍微好看点。这不要紧，只要不停步。最重要的是，我们的软件越来越好，客人越来越多。在我们达到Oracle 的规模之前，我们并不需要通盘战略。我们只需要每天早晨到办公室来，别多想，打开编程器。 本文最先用英文出版，题为 Fire and Motion  </description>
    </item>
    
    <item>
      <title>Don&#39;t up-to-date</title>
      <link>https://tairan.net/posts/2009-02-13-dont-up-to-date/</link>
      <pubDate>Fri, 13 Feb 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-02-13-dont-up-to-date/</guid>
      <description>不要最新的！
貌似很多程序员都喜欢尝新，不停的追赶这语言那技术。此时之前，我也是其中的一份子，而且还比较狂热。这几天遇到的一些事情让我懂得，最新的不一定是最合适的。
说说是什么事情让我停止狂热的追赶最新的东西吧： 现在Python 3.0 已经发布一段时间了，并且大叔告诉我们现在还有很多周边软件没有跟上，所以除非是新项目，还是保守点选择2.6 比较合适。于是乎，就选择2.6.1吧 谁知 安装 trac 以及相关软件的时候，有个装不上，&amp;gt;_&amp;lt; 因为忘记记录存档想不起是哪个软件了，真对不起自己和大家！
再说说Apache吧，一直都选择2.2.x来玩，搭建SVN服务器等。CollabNet 做的集成包真的很好用，安装也简单！可用这个Apache2.2 安装 MOD_SCGI 却死活启动不了服务，从Google的结果来看，虽然有人提出自己编译MOD_SCGI for Apache 2.2，可也是意淫了一下说：“应该很容易”，&amp;ndash; 谁不知道在Windows 上玩这些成本有多高！ 无奈退而求其次，有换了个Apache2.0.x用用。
盲目的求新会走很多弯路。不过也能获得一些经验！ 兰迪教授说：当得不到想得到的东西时，就得到了经验。
虽说不要最新的，也没说一直守旧不前进，使用开源软件时最好用当前版本的前一个次版本最佳。 一来是软件经过了一段时间的考验，二是周边的软件也都跟上了。不至于走两步退一步。
=========================== Trac + Apache + SCGI 的安装方法比较容易，性能稳定方面自己倒是没有测试过。主要参考了这篇文章 Subversion无痛起步 &amp;mdash; Trac 0.10b1 + Apache 2</description>
    </item>
    
    <item>
      <title>The note of install Hyper-V on Windows 2008 Server</title>
      <link>https://tairan.net/posts/2009-02-04-the-note-of-install-hyper-v-on-windows-2008-server/</link>
      <pubDate>Wed, 04 Feb 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-02-04-the-note-of-install-hyper-v-on-windows-2008-server/</guid>
      <description>Windows 2008 Server 上安装和使用 Hyper-V 笔记 安装 Hyper-V 有几个硬性要求 1. CPU 支持 Virtualization 2. 宿主操作系统需要是 64bit
在安装过程中有几个需要注意的地方 1. 宿主操作系统的Location必须是United States的，否则 Hyper-V Virtual Machine Management Service不能启动 2. 如果CPU 支持 Virtualization 却不能启动 Guest 操作系统，那么需要检查主板BIOS中是否将 Virtualization 打开，BIOS已经打开也不行的话，那么升级下BIOS就可以了。我的 HP dc5750 就是升级到最新的BIOS才行的
Hyper-V Guest 操作系统的支持 Hyper-V 和 VPC Server 相比是明确提出支持 Linux 的，可这并不代表所有的 Linux 发行版都能不错的运行在 Hyper-V 上面。下面是 Microsoft 提供的支持 Linux 列表，更多的支持访问 http://www.microsoft.com/windowsserver2008/en/us/hyperv-supported-guest-os.aspx  Linux Distributions (VMs configured with 1 virtual processor only) SUSE Linux Enterprise Server 10 with Service Pack 2 x86 Edition SUSE Linux Enterprise Server 10 with Service Pack 2 x64 Edition SUSE Linux Enterprise Server 10 with Service Pack 1 x86 Edition SUSE Linux Enterprise Server 10 with Service Pack 1 x64 Edition</description>
    </item>
    
    <item>
      <title>Windows-7 beta</title>
      <link>https://tairan.net/posts/2009-01-13-windows-7-beta/</link>
      <pubDate>Tue, 13 Jan 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-01-13-windows-7-beta/</guid>
      <description>Windows 7 beta 发布了，迫不及待的想体验一下这个传说中的 Vista 改良版
Vista 耗时5年也没有弄出一个好东西，毕竟新东西太多，1.0 版本总是伴随着很多bug！
体验 Windows 7 的环境是 Virtual Box 2.1
Windows 7 的最小需求还是蛮大的，开始分配的256M内存是无法安装的，512M是最低要求，磁盘也需要5G多的空白空间！
就安装来说 Windows 7 的一些不错的的地方。 开机画面，很惊艳，终于没有了从古代就存在的开机滚动条 磁盘分区部分和Linux差不多了。在一个空白磁盘上创建分区时会自动的创建一个System盘，划分出200M的空间作为启动。难道模仿Linux的 /boot ？
从光盘启动后，除了选择语言和分区外，一切全自动，完全傻瓜化，对初级用户很友好。不过如今的傻瓜用户也不多见了！(因为要么从不装机，要么就是装机老手)
Windows 7 的安装光盘还有一个功能就是作为维护光盘，操作系统也像应用程序那样的可以repair，这个功能在以前也有，但是使用起来不是很方便，如今的操作方式和应用程序那样repair差不多了。
总结： 如今不再是非白即黑了，各种操作系统其实都在努力的变得更好，抢占更多的市场份额，所以凡是有利的都加以借鉴（抄袭？）Linux越来越像Windows，而Windows也一样越来越像Linux，当然还有其他的操作系统 BSD, Mac-OS等。百家争鸣的好处就是，电脑越来越强大、安全，使用起来也越来越容易了。
Note: 因为是测试版，申请CD-KEY很容易，有个Email，注册加激活就搞定。</description>
    </item>
    
    <item>
      <title>Install GRUB using grub-install</title>
      <link>https://tairan.net/posts/2009-01-08-install-grub-using-grub-install/</link>
      <pubDate>Thu, 08 Jan 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-01-08-install-grub-using-grub-install/</guid>
      <description>用过GRUB以后才知道这个玩意的强大。GRUB加上各种Linux kernel，可以组合成各种启动和安装系统方式。 现在总结一下安装GURB。
环境： Virtual Box #虚拟机 LFS-LiveCD #提供安装GRUB环境
省略若干配置虚拟机的文字&amp;hellip;
我们需要在一块新磁盘上安装GRUB，这块磁盘在系统中为 /dev/hda
首先要分区，格式化。(fdisk, mkfs.xfs)。目前GRUB也支持XFS文件系统启动了
挂载分区 mkdir /tmp/hda mount /dev/hda1 /tmp/hda  安装 grub-install &amp;ndash;recheck &amp;ndash;root-directory=/tmp/hda /dev/hda 
注意: 如果不挂载分区，我这里会提示，不知道其他人有没有遇到这个情况 grub-install does not have any corresponding BIOS drive 
另外在指定驱动器的时候不需要指定分区号 (hda1)
至此，GRUB就安装结束了，重启计算机后就会发现GRUB的提示环境了。</description>
    </item>
    
    <item>
      <title>Multisystem boot via GRUB</title>
      <link>https://tairan.net/posts/2009-01-07-multisystem-boot-via-grub/</link>
      <pubDate>Wed, 07 Jan 2009 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2009-01-07-multisystem-boot-via-grub/</guid>
      <description>以前安装多系统(Linux®+Windows®)都是在一个硬盘上，先安装Windows后安装Linux，然后使用GRUB (or LILO)来引导系统。 如今生活富裕了，硬盘也多了起来，为了更方便的重装系统。我把Linux®和Windows®分别安装在不同的硬盘上。这时就不用严格限制安装系统谁先谁后了。(其实不是Windows®是笨，而是故意不支持通用引导) 硬盘物理连接结构如下 hdd0 &amp;ndash; Primary IDE 安装 Linux hdd2 &amp;ndash; Second IDE 安装Windows 为什么不在同一根IDE线上安装硬盘呢？往下看 安装Linux并使用GRUB作为boot程序 进入BIOS，把 Primary IDE 设置为 Disable 安装Windows，此时Windows会将hdd2认作当前计算机中的Primary Disk，这样就会在hdd2的MDR创建引导文件。系统安装完毕，这样就可以通过在BIOS来设置first boot来分别引导Linux或Windows了。 接下来配置GRUB，通过GRUB来引导Windows，而不是频繁的修改BIOS。 编辑 /boot/grub/menu.lst 加上下面的代码 title Windows XP map (hdd0) (hdd2) map (hdd2) (hdd0) rootnoverify (hdd2,0) chainloader +1 
这段配置中最重要的就数那两行map指令了。这个是专门为(DOS/Windows)准备的。参见 GRUB Manual
这样就可以使用GRUB来分别引导Linux和Windows了.
总结: 学习一个工具如何使用,首先的就是通读使用手册. 然后不断的动手去做! 如此,当你不断的向期望的目标努力的时候就获得了经验!
文章中提到的 Windows 即是 Windows® Linux 即是 Linux®
这些都是人家的注册商标，要尊重！</description>
    </item>
    
    <item>
      <title>When A Child is Born</title>
      <link>https://tairan.net/posts/2008-12-31-when-a-child-is-born/</link>
      <pubDate>Wed, 31 Dec 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-12-31-when-a-child-is-born/</guid>
      <description>《你丫真狠》 我们需要这样的好电影！

电影很好看，我想说的是，如果上帝真的存在的话，那么蛇引诱夏娃吃苹果也是真的夏娃最终还是抵挡不住蛇的诱惑！男人遇到这样的事情，只能选择无奈的离开。</description>
    </item>
    
    <item>
      <title>Remote Control via GTalk (XMPP)</title>
      <link>https://tairan.net/posts/2008-12-26-remote-control-via-gtalk-xmpp/</link>
      <pubDate>Fri, 26 Dec 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-12-26-remote-control-via-gtalk-xmpp/</guid>
      <description>想远程控制家里的电脑？却因IP地址动态分配(花生壳可以解决)，远程连接速度慢，机器暴露在外网怕不安全，等种种原因无法理想的实现。
现在我们就另辟蹊径使用Gtalk来远程控制家里的电脑
基本思路如下 Gtalk基于XMPP这个开放的协议。那么我们也基于XMPP协议开发一个客户端就可以和Gtalk进行通讯，可以发送和接收来自Gtalk的消息后，再进行扩展，做成一个shell(命令解释器)。当我们用Gtalk给客户端发送消息后，客户端接收消息进行解释并处理。这样就完成了远程控制的家里电脑的任务。
具体实现 本人才采用的是.NET技术，使用agsXMPP这个开源的封装了XMPP协议的类库。我们基于这个类库就可以和Gtalk通讯了。 下面附上源码，这里只是实现使用Gtalk发送消息，客户端接收到消息后自动将接收的消息再发送回去。
using System;using agsXMPP;using agsXMPP.protocol.client;namespace XMPPClient{class Program{static void Main(string[] args){XmppClientConnection xmpp = new XmppClientConnection();xmpp.Server = &amp;#34;gmail.com&amp;#34;;xmpp.Username = &amp;#34;your_username&amp;#34;;xmpp.Password = &amp;#34;your_password&amp;#34;;xmpp.ConnectServer = &amp;#34;talk.google.com&amp;#34;;xmpp.SocketConnectionType = agsXMPP.net.SocketConnectionType.Direct;xmpp.ClientVersion = &amp;#34;1.0&amp;#34;;xmpp.AutoRoster = true;xmpp.Open();Console.WriteLine(&amp;#34;connected.&amp;#34;);xmpp.Show = agsXMPP.protocol.client.ShowType.away;xmpp.OnLogin += new ObjectHandler(xmpp_OnLogin);xmpp.OnMessage += new MessageHandler(xmpp_OnMessage);Console.ReadKey();}static void xmpp_OnRosterItem(object sender, agsXMPP.protocol.iq.roster.RosterItem item){Console.</description>
    </item>
    
    <item>
      <title>Get faster Gmail</title>
      <link>https://tairan.net/posts/2008-12-22-get-faster-gmail/</link>
      <pubDate>Mon, 22 Dec 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-12-22-get-faster-gmail/</guid>
      <description>IE 7 又被鄙视了！
用IE 7 打开Gmail，在页面的右上角赫然的出现红色字体 Get faster Gmail！
点击这个链接进去后出现的页面是firefox3 和 chrome的下载推荐
Get faster Gmail with a faster browser Browsers are getting faster and better at running web applications like Google Mail that use browser technology to its limits. In order to get the best experience possible and make Google Mail run an average of twice as fast, we suggest that you upgrade your browser to one of the fastest Google Mail supported browsers that work on Windows.</description>
    </item>
    
    <item>
      <title>Haha！Spam！</title>
      <link>https://tairan.net/posts/2008-12-19-haha-spam/</link>
      <pubDate>Fri, 19 Dec 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-12-19-haha-spam/</guid>
      <description>很多人都很讨厌Spam，其实我也很讨厌。可如果你的站点没有一个Spam说明什么？ 难道每个访问者都是纯洁的human、自律的robot？或这只是一个无人问津的站点？
小站建立有些日子了，从Google analyze中看，每日除了几个robot来访外毫无生机。
因前些日子搬家，家中无网可上，故近日来无心搭理小站。今日，为给朋友推荐WP-Syntax，登录到网站查看插件名称发现竟然有多个Comments，“哈，有人留言啦” 我如此心想。可点开链接发现，尽是Spam！
唉，也罢，至少有人来问津了。往你的站上发Spam，也是看得起你！
谢谢各位Spamer，如果真心想来链接，给点诚意，拜托！</description>
    </item>
    
    <item>
      <title>开源还是节流--探讨理财观念</title>
      <link>https://tairan.net/posts/2008-12-09-financial-management/</link>
      <pubDate>Tue, 09 Dec 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-12-09-financial-management/</guid>
      <description>是开源重要还是节流更重要呢？
这个问题我问过很多同事和朋友，他们回答基本都是开源重要。
一个关于水桶的故事
有两个水桶，一个没有底，另一个则是完整的。我们要用这两个水桶从井里打出一桶水。打水的方法有两个，首先用完整的水桶去打水，然后把水倒入到另一个水桶里。另一个方法是用没有底的那个桶去打水，然后把水桶上沾的水滴滴入到另一个水桶中。
聪明人一看就知道哪个方法能够打满一桶水了。过程虽然很辛苦，但是却能实实在在的积累到财富。
打水的那个水桶就相当于我们的财源，而装水的桶则是我们积累的财富。如果赚钱能力很强，但是花钱如流水般，最终是积累不到任何的财富的。
当然，没有财源，你再如何的去节约也是无用的。所以积累财富是建立在勤劳和节约上的。
建议朋友们不要再去做日/月光神教的信徒了。
推荐一本书：国富论
推荐一篇文章:你的孩子需要掌握的26个在学校中所学不到的技能 english 中文</description>
    </item>
    
    <item>
      <title>IDE is not enough - VIM</title>
      <link>https://tairan.net/posts/2008-11-30-ide-is-not-enough/</link>
      <pubDate>Sun, 30 Nov 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-11-30-ide-is-not-enough/</guid>
      <description>你的VSTS是正版的吗？
IDE 是工具，不能代替你思考
有一些人的坏习惯，靠IDE的智能感知来编程
软件开发者需要掌握一个Editor
VIM
VIM 文档</description>
    </item>
    
    <item>
      <title>Good eye!</title>
      <link>https://tairan.net/posts/2008-11-29-good-eye/</link>
      <pubDate>Sat, 29 Nov 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-11-29-good-eye/</guid>
      <description>曾经有人问 bill gates，怎么样才能像他一样？bill 回答说：”眼光要好“。的确，bill 在大型机横行的年代看到了PC的未来，所以才有Microsoft®今天的成绩。
然而，什么样才叫好眼光？在2千多年前，就有人总结出来了。下面的文章是引自《战国策》 这里主要是杜赫劝说周王该如何拉拢人心。 文中黑体字部分说的是，把钱花在已经名声显赫的人身上，人家并不会瞧得起你；而你把钱花在普通人身上，而你对那些人又指望不上，又浪费钱财。你只有把钱用在目前穷困潦倒、将来一定成大器的人身上，不一定花在已经声明显赫的人身上，才能实现自己的愿望。  杜赫欲重景翠于周 杜赫欲重景翠于周，谓周君曰：“ 君之国小，尽君子重宝珠玉以事诸侯，不可不察也。譬之如张罗者，张于无鸟之所，则终日无所得矣；张于多鸟处，则又骇鸟矣；必张于有鸟无鸟之际，然后能多得鸟矣。今君将施于大人，大人轻君；施于小人，小人无可以求，又费财焉。君必施于今之穷士，不必且为大人者，故能的欲矣。”</description>
    </item>
    
    <item>
      <title>Why webpy is instable?</title>
      <link>https://tairan.net/posts/2008-11-25-why-webpy-is-instable/</link>
      <pubDate>Tue, 25 Nov 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-11-25-why-webpy-is-instable/</guid>
      <description>有时脑袋有了idea，就想马上实现它。原本PHP是个不错的选择，可是自己以后的工作和规划中已经排除了它，取而代之的是Python。
用Python写一个简单的web application可不是那么容易的事情，以前玩了一段时间的Django，那时还不是1.0 Release版本。好不容易盼到Django 1.0 release了，却发现有很多东西不认识了。怎奈写一个小东东就这么难呢？
寻寻觅觅，忽见web.py是一个更简洁的framework，so, 看文档，做练习。从下班一直捣鼓到此时22:55，发现web.py这个framework中还是有很多Bug的。
官方释放版本是0.23，在cookbook中写到如何使用subapplication。 blog.py import web urls = ( &amp;ldquo;&amp;rdquo;, &amp;ldquo;reblog&amp;rdquo;, &amp;ldquo;/(.*)&amp;ldquo;, &amp;ldquo;blog&amp;rdquo; )
class reblog: def GET(self): raise web.seeother(&amp;lsquo;/&amp;rsquo;)
class blog: def GET(self, path): return &amp;ldquo;blog &amp;rdquo; + path
app_blog = web.application(urls, locals()) 这里有一个bug: AttributeError: &amp;lsquo;module&amp;rsquo; object has no attribute &amp;lsquo;application&amp;rsquo; Google以后才知道要用0.3版的才行，因为0.23版中根本就没有application.py这个文件
这个问题解决以后，在code.py中引用subapp urls = ( &amp;lsquo;/blog&amp;rsquo;, blog.app_blog ) 又有一个bug:  AttributeError: &amp;lsquo;module&amp;rsquo; object has no attribute &amp;lsquo;app_blog&amp;rsquo; 
痛苦阿，明天还要上班！暂时放一下web.py，让我在研究一下Django吧，好歹熟悉一些。如今的Django不仅很美，而且还很强壮，当然也很肥胖(相对)。
开源，路还很长。祝福web.py</description>
    </item>
    
    <item>
      <title>王守仁</title>
      <link>https://tairan.net/posts/2008-11-24-wangshouren/</link>
      <pubDate>Mon, 24 Nov 2008 00:00:01 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-11-24-wangshouren/</guid>
      <description>明新建文成侯王守仁，字伯安，自號陽明子。浙江餘姚人也，其先出王羲之之後，世為大戶。先祖綱，隨劉伯溫仕明太祖，官至四品，父華，成化十七年進士第一，仕至南京吏部尚書。娠十四月而生，祖母岑夫人夢神人送兒自雲中至，因名為雲。五歲，不能言，有異僧過之曰：「可惜道破。」始改今名。
年十歲，通四書，能屬文，又好兵書，時人異之。年十五，縱觀塞外，遂立志為將，曰：「但有兵將數萬，吾當討平韃靼！」父聞焉，以其狂妄深責之。守仁沮，越數日，言父曰：「責甚是，吾改之，吾當為聖賢！」父以其年少，但一笑而已。後妻之以江西大戶，成禮日，唯不見守仁，亟尋竟夕，方得其於城外道觀，蓋因守仁前日過此，興大發，於此打坐，忘晝暮，眾人尋至，方憶婚事未了。
弘治十二年登會試二甲，授工部主事，與李夢陽友，終日論文。初，守仁得朱子之道，深信之。曾對竹而格終日，以求究其理，不果，反染傷寒。朱子之說者，存天理去人欲也。理欲分之，而守仁於時亦以為然。十四年，授刑部主事，問禪於杭州，守仁論及禪師家母事，禪師思之而泣，翼日歸家，此守仁始疑朱子之學也。
正德間，劉瑾擅朝，守仁上書斥瑾為權奸，瑾怒，下守仁詔獄，廷杖四十，謫費州龍場驛丞。瑾遣人跡而加害，守仁托投水脫去，得至龍場。龍場地偏遠，人罕至，守仁終日無事，遂打坐冥思，終得天理即人欲、知行合一之道，時年三十七矣。
瑾敗，上復起守仁，知廬陵縣，歷吏部主事、員外郎、郎中，升南京太僕寺少卿、鴻臚寺卿。時虔、閩不靖，兵部尚書王瓊以守仁深習兵法，特舉其以左僉都御史，巡撫南、贛。未幾，平漳南、橫水、桶岡、大帽、浰頭諸寇。十五年六月，奉敕勘處福建叛軍。至豐城，聞朱宸濠反，遂返吉安，起兵討之。宸濠方圍安慶，守仁破南昌，宸濠返兵自救，遇之於鄱陽湖，二戰，叛軍俱敗。時宸濠據湖西岸連舟為方陣，守仁乘風燒船，大敗之，生擒宸濠。明武宗親征，群小張忠、許泰欲縱宸濠鄱陽湖，待武宗接戰而後奏凱。守仁不聽，乘夜過玉山，集浙江三司，以宸濠付太監張永。張永者，武宗親信，群小之所憚也。張忠恨之，以守仁體弱，欲以射箭辱之，守仁臨校場，三矢皆中，忠益恨之。張永索宸濠賂京官帳薄，欲以制朝廷，守仁陰毀之，曰：「叛亂已平，無謂再起干戈。」永愧而退。
明年，升南京兵部尚書，封新建伯。嘉靖元年，丁冢宰憂。六年，兩廣叛，世宗復起守仁，所到之處，叛軍聞名自降。又以歸師襲八寨、斷藤峽，破之。守仁幻夢謁馬伏波廟，題詩於壁。至是，道出祠下，恍如夢中。時守仁病，疏請告歸。至南安，病篤，門人周積侍疾，問遺言，守仁曰：「此心光明，亦復何言？」頃之而逝，時嘉靖七年戊子十一月廿九也，年五十七。隆慶初，贈新建侯，謚文成。萬曆中，詔從祀孔廟，稱「先儒王子」。</description>
    </item>
    
    <item>
      <title>教条示龙场诸生</title>
      <link>https://tairan.net/posts/2008-11-24-jtslczs/</link>
      <pubDate>Mon, 24 Nov 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-11-24-jtslczs/</guid>
      <description>(武宗正德元年，王守仁三十七歲，以上書救戴銑等，忤宦官劉謹，廷杖幾死，貶為貴州龍場驛丞。時龍場猶窮荒不文，守仁日與諸生講學不輟，書此教條以為訓示。) 　诸生相从于此，甚盛。恐无能为助也，以四事相规，聊以答诸生之意。一曰立志，二曰勤学，三曰改过，四曰责善。其慎听，毋忽！
　立志
　志不立，天下无可成之事。虽百工技艺，未有不本于志者。今学者旷废隳惰，玩岁愒时，而百无所成，皆由于志之未立耳。故立志而圣，则圣矣；立志而贤，则贤矣；志不立，如无舵之舟，无衔之马，漂荡奔逸，终亦何所底乎？昔人所言：“使为善而父母怒之，兄弟怨之，宗族乡党贱恶之，如此而不为善，可也。为善则父母爱之，兄弟悦之，宗族乡党敬信之，何苦而不为善、为君子？使为恶而父母爱之，兄弟悦之，宗族乡党敬信之，如此而为恶，可也。为恶则父母怒之，兄弟怨之，宗族乡党贱恶之，何苦必为恶、为小人？”诸生念此，亦可以知所立志矣。
　勤学
　已立志为君子，自当从事于学。凡学之不勤，必其志之尚未笃也。从吾游者，不以聪慧警捷为高，而以勤确谦抑为上。诸生试观侪辈之中，苟有“虚而为盈，无而为有”讳己之不能，忌人之有善，自矜自是，大言欺人者，使其人资禀虽甚超迈，侪辈之中，有弗疾恶之者乎？有弗鄙贱之者乎？彼固将以欺人，人果遂为所欺，有弗窃笑之者乎？苟有谦默自持，无能自处，笃志力行，勤学好问；称人之善，而咎己之失；从人之长，而明己之短；忠信乐易，表里一致者；使其人资禀虽甚鲁钝，侪辈之中，有弗称慕之者乎？彼固以无能自处，而不求上人，人果遂以彼为无能，有弗敬尚之者乎？诸生观此，亦可以知所从事于学矣！
　改过
　夫过者，自大贤所不免；然不害其卒为大贤者，为其能改也。故不贵于无过，而贵于能改过。诸生自思，平日亦有缺于廉耻忠信之行者乎？亦有薄于孝友之道，陷于狡诈、偷刻之习者乎？诸生殆不至于此。不幸或有之，皆其不知而误蹈，素无师友之讲习规饬也。诸生试内省，万一有近于是者，固亦不可以不痛自悔咎；然亦不当以此自歉，遂馁于改过从善之心。但能一旦脱然洗涤旧染，虽昔为盗寇，今日不害为君子矣！若曰吾昔已如此，今虽改过而从善，人将不信我，且无赎于前过，反怀羞涩疑沮，而甘心于污浊终焉，则吾亦绝望尔矣！
　责善
　“责善，朋友之道；”然须“忠告而善道之”，悉其忠爱，致其婉曲，使彼闻之而可从，绎之而可改，有所感而无所怒，乃为善耳！若先暴白其过恶，痛毁极诋，使无所容，彼将发其愧耻愤恨之心；虽欲降以相从，而势有所不能。是激之而使为恶矣！故凡讦人之短，攻发人之阴私，以沽直者，皆不可以言责善。虽然，我以是而施于人，不可也；人以是而加诸我，凡攻我之失者，皆我师也，安可以不乐受而心感之乎？某于道未有所得，其学卤莽耳。谬为诸生相从于此．每终夜以思，恶且未免，况于过乎？人谓“事师无犯无隐”，而遂谓师无可谏，非也。谏师之道，直不至于犯，而婉不至于隐耳。使吾而是也，因得以明其是；吾而非也，因得以去其非。盖教学相长也。诸生责善，当自吾始。</description>
    </item>
    
    <item>
      <title>编程不是构建软件，而是设计软件。-- 源码就是设计</title>
      <link>https://tairan.net/posts/2008-11-21-code-as-design/</link>
      <pubDate>Fri, 21 Nov 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-11-21-code-as-design/</guid>
      <description>什么是软件工程中最重要的产出？毫无疑问是代码。代码是给人读的，偶尔让机器运行一下。为了给读代码的人提供便利，我们就需要给代码一些自描述信息（Meta）。这些Meta信息就是相关的文档，注释等。关于是否需要文档在javaeye还有很激烈的讨论。
下面让我们看看大师是怎么说的：英文原版 至今，我仍能记起当我顿悟并最终产生下面文章时所在的地方。那是1986年的夏天，我在加利福尼亚中国湖海军武器中心担任临时顾问。在这期间，我有幸参加了一个关于Ada的研讨会。讨论当中，有一位听众提出了一个具有代表性的问题，“软件开发者是工程师吗？”我不记得当时的回答，但是我却记得当时并没有真正解答这个问题。于是，我就退出讨论，开始思考我会怎样回答这样一个问题。现在，我无法肯定当时我为什么会记起几乎10年前曾经在Datamation杂志上阅读过的一篇论文，不过促使我记起的应该是后续讨论中的某些东西。这篇论文阐述了工程师为什么必须是好的作家（我记得该论文谈论就是这个问题——好久没有看了），但是我从该论文中得到的关键一点是：作者认为工程过程的最终结果是文档。换句话说，工程师生产的是文档，不是实物。其他人根据这些文档去制造实物。于是，我就在困惑中提出了一个问题，“除了软件项目正常产生的所有文档以外，还有可以被认为是真正的工程文档的东西吗？”我给出的回答是，“是的，有这样的文档存在，并且只有一份——源代码。”
把源代码看作是一份工程文档——设计——完全颠覆了我对自己所选择的职业的看法。它改变了我看待一切事情的方式。此外，我对它思考的越多，我就越觉得它阐明了软件项目常常遇到的众多问题。更确切地说，我觉得大多数人不理解这个不同的看法，或者有意拒绝它这样一个事实，就足以说明很多问题。几年后，我终于有机会把我的观点公开发表。C++ Journal中的一篇有关软件设计的论文促使我给编辑写了一封关于这个主题的信。经过几封书信交换后，编辑Livleen Singh同意把我关于这个主题的想法发表为一篇论文。下面就是这篇文章。
——Jack Reecves, December,22,2001 什么是软件设计？ Jack W.Reeves, 1992
面向对象技术，特别是C++，似乎给软件界带来了不小的震动。出现了大量的论文和书籍去描述如何应用这项新技术。总的来说，那些关于面向对象技术是否只是一个骗局的问题已经被那些关于如何付出最小的努力即可获得收益的问题所替代。面向对象技术出现已经有一段时间了，但是这种爆炸式的流行却似乎有点不寻常。人们为何会突然关注它呢？对于这个问题，人们给出了各种各样的解释。事实上，很可能就没有单一的原因。也许，把多种因素的结合起来才能最终取得突破，并且这项工作正在进展之中。尽管如此，在软件革命的这个最新阶段中，C++本身看起来似乎成为了一个主要因素。同样，对于这个问题，很可能也存在很多种理由，不过我想从一个稍微不同的视角给出一个答案：C++之所以变得流行，是因为它使软件设计变得更容易的同时，也使编程变得更容易。
虽然这个解释好像有点奇特，但是它却是深思熟虑的结果。在这篇论文中，我就是想要关注一下编程和程序设计之间的关系。近10年来，我一直觉得整个软件行业都没有觉察到做出一个软件设计和什么是真正的软件设计之间的一个微妙的不同点。只要看到了这一点，我认为我们就可以从C++增长的流行趋势中，学到关于如何才能成为更好的软件工程师的意义深远的知识。这个知识就是，编程不是构建软件，而是设计软件。
几年前，我参见了一个讨论会，其中讨论到软件开发是否是一门工程学科的问题。虽然我不记得了讨论结果，但是我却记得它是如何促使我认识到：软件业已经做出了一些错误的和硬件工程的比较，而忽视了一些绝对正确的对比。其实，我认为我们不是软件工程师，因为我们没有认识到什么才是真正的软件设计。现在，我对这一点更是确信无疑。
任何工程活动的最终目标都是某些类型的文档。当设计工作完成时，设计文档就被转交给制造团队。该团队是一个和设计团队完全不同的群体，并且其技能也和设计团队完全不同。如果设计文档正确地描绘了一个完整的设计，那么制造团队就可以着手构建产品。事实上，他们可以着手构建该产品的许多实物，完全无需设计者的任何进一步的介入。在按照我的理解方式审查了软件开发的生命周期后，我得出一个结论：实际上满足工程设计标准的惟一软件文档，就是源代码清单。
对于这个观点，人们进行了很多的争论，无论是赞成的还是反对的都足以写成无数的论文。本文假定最终的源代码就是真正的软件设计，然后仔细研究了该假定带来的一些结果。我可能无法证明这个观点是正确的，但是我希望证明：它确实解释了软件行业中一些已经观察到的事实，包括C++的流行。
在把代码看作是软件设计所带来的结果中，有一个结果完全盖过了所有其他的结果。它非常重要并且非常明显，也正因为如此，对于大多数软件机构来说，它完全是一个盲点。这个结果就是：软件的构建是廉价的。它根本就不具有昂贵的资格；它非常的廉价，几乎就是免费的。如果源代码是软件设计，那么实际的软件构建就是由编译器和连接器完成的。我们常常把编译和连接一个完整的软件系统的过程称为“进行一次构建”。在软件构建设备上所进行的主要投资是很少的——实际需要的只有一台计算机、一个编辑器、一个编译器以及一个连接器。一旦具有了一个构建环境，那么实际的软件构建只需花费少许的时间。编译50 000行的C++程序也许会花费很长的时间，但是构建一个具有和50 000行C++程序同样设计复杂性的硬件系统要花费多长的时间呢？
把源代码看作是软件设计的另外一个结果是，软件设计相对易于创作，至少在机械意义上如此。通常，编写（也就是设计）一个具有代表性的软件模块（50至100行代码）只需花费几天的时间（对它进行完全的调试是另外一个议题，稍后会对它进行更多的讨论）。我很想问一下，是否还有任何其他的学科可以在如此短的时间内，产生出和软件具有同样复杂性的设计来，不过，首先我们必须要弄清出如何来度量和比较复杂性。然而，有一点是明显的，那就是软件设计可以 极为迅速地变得非常庞大。
假设软件设计相对易于创作，并且在本质上构建起来也没有什么代价，一个不令人吃惊的发现是，软件设计往往是难以置信的庞大和复杂。这看起来似乎很明显，但是问题的重要性却常常被忽视。学校中的项目通常具有数千行的代码。具有10 000行代码（设计）的软件产品被它们的设计者丢弃的情况也是有的。我们早就不再关注于简单的软件。典型的商业软件的设计都是由数十万行代码组成的。许多软件设计达到了上百万行代码。另外，软件设计几乎总是在不断地演化。虽然当前的设计可能只有几千行代码，但是在产品的生命期中，实际上可能要编写许多倍的代码。
尽管确实存在一些硬件设计，它们看起来似乎和软件设计一样复杂，但是请注意两个有关现代硬件的事实。第一，复杂的硬件工程成果未必总是没有错误的，在这一点上，它不存在像软件那样让我们相信的评判标准。多数的微处理器在发售时都具有一些逻辑错误：桥梁坍塌，大坝破裂，飞机失事以及数以千计的汽车和其他消费品被召回——所有的这些我们都记忆犹新，所有的这些都是设计错误的结果。第二，复杂的硬件设计具有与之对应的复杂、昂贵的构建阶段。结果，制造这种系统所需的能力限制了真正能够生产复杂硬件设计公司的数目。对于软件来说，没有这种限制。目前，已经有数以百计的软件机构和数以千计的非常复杂的软件系统存在，并且数量以及复杂性每天都在增长。这意味着软件行业不可能通过仿效硬件开发者找到针对自身问题的解决办法。倘若一定要说出有什么相同之处的话，那就是，当CAD和CAM可以做到帮助硬件设计者创建越来越复杂的设计时，硬件工程才会变得和软件开发越来越像。
设计软件是一种管理复杂性的活动。复杂性存在于软件设计本身之中，存在于公司的软件机构之中，也存在于整个软件行业之中。软件设计和系统设计非常相似。它可以跨越多种技术并且常常涉及多个学科分支。软件的规格说明往往不固定、经常快速变化，这种变化常常在正进行软件设计时发生。同样，软件开发团队也往往不固定，常常在设计过程的中间发生变化。在许多方面，软件都要比硬件更像复杂的社会或者有机系统。所有这些都使得软件设计成为了一个困难的并且易出错的过程。虽然所有这些都不是创造性的想法，但是在软件工程革命开始将近30年后的今天，和其他工程行业相比，软件开发看起来仍然像是一种未受过训练（undisciplined）的技艺。
一般的看法认为，当真正的工程师完成了一个设计，不管该设计有多么复杂，他们都非常确信该设计是可以工作的。他们也非常确信该设计可以使用公认的技术建造出来。为了做到这一点，硬件工程师花费了大量的时间去验证和改进他们的设计。例如，请考虑一个桥梁设计。在这样一个设计实际建造之前，工程师会进行结构分析——他们建立计算机模型并进行仿真，他们建立比例模型并在风洞中或者用其他一些方法进行测试。简而言之，在建造前，设计者会使用他们能够想到的一切方法来证实设计是正确的。对于一架新型客机的设计来说，情况甚至更加严重；必须要构建出和原物同尺寸的原型，并且必须要进行飞行测试来验证设计中的种种预计。
对于大多数人来说，软件中明显不存在和硬件设计同样严格的工程。然而，如果我们把源代码看做是设计，那么就会发现软件工程师实际上对他们的设计做了大量的验证和改进。软件工程师不把这称为工程，而称它为测试和调试。大多数人不把测试和调试看作是真正的“工程”——在软件行业中肯定没有被看作是。造成这种看法的原因，更多的是因为软件行业拒绝把代码看作设计，而不是任何实际的工程差别。事实上，试验模型、原型以及电路试验板已经成为其他工程学科公认的组成部分。软件设计者之所以不具有或者没有使用更多的正规方法来验证他们的设计，是因为软件构建周期的简单经济规律。
第一个启示：仅仅构建设计并测试它比做任何其他事情要廉价一些，也简单一些。我们不关心做了多少次构建——这些构建在时间方面的代价几乎为零，并且如果我们丢弃了构建，那么它所使用的资源完全可以重新利用。请注意，测试并非仅仅是让当前的设计正确，它也是改进设计的过程的一部分。复杂系统的硬件工程师常常建立模型（或者，至少他们把设计用计算机图形直观地表现出来）。这就使得他们获得了对于设计的一种“感觉”，而仅仅去检查设计是不可能获得这种感觉的。对于软件来说，构建这样一个模型既不可能也无必要。我们仅仅构建产品本身。即使正规的软件验证可以和编译器一样自动进行，我们还是会去进行构建/测试循环。因此，正规的验证对于软件行业来说从来没有太多的实际意义。
这就是现今软件开发过程的现实。数量不断增长的人和机构正在创建着更加复杂的软件设计。这些设计会被先用某些编程语言编写出来，然后通过构建/测试循环进行验证和改进。过程易于出错，并且不是特别的严格。相当多的软件开发人员并不想相信这就是过程的运作方式，也正因为这一点，使问题变得更加复杂。
当前大多数的软件过程都试图把软件设计的不同阶段分离到不同的类别中。必须要在顶层的设计完成并且冻结后，才能开始编码。测试和调试只对清除建造错误是必要的。程序员处在中间位置，他们是软件行业的建造工人。许多人认为，如果我们可以让程序员不再进行“随意的编码（hacking）”并且按照交给他们的设计去进行构建（还要在过程中，犯更少的错误），那么软件开发就可以变得成熟，从而成为一门真正的工程学科。但是，只要过程忽视了工程和经济学事实，这就不可能发生。
例如，任何一个现代行业都无法忍受在其制造过程中出现超过100%的返工率。如果一个建造工人常常不能在第一次就构建正确，那么不久他就会失业。但是在软件业中，即使最小的一块代码，在测试和调试期间，也很可能会被修正或者完全重写。在一个创造性的过程中（比如：设计），我们认可这种改进不是制造过程的一部分。没有人会期望工程师第一次就创建出完美的设计。即使她做到了，仍然必须让它经受改进过程，目的就是为了证明它是完美的。
即使我们从日本的管理方法中没有学到任何东西，我们也应该知道由于在过程中犯错误而去责备工人是无益于提高生产率的。我们不应该不断地强迫软件开发去符合不正确的过程模型，相反，我们需要去改进过程，使之有助于而不是阻碍产生更好的软件。这就是“软件工程”的石蕊测试。工程是关于你如何实施过程的，而不是关于是否需要一个CAD系统来产生最终的设计文档。
关于软件开发有一个压倒性的问题，那就是一切都是设计过程的一部分。编码是设计，测试和调试是设计的一部分，并且我们通常认为的设计仍然是设计的一部分。虽然软件构建起来很廉价，但是设计起来却是难以置信的昂贵。软件非常的复杂，具有众多不同方面的设计内容以及它们所导致的设计考虑。问题在于，所有不同方面的内容是相互关连的（就像硬件工程中的一样）。我们希望顶层设计者可以忽视模块算法设计的细节。同样，我们希望程序员在设计模块内部算法时不必考虑顶层设计问题。糟糕的是，一个设计层面中的问题侵入到了其他层面之中。对于整个软件系统的成功来说，为一个特定模块选择算法可能和任何一个更高层次的设计问题同样重要。在软件设计的不同方面内容中，不存在重要性的等级。最低层模块中的一个不正确设计可能和最高层中的错误一样致命。软件设计必须在所有的方面都是完整和正确的，否则，构建于该设计基础之上的所有软件都会是错误的。
为了管理复杂性，软件被分层设计。当程序员在考虑一个模块的详细设计时，可能还有数以百计的其他模块以及数以千计的细节，他不可能同时顾及。例如，在软件设计中，有一些重要方面的内容不是完全属于数据结构和算法的范畴。在理想情况下，程序员不应该在设计代码时还得去考虑设计的这些其他方面的内容。
但是，设计并不是以这种方式工作的，并且原因也开始变得明朗。软件设计只有在其被编写和测试后才算完成。测试是设计验证和改进过程的基础部分。高层结构的设计不是完整的软件设计；它只是细节设计的一个结构框架。在严格地验证高层设计方面，我们的能力是非常有限的。详细设计最终会对高层设计造成的影响至少和其他的因素一样多（或者应该允许这种影响）。对设计的各个方面进行改进，是一个应该贯穿整个设计周期的过程。如果设计的任何一个方面内容被冻结在改进过程之外，那么对于最终设计将会是糟糕的或者甚至无法工作这一点，就不会觉得奇怪了。
如果高层的软件设计可以成为一个更加严格的工程过程，那该有多好呀，但是软件系统的真实情况不是严格的。软件非常的复杂，它依赖于太多的其他东西。或许，某些硬件没有按照设计者认为的那样工作，或者一个库例程具有一个文档中没有说明的限制。每一个软件项目迟早都会遇到这些种类的问题。这些种类的问题会在测试期间被发现（如果我们的测试工作做得好的话），之所以如此是因为没有办法在早期就发现它们。当它们被发现时，就迫使对设计进行更改。如果我们幸运，那么对设计的更改是局部的。时常，更改会波及到整个软件设计中的一些重要部分（莫非定律）。当受到影响的设计的一部分由于某种原因不能更改时，那么为了能够适应影响，设计的其他部分就必须得遭到破坏。这通常导致的结果就是管理者所认为的“随意编码”，但是这就是软件开发的现实。
例如，在我最近工作的一个项目中，发现了模块A的内部结构和另一个模块B之间的一个时序依赖关系。糟糕的是，模块A的内部结构隐藏在一个抽象体的后面，而该抽象体不允许以任何方法把对模块B的调用合入到它的正确调用序列中。当问题被发现时，当然已经错过了更改A的抽象体的时机。正如所料，所发生的就是把一个日益增长的复杂的“修正”集应用到A的内部设计上。在我们还没有安装完版本1时，就普遍感觉到设计正在衰退。每一个新的修正很可能都会破坏一些老的修正。这是一个正规的软件开发项目。最后，我和我的同事决定对设计进行更改，但是为了得到管理层的同意，我们不得不自愿无偿加班。
在任何一般规模的软件项目中，肯定会出现像这样的问题，尽管人们使用了各种方法来防止它的出现，但是仍然会忽视一些重要的细节。这就是工艺和工程之间的区别。如果经验可以把我们引向正确的方向，这就是工艺。如果经验只会把我们带入未知的领域，然后我们必须使用一开始所使用的方法并通过一个受控的改进过程把它变得更好，这就是工程。
我们来看一下只是作为其中很小一点的内容，所有的程序员都知道，在编码之后而不是之前编写软件设计文档会产生更加准确的文档。现在，原因是显而易见的。用代码来表现的最终设计是惟一一个在构建/测试循环期间被改进的东西。在这个循环期间，初始设计保持不变的可能性和模块的数量以及项目中程序员的数量成反比。它很快就会变得毫无价值。
在软件工程中，我们非常需要在各个层次都优秀的设计。我们特别需要优秀的顶层设计。初期的设计越好，详细设计就会越容易。设计者应该使用任何可以提供帮助的东西。结构图表、Booch 图、状态表、PDL等等——如果它能够提供帮助，就去使用它。但是，我们必须记住，这些工具和符号都不是软件设计。最后，我们必须创建真正的软件设计，并且是使用某种编程语言完成的。因此，当我们得出设计时，我们不应该害怕对它们进行编码。在必要时，我们必须应该乐于去改进它们。
至今，还没有任何设计符号可以同时适用于顶层设计和详细设计。设计最终会表现为以某种编程语言编写的代码。这意味着在详细设计可以开始前，顶层设计符号必须被转换成目标编程语言。这个转换步骤耗费时间并且会引入错误。程序员常常是对需求进行回顾并且重新进行顶层设计，然后根据它们的实际去进行编码，而不是从一个可能没有和所选择的编程语言完全映射的符号进行转换。这同样也是软件开发的部分现实情况。
也许，如果让设计者本人来编写初始代码，而不是后来让其他人去转换语言无关的设计，就会更好一些。我们所需要的是一个适用于各个层次设计的统一符号。换句话说，我们需要一种编程语言，它同样也适用于捕获高层的设计概念。C＋＋正好可以满足这个要求。C++是一门适用于真实项目的编程语言，同时它也是一个非常具有表达力的软件设计语言。C++允许我们直接表达关于设计组件的高层信息。这样，就可以更容易地进行设计，并且以后可以更容易地改进设计。由于它具有更强大的类型检查机制，所以也有助于检测到设计中的错误。这就产生了一个更加健壮的设计，实际上也是一个更好的工程化设计。
最后，软件设计必须要用某种编程语言表现出来，然后通过一个构建/测试循环对其进行验证和改进。除此之外的任何其他主张都完全没有用。请考虑一下都有哪些软件开发工具和技术得以流行。结构化编程在它的时代被认为是创造性的技术。 Pascal使之变得流行，从而自己也变得流行。面向对象设计是新的流行技术，而C++是它的核心。现在，请考虑一下那些没有成效的东西。CASE工具，流行吗？是的；通用吗？不是。结构图表怎么样？情况也一样。同样地，还有Warner-Orr图、Booch图、对象图以及你能想起的一切。每一个都有自己的强项，以及惟一的一个根本弱点——它不是真正的软件设计。事实上，惟一一个可以被普遍认可的软件设计符号是PDL，而它看起来像什么呢？
这表明，在软件业的共同潜意识中本能地知道，编程技术，特别是实际开发所使用的编程语言的改进和软件行业中任何其他东西相比，具有压倒性的重要性。这还表明，程序员关心的是设计。当出现更加具有表达力的编程语言时，软件开发者就会使用它们。
同样，请考虑一下软件开发过程是如何变化的。从前，我们使用瀑布式过程。现在，我们谈论的是螺旋式开发和快速原型。虽然这种技术常常被认为可以“消除风险” 以及“缩短产品的交付时间”，但是它们事实上也只是为了在软件的生命周期中更早地开始编码。这是好事。这使得构建/测试循环可以更早地开始对设计进行验证和改进。这同样也意味着，顶层软件设计者很有可能也会去进行详细设计。
正如上面所表明的，工程更多的是关于如何去实施过程的，而不是关于最终产品看起来的像什么。处在软件行业中的我们，已经接近工程师的标准，但是我们需要一些认知上的改变。编程和构建/测试循环是工程软件过程的中心。我们需要以像这样的方式去管理它们。构建/测试循环的经济规律，再加上软件系统几乎可以表现任何东西的事实，就使得我们完全不可能找出一种通用的方法来验证软件设计。我们可以改善这个过程，但是我们不能脱离它。
最后一点：任何工程设计项目的目标是一些文档产品。显然，实际设计的文档是最重要的，但是它们并非惟一要产生的文档。最终，会期望某些人来使用软件。同样，系统很可能也需要后续的修改和增强。这意味着，和硬件项目一样，辅助文档对于软件项目具有同样的重要性。虽然暂时忽略了用户手册、安装指南以及其他一些和设计过程没有直接联系的文档，但是仍然有两个重要的需求需要使用辅助设计文档来解决。
辅助文档的第一个用途是从问题空间中捕获重要的信息，这些信息是不能直接在设计中使用的。软件设计需要创造一些软件概念来对问题空间中的概念进行建模。这个过程需要我们得出一个对问题空间中概念的理解。通常，这个理解中会包含一些最后不会被直接建模到软件空间中的信息，但是这些信息却仍然有助于设计者确定什么是本质概念以及如何最好地对它们建模。这些信息应该被记录在某处，以防以后要去更改模型。
对辅助文档的第二个重要需要是对设计的某些方面的内容进行记录，而这些方面的内容是难以直接从设计本身中提取的。它们既可以是高层方面的内容，也可以是低层方面内容。对于这些方面内容中的许多来说，图形是最好的描述方式。这就使得它们难以作为注释包含在代码中。这并不是说要用图形化的软件设计符号代替编程语言。这和用一些文本描述来对硬件科目的图形化设计文档进行补充没有什么区别。
决不要忘记，是源代码决定了实际设计的真实样子，而不是辅助文档。在理想情况下，可以使用软件工具对源代码进行后期处理并产生出辅助文档。对于这一点，我们可能期望过高了。次一点的情况是，程序员（或者技术方面的编写者）可以使用一些工具从源代码中提取出一些特定的信息，然后可以把这些信息以其他一些方式文档化。毫无疑问，手工对这种文档保持更新是困难的。这是另外一个支持需要更具表达力的编程语言的理由。同样，这也是一个支持使这种辅助文档保持最小并且尽可能在项目晚期才使之变成正式的理由。同样，我们可以使用一些好的工具；不然的话，我们就得求助于铅笔、纸以及黑板。
总结如下： 实际的软件运行于计算机之中。它是存储在某种磁介质中的0和1的序列。它不是使用C++语言（或者其他任何编程语言）编写的程序。 程序清单是代表软件设计的文档。实际上把软件设计构建出来的是编译器和连接器。 构建实际软件设计的廉价程度是令人难以置信的，并且它始终随着计算机速度的加快而变得更加廉价。 设计实际软件的昂贵程度是令人难以置信的，之所以如此，是因为软件的复杂性是令人难以置信的，并且软件项目的几乎所有步骤都是设计过程的一部分。 编程是一种设计活动——好的软件设计过程认可这一点，并且在编码显得有意义时，就会毫不犹豫的去编码。 编码要比我们所认为的更频繁地显现出它的意义。通常，在代码中表现设计的过程会揭示出一些疏漏以及额外的设计需要。这发生的越早，设计就会越好。 因为软件构建起来非常廉价，所以正规的工程验证方法在实际的软件开发中没有多大用处。仅仅建造设计并测试它要比试图去证明它更简单、更廉价。 测试和调试是设计活动——对于软件来说，它们就相当于其他工程学科中的设计验证和改进过程。好的软件设计过程认可这一点，并且不会试图去减少这些步骤。 还有一些其他的设计活动——称它们为高层设计、模块设计、结构设计、构架设计或者诸如此类的东西。好的软件设计过程认可这一点，并且慎重地包含这些步骤。 所有的设计活动都是相互影响的。好的软件设计过程认可这一点，并且当不同的设计步骤显示出有必要时，它会允许设计改变，有时甚至是根本上的改变， 许多不同的软件设计符号可能是有用的——它们可以作为辅助文档以及工具来帮助简化设计过程。它们不是软件设计。 软件开发仍然还是一门工艺，而不是一个工程学科。主要是因为缺乏验证和改善设计的关键过程中所需的严格性。 最后，软件开发的真正进步依赖于编程技术的进步，而这又意味着编程语言的进步。C++就是这样的一个进步。它已经取得了爆炸式的流行，因为它是一门直接支持更好的软件设计的主流编程语言。 C++在正确的方向上迈出了一步，但是还需要更大的进步。 后 记</description>
    </item>
    
    <item>
      <title>你的网站还在用GB2312?</title>
      <link>https://tairan.net/posts/2008-11-14-encoding/</link>
      <pubDate>Fri, 14 Nov 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-11-14-encoding/</guid>
      <description>最近朋友在导入数据数据的时候出现了很多的方块，显然这是一个编码错误的问题。
这让我想起目前国内网站的一些情况，国内山寨网挺多，基本上站还都是使用GB2312作为默认编码，GB2312，看名字就很有中国特色，不过，像这种基础设置，还是不要做山寨版的好。全球是一家&amp;ndash;地球村！当前UTF-8很好很强大。
UTF-8现在是主流的宽字符集的解决方案，不仅是网站，现在很多源码，文本，xml等都使用UTF-8作为默认编码。
在使用 UTF-8 时需要注意的是 BOM : Byte Order Mark
UTF-8 BOM又叫UTF-8 签名,其实UTF-8 的BOM对UFT-8没有作用,是为了支援UTF-16,UTF-32才加上的BOM,BOM签名的意思就是告诉编辑器当前文件采用何种编码,方便编辑器 识别,但是BOM虽然在编辑器中不显示,但是会产生输出,就像多了一个空行
我们在编辑UTF-8文件时，需要用用现代的，高效的编辑器来coding，如VIM, Notepad++等。至于Windows自带的notepad 当便签还行，干活就免了吧。
另外在网页的meta信息中也要制定UTF-8作为编码。
BTW：有些黄色网站的编码都用UTF-8了，不过他的meta却写着GB2312，防BOT or GFW</description>
    </item>
    
    <item>
      <title>局域网安装CentOS Linux</title>
      <link>https://tairan.net/posts/2008-11-07-install-centos-linux-via-http/</link>
      <pubDate>Fri, 07 Nov 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-11-07-install-centos-linux-via-http/</guid>
      <description>简介
这个星球上Linux发行版的老大哥目前还是Redhat。所以用Redhat做服务器端的操作系统，虽不说是最好，也算是更好的选择了。现在Redhat AS版本收费啦，咱们自个儿用就选CentOS吧，根正苗红。根据我自己的实际情况来介绍一下在没有光驱和网络启动芯片时通过局域网来安装CentOS。准确的来说是用Grub启动后用HTTP方式安装。
安装环境介绍
服务器端介绍 操作系统: ubuntu-8.10 Web Server: lighttpd-1.4.19 IP: 192.168.1.200
客户端介绍 原有操作系统: ubuntu-8.04 gurb 启动
安装前的准备 首先我们需要客户端的启动文件 vmlinuz initrd.img 这两个文件可以在CentOS网站下载CentOS-netinstall.iso 里面的启动文件是最佳选择。 然后准备CentOS安装文件，我选择的是dvd版的iso，这样可以节省很多更换光盘的步骤。
挂载iso文件,为了减少访问权限相关的限制，我把目录挂载到/tmp/centos上。 
mount -o loop /path/of/dvd.iso /tmp/centos  建立到web server目录的链接，我的默认路径是 /var/www 
ln -s /tmp/centos /var/www/centos  做好以上步骤后在浏览器中检查是否能访问http://localhost/centos如果可以的话，服务器端的准备工作就做完了
客户端 将启动文件 vmlinuz initrd.img 传送到客户端 /boot 目录下 编辑 /boot/grub/menu.lst  title CentOS root hda(0,0) kernel /boot/vmlinuz initrd /boot/initrd.img  客户端准备工作就做好了，reboot
安装并配置系统 这些事情实在没有想说的兴趣了，手册上写的清清楚楚。在设置web site时，只要填写ip而不需要协议头http://，CentOS directory 填 /centos 其实也就是dvd的根目录，安装系统相关的文件都在那里。</description>
    </item>
    
    <item>
      <title>.Net 全球通用应用程序开发(一)</title>
      <link>https://tairan.net/posts/2008-11-06-dotnet-globalization/</link>
      <pubDate>Thu, 06 Nov 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-11-06-dotnet-globalization/</guid>
      <description>开发全球化的软件，毫无疑问，Microsoft是很有发言权的。在.NET环境中我们如何开发全球化的软件呢？首先来看看一些来自MSDN的建议，自己在这些建议中加上自己的理解。 http://msdn.microsoft.com/zh-cn/library/w7x1y988.aspx
 全球化最佳做法
 1. 在内部使应用程序代码成为 Unicode。 【Daniel】现在很多程序都使用UTF-8来编码，程序体积的增大已经不能构成什么影响了。
 2. 使用 System.Globalization 命名空间提供的区域性识别类来操作和格式化数据。 * 对于排序，使用 SortKey 类和 CompareInfo 类。 * 对于字符串比较，使用 CompareInfo 类。 * 对于日期和时间格式化，使用 DateTimeFormatInfo 类。 * 对于数字格式化，使用 NumberFormatInfo 类。 * 对于公历和非公历，使用 Calendar 类或特定的 Calendar 实现之一。 【Daniel】全球化带来的问题就是文化相关的冲突，如日历，日期显示的格式，钱币的符号，数字的格式化等。所以对这些文化相关的资源进行操作时就要使用上面提到的特有的操作。
 3. 在适当的情况下，使用 System.Globalization.CultureInfo 类提供的区域性属性设置。使用 CultureInfo.CurrentCulture 属性来执行格式化任务，如日期和时间或数字的格式化。使用 CultureInfo.CurrentUICulture 属性来检索资源。请注意，CurrentCulture 和 CurrentUICulture 属性可以基于每个线程来设置。
 4. 通过使用 System.Text 命名空间中的编码类，使应用程序能够与各种编码相互进行数据读写。不要采用 ASCII 数据。假定在用户可以输入文本的任何位置都将提供国际字符。例如，在服务器名、目录、文件名、用户名和 URL 中接受国际字符。 【Daniel】ASCII 已经过时啦，UTF-8是向下兼容的。
 5. 使用 UTF8Encoding 类时，出于安全原因，建议您使用此类提供的错误检测功能。要打开错误检测功能，请使用带有 throwOnInvalidBytes 参数的构造函数创建该类的实例，并将 throwOnInvalidBytes 的值设置为 true。 【Daniel】UTF-8也有BOM和非BOM之分。</description>
    </item>
    
    <item>
      <title>130Km-day</title>
      <link>https://tairan.net/posts/2008-11-04-130km-day/</link>
      <pubDate>Tue, 04 Nov 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-11-04-130km-day/</guid>
      <description>缘起
徐家汇到金山城市沙滩, 在MSN上吼了一声，周末去哪里玩？除了老马积极响应外，其他人都告知周末闭门不出，谓之养身。自从十一假期回来，大家好像都很累的样子，都过了2周都还没休息够。
距离
这一天的行程总计130Km，自从有了码表以后，自行车出行的里程就精确的记录了下来。虽然中间几次误操作把当前的里程给清零了，不过还好带了个烂笔头，把每次清零前的记录保留了下来。到家以后，算了个加法于是乎约等于130km/day.
速度
最高时速41km/h，在沪杭公路上，路不是很宽，但是感觉很好。自己实在是忍不住想狂飙的冲动，也好释放一下自己的能量。瞬间自行车的速度就上到了41km/h，不过这个速度没保持到一分钟就下来了，后来几次再飚也没能上去。
自行车也超速行驶。在途中的一座桥上，下坡的时候看到了限速牌，上写着35km/h。而此时我的码表显示在 37km/h左右，嘿嘿，还好交警此时不在附近，不然要开罚单了。
好日子
一路上遇到好几对新人，所以今天是一个好日子，如果不是好日子，干嘛那么多人结婚啊！:) 恭喜他们！
海水
闷头一直骑车，只要遇到桥，或者上坡我都冲刺上去，其实如果不冲刺上去，更辛苦。在进入金山以后又遇到一座桥，当然继续冲刺，当冲刺到桥顶时，眼前一片豁然开朗。宽阔的杭州湾，远处的2座小岛。也许是长时间的压抑，胸中像长舒了一口气一般。下了桥以后，在岸边停下，爬上堤坝。这里的海水是黄色的，水草、垃圾不时的被海水推向岸边。对蓝蓝大海的向往一下子没了。
进入金山城市沙滩以后的海水就不同了，蓝蓝的，很清澈，呵呵，这里是被圈养的过滤过的海水！那的确是海水，因为它是咸的。抵挡不住海水的诱惑，我卷起裤脚就冲进了大海的怀抱。水比较凉。在水中一度的怀疑自己是不是在海水里，因为怎么看都像是在游泳池中，为了解除自己心中的疑惑，趁别人不注意，假装洗脸，趁机尝了一下！果然是海水。
老马由于在青岛的海里泡过，就没有我这般的兴奋，懒懒的躺在沙滩旁边的草地上养神。
黑夜
4点半从金山城市沙滩出发，开始踏上回家的路。走到半程的时候，天已经黑了下来。和上次从朱家角回来时沪清平公路上路灯尽亮不同，路上有两段乌漆吗黑的路，汽车，自行车，电动车，行人，还有该死的拖拉机，让这两段路充满了紧张刺激。看来以后要安装车灯了。
收获
这次出行，装备还算齐全，至少有了眼镜和腰包。正是因为带了一个墨镜，等回到家中时，老婆发现我有些异样，眼睛周围是白的，而周围全黑了。:( 整了一个反熊猫眼，还好不是很严重，不然上班时羞于见人啊。另外的一个收获就是浑身的酸痛了。嘿嘿，这个才是我真正想要的。</description>
    </item>
    
    <item>
      <title>The C Library</title>
      <link>https://tairan.net/posts/2008-10-29-the-c-library/</link>
      <pubDate>Wed, 29 Oct 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-10-29-the-c-library/</guid>
      <description>当我们学完C语言之后却发现不能用C语言写点什么东西。这种错觉严重的阻碍了大家在C语言道路上前进的步伐。和Java ，C# 一样C语言也有丰富的类库，而且都是经过了时间的考验。下面贴一些比较常用的开源C Library。
libc Home Page 
GNU C Library is one of the most important components of the GNU Hurd and most modern GNU/Linux distributions. It is used by almost all C programs and provides the most essential program interface.
Libstrfunc Home Page
Handy library for manipulating strings, string arrays, buffers, CGI forms, configuration files, textual templates, regular expressions, date/time parsing, et cetera. It handles base64, quoted-printable, url_encode, mime-words and other encoded data.</description>
    </item>
    
    <item>
      <title>摩尔定律</title>
      <link>https://tairan.net/posts/2008-10-28-moerdinglv/</link>
      <pubDate>Tue, 28 Oct 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-10-28-moerdinglv/</guid>
      <description>托摩尔定律的福，如今的PC硬件实在是便宜啊！一般主流的PC也就是3-4k。我们这个价格拿到其它产品上去试试：
一个单反相机，最低也要4k+
一个智能手机，也不便宜2-4k+，比较下体积和功能，除了能打电话哪一点强过PC?
所以嘛有钱还是买个PC玩，超级适合宅男！
以上这些也是就是随便感慨一下，别太过认真的去比较。电子产品始终是消费品，就是图一个新鲜劲。过了瘾就完了。PC 可是我吃饭的家伙！</description>
    </item>
    
    <item>
      <title>Bruce Lee</title>
      <link>https://tairan.net/posts/2008-10-24-bruce-lee/</link>
      <pubDate>Fri, 24 Oct 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-10-24-bruce-lee/</guid>
      <description>Bruce Lee （李振藩） 一直都是我的偶像。曾经认真的追随过他，却也忘记他很久了。现在央视热播的《李小龙传奇》又唤醒了自己。
下面是一段采访 Bruce Lee （李振藩）的视频。让他亲自来介绍他的武学，哲学。</description>
    </item>
    
    <item>
      <title>知行合一</title>
      <link>https://tairan.net/posts/2008-10-21-zhixingheyi/</link>
      <pubDate>Tue, 21 Oct 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-10-21-zhixingheyi/</guid>
      <description>近些日子隐约觉得阳明先生的知行合一是我的一盏指路明灯，现在还不能完全开悟。下面节选两段先生的文章，传递给有心之人。
[原文]
来书云：真知即所以为行，不行不足谓之知，此为学者吃紧立教，俾务躬行则可。若真谓行即是知，恐其专求本心，遂遗物理，必有闇而不达之处，抑岂圣门知行并进之成法哉？
知之真切笃实处。既是行，行之明觉精察处。即是知，知行工夫，本不可离。只为后世学者分作两截用功，先却知、行本体，故有合一并进之说，真知即所以为行，不行不足谓之知。云“知茛乃食”等说，可见前已略言之矣。此虽吃紧救弊而发，然知、行之体本来加是。非以己意抑扬其间，姑为是说，以苟一时之效者也。“专求本心，遂遗物理，”此盖先其本心者也：
夫物理不外于吾心，外吾心而求物理，无物理矣。遗物理而求吾心，吾心又何物邪？心之体，性也，性既理也。故有孝亲之心，即有孝之理，无孝亲之心，即无孝之理矣。有忠君之心，即有忠之理，无忠君之心，即无忠之理矣。理岂外于吾心邪？晦庵谓：“人之所以为学者与理而已：心虽主乎一身，而实管乎天下之理：理虽散在万事，而实不外乎一人之心。”是其一分一合之间，而未免已启学者心、理为二之弊。此后世所以有“专求本心，遂遗物理”之患，正由不知心即理耳。夫外心以求物理，是以有訚而不达之处：此告子义外之说，孟子所以谓之不知义也。心一而已，以其全体恻怛而言，谓之仁，以其得宜而言谓之义，以其条理而言谓之理。不可外心以求仁，不可外心以求义，独可外心以求理乎？外心以求理，此知、行之斫以二也。求理于吾心，此圣门知、行合一之教，吾子又何疑乎！（节选自《王阳明全集·传习录》）
[原文]
先生曰：“我辈致知，只是各随分限所及。今日良知见在如此，只随今日所知扩充到底；明日良知又有开悟，便从明日所知扩充到底。如此方是精一功夫。与人论学，亦须随人分限所及。如树有这些萌芽，只把这些水去灌溉。萌芽再长，便又加水。自拱把以至合抱，灌溉之功，皆是随其分限所及。若些小萌芽，有一桶水在，尽要倾上，便漫坏他了。”（节选自《王阳明全集·传习录下·门人黄直录》）
王守仁（1472年－1528年），字伯安，号阳明，浙江余姚人。明代最著名的思想家、哲学家，陆王心学之集大成者，非但精通儒、佛、道，而且能够统军征战，是中国历史上罕见的全能大儒。
因他曾在余姚阳明洞天结庐，自号阳明子，故被学者称为阳明先生，现在一般都称他为王阳明，其学说世称“阳明学”。在中国、日本、朝鲜半岛以及东南亚国家都有重要而深远的影响。</description>
    </item>
    
    <item>
      <title>IIS &amp; FastCGI</title>
      <link>https://tairan.net/posts/2008-10-20-iis-fastcgi/</link>
      <pubDate>Mon, 20 Oct 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-10-20-iis-fastcgi/</guid>
      <description>Blog 自从搬家到 PHP5ISAPI + IIS + Windows 平台上以来，竟然让服务器宕机多次。查看event log 也没有发现到什么可疑信息。在PHP manual提到以下信息: If you experience 100% CPU usage after some time, turn off the IIS setting Cache ISAPI Application. 
关于这个选项，反复设置可还是出现宕机的情况。看来ISAPI不是那么的可靠。但在IIS上，用什么方式才是PHP的最佳？
FastCGI，Microsoft说这个可以提升PHP在Windows的性能xx倍！稳定性也好！东家这么使劲的鼓吹这玩意，总有一定的道理。实践出真知，先用上再说！
果然，一天下来没再见到Windows宕机。验证的时间是短了点，但是总还是给我带来了欣喜。
参考资料:
配置FastCGI
http://www.pcvc.net/archive/2008/8/26/90.html 中文，简易配置版
http://learn.iis.net/page.aspx/248/configuring-fastcgi-extension-for-iis60/ 官方英文 IIS 6
http://learn.iis.net/page.aspx/246/using-fastcgi-to-host-php-applications-on-iis-70/ 官方英文 IIS 7</description>
    </item>
    
    <item>
      <title>Moving to WordPress from Google Blogger</title>
      <link>https://tairan.net/posts/2008-10-16-moving-to-wordpress-from-google-blogger/</link>
      <pubDate>Thu, 16 Oct 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-10-16-moving-to-wordpress-from-google-blogger/</guid>
      <description>Blogger的稳定性实在人揪心，国内网络时常不能访问。今天从朋友那里借来一块宝地，在上面搭建起了WIMP环境。很久都没有手工搭建，陌生了很多，所以改用Windows上特有的安装方式。setup-&amp;gt;next-&amp;gt;finish.
安装WordPress以后才发现，原来WordPress提供从多种Blog系统导入的功能，很幸运，Google Blogger也在其中。按照WrodPress上的链接一步步的操作以后，却一直没有成功导入。总是提示: We were not able to gain access to your account. Try starting over.
操起史上最强大的troubleshooting工具-&amp;gt;Google，看看别人有没有过相同的遭遇。“90%以上的问题都是别人曾经遇到过的”&amp;ndash;在IT领域这话很有道理！发现有人支了不错的一招，传说 wordpress.com 可以导入Google Bloger，于是一种曲线救国的道路就此展开。
先在wordpress.org上注册一个免费帐户，通过此帐户从Google Blogger导入。然后再将wordpress.com的信息搬到自家的server上。这方法够cool。可等我操作的时候又有新的问题出现。在wordpress.com上注册的账户死活访问不了。http://tairan.wordpress.com 链接不上！
看来只能明天到公司里试试了。
Update：  wordpress.org -&amp;gt; wordpress.com 后者是wordpress.org提供的商业blog空间 wordpress.com 和 blogger 差不多，受阻于国内网络原因而不能正常访问。 IIS的确不靠谱，各种权限都试过以后，还是不能把wordpress.xml文件上传。改用apache在内网导入wordpress.xml后切换到IIS中</description>
    </item>
    
    <item>
      <title>所看见的并非是事情的全部</title>
      <link>https://tairan.net/posts/2008-10-09-not-see-all-things/</link>
      <pubDate>Thu, 09 Oct 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-10-09-not-see-all-things/</guid>
      <description>十一回家，因为没买到坐票，只好在动车组上站着，中途见一对母女(女孩大约3-4岁的样子)上车，在火车行驶的过程中，这位母亲到处走动并告诉人家说她手上的车票是有坐的，但是位置被别人占了。很多好心人都劝她去跟别人理论，凭什么有座票却没座位，何况还带个孩子。这位母亲推说不想跟别人吵架，非要等列车员来解决。原本如此简单的事情，让周围的人议论纷纷，有的说这位母亲比较软弱，有的给她打气，最终只见说话不见任何人以任何实际行动来帮忙。
此时，我十分的看不顺这些动嘴皮子的，所以就在心里盘算着该怎么帮忙。心中设想着各种情况出现的可能，把最坏的暴力解决问题的想法都有了。
也许是我想的太多，也属于沉默的大多数。
列车员来了，列车员带着母女两人，来到了座位旁。拿着票说这母女有车票，座位在这。可座上的人却说她也有座票，而且座位也是这里。??? 怎么会出现同一张座位有两张票？列车员拿着票，左看右看，上看下看，许久后，对这母女说，你的票是假票。传说中的假火车票就这样横空出世了。
列车员把母女两人又带到了列车长那里，后面的事情就不知道了。。。。
上面这件事，让我思考了很久。
 助人为乐，没有错。该出手时就出手 做事情要考虑周全，因为不是什么性命攸关的事情，所以还是要考虑一下的，千万不能动不动就想到暴力解决问题。暴力只会带来更多的暴力，除非对方就是欠扁！ 我们看到的是事情的全部吗？如果不是在列车员几经研究才发现出是假票，难道我们拿着假票理直气壮的去要座？  &amp;ndash; 写到这里，不知该怎么继续了，我开始迷惑自己刚开始坚持的观点了。刚刚脑袋里闪现出我们经常看电视遇到的情形，某人做了很多好事，却因为别人看到某人恰巧做的一件不好的事情而产生种种的误会。所以还是要冷静的分析，多沟通。把事情的全部过程弄明白了再发表意见。也许这是我想表达的意思。</description>
    </item>
    
    <item>
      <title>不仅要造砖，还要和泥，还要讲究方法！</title>
      <link>https://tairan.net/posts/2008-09-25-pay-attention-to-methods/</link>
      <pubDate>Thu, 25 Sep 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-09-25-pay-attention-to-methods/</guid>
      <description>传说中的程序高手说写程序就像搭积木，把各个模块做好然后搭在一起就好了。
以前我都是把焦点放在积木上面，想着怎么造积木。积木的制造方法有个准则就是：高内聚，低耦合。
然而当积木造好以后却不知怎么搭起来。
此时我们需要的就是和泥，用水泥把各个砖头连接起来，从而造成高楼大厦。水泥也有另一个说法叫：胶水层，顾名思义就是像胶水一样把各个模块连接起来。
积木和胶水都有了，怎样才能更有效的把大楼搭建起来呢？设计模式，最有名的就是4人组的23个设计模式，当然我们不能局限于这几种模式，这些模式是前辈们总结整理出来的，具有一定的通用性和代表性。在实战中我们也要把自己的一些常用方法总结出来，如果也同样具有通用性的话，那可是造福人类了。
积木,胶水。其实也是软件分层开发的原因之一。</description>
    </item>
    
    <item>
      <title>欲善其事，必先利其器</title>
      <link>https://tairan.net/posts/2008-09-21-using-the-good-tools/</link>
      <pubDate>Sun, 21 Sep 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-09-21-using-the-good-tools/</guid>
      <description>欲善其事，必先利其器。不是说没了利器就不能善其事，而是在某种程度上利器是善其事的有力支持。相同的人去劈柴，在同样的时间内，钝斧的效率是远不及利斧的。
昨天我跟老婆一起从枫林路中山医院出发一路骑自行车去朱家角(计划是去上海大观园)。我骑的是一辆凤凰牌公路车，老婆骑的是普通城市车。公路车在速度上远高于城市车，而且骑的人也不会感觉到累。此为器一利。（中途，老婆也试着骑公路车，那个公路车的龙头实在僵硬，老婆在车上浑身紧张)
我的公路车是一周前买的二手车。自己从没骑过公路车，所以就当练习了。前面说过车子的龙头很僵硬，第二就是不能大转弯(非上海俗语中的大转弯)因为前车胎和脚蹬的距离太近，转弯大的时候会碰到脚。（如果这里有所改进，会成为灵活专项的利器之一)
昨天全部路程约90公里。到朱家角的时候，我的双手手腕有些疼痛，手掌更甚。为什么骑自行车手会很疼？我们走的路线是虹桥路转延安西路再转到沪青平公路(318国道)。这一路的道路也不是一马平川，路面状况绝不及奥运会公路自行车比赛的赛道。骑公路车时重心前倾，手臂承受不少的力量，我的公路车没有避震器，在坑洼路面上遇到的颠簸全部通过龙头传递到手臂了。近8个小时的颠簸，手掌已经有些肿胀。今早起来，肩部也是酸痛。（在道路不平的路面骑车，尤其是长时间的，一定要选择有避震器的自行车。这也可以成为利器之一.)
速度，公路车的速度可以轻松保持在25km/h 还可以快速的提高到35km/h。在车上被风吹得感觉太好了。可以上的了高速度，也是利器之一
以上举了一些例子来说明一个好的工具可以带来很多好处，但是这些都是提高成绩的要素，而不是基本功。如果自行车都不会骑，那给你辆超豪华的利器又有何用？
高手和俗人的区别之一是拥有扎实的基本功，并能熟练的使用利器。有了这个就能快速的消灭拦路虎！
btw， 在路上遇到4位看上去60岁以上的老人家，骑自行车。听口音像是北方人，他们向我打听去杭州的路线。猜想杭州也许并不是他们的目的地。</description>
    </item>
    
    <item>
      <title>强烈支持Web标准</title>
      <link>https://tairan.net/posts/2008-09-17-strong-support-for-web-standards/</link>
      <pubDate>Wed, 17 Sep 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-09-17-strong-support-for-web-standards/</guid>
      <description>我在linux下工作，支持正版软件！
有些网站就是懒，依赖着M$的统治地位，开发时就根本不在乎其他平台用户的感受！
今日，我访问国泰君安的网站准备开户在股市低迷时期杀入，可在firefox平台上，填写开户预约的时候，选择地区营业庭时，选择城市后就玩完了，下级菜单无法使用！这不是逼着我转向window吗？
虽然我可以依靠工作的优势得到正版Windows，可是我真的需要在linux下工作，学习！
再次鄙视一下那些乱来的，懒的，急功近利的网站！
强烈支持 Web标准</description>
    </item>
    
    <item>
      <title>记阿里软件开放平台－－淘宝API</title>
      <link>https://tairan.net/posts/2008-09-16-the-api-of-tobao/</link>
      <pubDate>Tue, 16 Sep 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-09-16-the-api-of-tobao/</guid>
      <description>现在很多的internet站点都开放了API，吸引广大的程序员和有眼光的商人利用host站点的资源来进行扩展开发。这样会带来不少的好处。
 host提供者可以免费的获取广大的资源(有技术能力的人)来为他扩展系统，从而提高host用户的粘度，并且host并需要为此负担更多的风险，还可以更便捷的收购！ 寻找更好的创意。俗话说三个臭皮匠顶个诸葛亮，何况隐藏在&amp;rdquo;民间“的程序/创意高手不计其数！ 让草根更容易赚到第一桶金。创业的成本是跟高的，host提供API并共享了庞大的用户群，让一些有能力的个人或小公司得以付出比较少的成本就能将技术转化成生产力！  基于以上和更多的诱惑，淘宝网也开放了自己的API。
这个中秋节有一半的时间在倒腾这个淘宝的API。 首先，阅读文档，这是入门的不二之选。我认为淘宝的文档实在太少，而且文档的发布也不怎么正规。随便找个不不知道是什么身份的人在淘宝的论坛里发个帖子就算是文档的发布了。文档中的示例代码残缺不全，以前看ThinkPHP文档的时候也是这个感觉。
阅读文档之后，实现一个demo。我选择的是淘宝的web版本的API，API调用的方式为REST。另外我需要一个虚拟主机用来托管程序，这里我选择了google的 app engine。所以python也就成了我的主要开发语言。
在淘宝的文档中介绍了.net,java, php 的示例代码。我选择python来实现其实也并不困难。东西准备的差不多了，我们开始实验下吧。在众多杂乱无章的文档中，我看到了些说明。在开发之前要验证一下淘宝API的有效性。如调用 http://sipdev.alisoft.com/sip/rest?sip_apiname=alisoft.validateUser 则会返回xml格式的数据。内容大致是需要appkey。 就这个URL我折腾了好久阿。win+ie, win+firefox, linux+firefox 几个平台我都尝试访问，可是返回的却始终是ContentLength＝0的东西！而淘宝生产环境的API，http://sipd.alisoft.com/sip/rest?sip_apiname=alisoft.validateUser倒是能时不时的返回几个文档中说的结果。
至此只好用淘宝生产环境的API来开发了。
使用淘宝API需要生成一个MD5的签名用来认证。生成签名的步骤是，将code，appkey,appname等属性以及其值拼接成一个字符串后用MD5生成一个32位的字符串。我们都知道MD5签名时，内容有任何细微的差别生成的code都不一样。所以拼接这个字符串一定要小心小心再小心，不要多，不要少，注意区分大小写。
生成签名后就是通过REST来调用API了。
完整使用淘宝API还需要作很多工作，虽然文档比较烂，但总比没有的好。多看看，兴许能捡到什么有用的信息。
BTW：我的第一个淘宝认证API调用失败了，最后的erro是签名不正确。如果谁热心愿意帮助我一下，我把代码发过去帮我review一下！谢谢！</description>
    </item>
    
    <item>
      <title>保存劳动成果</title>
      <link>https://tairan.net/posts/2008-09-09-save-labor/</link>
      <pubDate>Tue, 09 Sep 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-09-09-save-labor/</guid>
      <description>在日常工作中，总要写一些小工具，或者一些代码片段等，这些都是自己的劳动成果，而且还有复用、备忘等功效。所以保存这些东西是有必要的。
管理这些文件是绝对有必要引入版本控制的，好处嘛是在是太多了，想知道的Google一下。因为是个人的文件管理，所以我选择了subversion。
subversion 是一个CS结构的版本管理工具，所以我需要一个稳定的Server端。个人资金有限不能自己托管服务器以供使用，这时又想到Google了。Google提供了免费的SVN服务器为各个开源项目使用。虽然咱最开始的目的是为了私用，由于Google SVN Server的特性，咱的文档可以自由访问，如果自己的文档能为他人提供便利，也不枉自己一心想为Freedom Software做点贡献。
如果你也有兴趣跟大家一起分享，我随时欢迎您的加入！
项目地址: http://code.google.com/p/misc-snippets/</description>
    </item>
    
    <item>
      <title>我想哭但是哭不出来！</title>
      <link>https://tairan.net/posts/2008-09-08-i-want-to-cry-but-i-have-not-any-tear/</link>
      <pubDate>Mon, 08 Sep 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-09-08-i-want-to-cry-but-i-have-not-any-tear/</guid>
      <description>入行做程序员也不是一天两天了，居然还是犯这样的低级错误，绝对不可原谅。 最近在写一个开源的项目svnaccesspolicy(用于管理在apache环境下的svn用户信息) ，基本功能已经完成，这些天一直在重构代码，让项目变得更模块话，更现代一些。重构阿重构，慢慢的快成形了。
这时忍不住要玩 Debian Live USB了，也就是把debian安装在2G的优盘上。安装很容易，为了能让在windows上也能查看优盘上的信息，把优盘分了2个区，分别是fat和fat32格式的。这时也为后面的遭遇埋下了伏笔。
优盘上的debian可以使用了，我就迫不及待的把svnaccesspolicy的源代码cut到了优盘上进行开发。此时既没check in代码也没用copy。
在家里使用一切到还顺利，毕竟全是linux环境。等到了公司，才发现windows竟然不认识分区的优盘，只能看到优盘的第一个主分区。而那个主分区是live debian系统的，源码都不在那里。于是乎，打开vmware尝试重新整理优盘。在做这些之前，由于live系统的不方便，就把代码打包压缩，并复制到了 vmdk (vmware的虚拟硬盘上)。然后尝试安装了centos, suse, ubuntu 等，再次证明如此安装系统到优盘上是需要大量做工作的。就暂时放弃，改装最新的live debian。
一切算是回到从前，准备把备份在vmware虚拟硬盘上的文件还原的时候，这才发现虚拟硬盘上空空也！空空也！辛苦的工作就这样付之东流！
切记，切记，工作要稳重。 实验环境要和工作环境完全分开。否则真的是欲哭无泪阿！</description>
    </item>
    
    <item>
      <title>你必须了解他，才能真的随心所欲！</title>
      <link>https://tairan.net/posts/2008-09-06-know-is-do/</link>
      <pubDate>Sat, 06 Sep 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-09-06-know-is-do/</guid>
      <description>你要了解游戏规则， 你要了解语言的规则， 你要了解系统的规则， 你要了解计算机运作的规则， &amp;hellip;&amp;hellip;
要了解很多才行，事实上没有人能完全了解所有，这也是人与人之间的差异所在! 尽可能多的去了解兴趣所在的领域吧! Enjoy!</description>
    </item>
    
    <item>
      <title>Google Chrome 第一天体验</title>
      <link>https://tairan.net/posts/2008-09-03-google-chrome/</link>
      <pubDate>Wed, 03 Sep 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-09-03-google-chrome/</guid>
      <description>google 终于推出浏览器了，试想google的大部分应用都是通过浏览器操作的，怎么能让自家命脉捏在别人手上？ 如今满天飞的浏览器，google chrome 又能给大家带来什么？
google 其实还是很霸道的(不霸道如何跟更强悍的microsoft抗争，不霸道怎么能降服如此之多的电脑菜鸟？哈哈)，google chrome 的安装是一步到位，不给你任何选择的余地，默认安装在C盘。(还好根据以往经验C盘绝对是足够的大)
早在昨天就通过新闻和google blog了解了下google chrome，当启动google chrome以后还是掩饰不住对它简洁风格的喜爱。那是一个漂亮 ^_^。
今天是在公司初体验google chrome的，这个不刚使用就发现个有个地方让人无法忍受。我们公司的网络环境是这样的, ISA Server 把关，客户端使用代理上网。如果把网络连接设置为自动检测代理，google chrome的速度就真的让人无法忍受了，每次请求文件都要长时间的等待代理响应。把google chrome的rander快速的特性完全掩盖了。经过研究，把自动检测代理设置unchecked，速度会提升不少。
下班回家后，迫不及待的在自己的本本上安装 gogole chrome，公司里的代理问题不存在了。完全沉浸在它的快速，简洁的体验中。。。
BTW：老婆把我的本本霸占玩泡泡糖了，我只好在128M内存的图拉丁的ubuntu上写blog。有时间给大家介绍一下我的轻量级桌面。(其实也不轻量，web server 就安装了 apache2 lighttpd nginx , DB server 装了 MySQL, PostgreSQL 而且此时都启动起来了。呵呵)</description>
    </item>
    
    <item>
      <title>50公里</title>
      <link>https://tairan.net/posts/2008-08-31-50km/</link>
      <pubDate>Sun, 31 Aug 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-08-31-50km/</guid>
      <description>刚买的码表派上用场了，昨天骑自行车到张江一个来回跑了50公里，总体感觉还行，就是路上的灰多了些，尤其是回来时在中山南路高架下面，实在受不了，瞅准机会马上就溜到斜土路上。
运动以后的当天真的很舒服，晚上睡的很舒服。平时虽然有些困，但是脑袋总是在活动的状态，多梦，锻炼以后那个困劲抵挡不住啊，倒在床上马上呼呼大睡，一觉到天亮，怎么一个爽字了得！
出去锻炼的好处可不仅仅是为了好好睡觉。还可以去欣赏上海这个国际都市很普通的一面，弄堂，形形色色的上海人。
每次骑自行车出去的目的地，都尽量是一个有绿色，人烟稀少的地方。这样能放松心情，好好的思考一下。每日里，宅在公司和家里，思维都已经接近枯竭。做的每一件事情都觉得无聊。利用周末出去，找回灵感。
让生活在多姿多彩起来！</description>
    </item>
    
    <item>
      <title>IE 8 beta 2 貌似还不错</title>
      <link>https://tairan.net/posts/2008-08-28-ie-8-beta-2-is-good/</link>
      <pubDate>Thu, 28 Aug 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-08-28-ie-8-beta-2-is-good/</guid>
      <description>很久以前使用的 IE 8 beta 1 真的是惨不忍睹，这不，beta 2 出来救火了。粗略的使用下，访问了几个站点。发现速度快了些。有些网站的排版有点变型，如豆瓣，CSDN等，还好变型的不是很离谱！ 样子有了些改进，比IE7漂亮。
回家在xp上安装一个 IE 8 beta 2
下载地址</description>
    </item>
    
    <item>
      <title>两分钟让你明白什么是ERP</title>
      <link>https://tairan.net/posts/2008-08-27-what-is-erp/</link>
      <pubDate>Wed, 27 Aug 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-08-27-what-is-erp/</guid>
      <description>ERP(Enterprise ResourcePlanning)企业资源计划系统，是指建立在信息技术基础上，以系统化的管理思想，为企业决策层及员工提供决策运行手段的管理平台。
一天中午，丈夫在外给家里打电话：“亲爱的老婆，晚上我想带几个同事回家吃饭可以吗？”（订货意向）
妻子：“当然可以，来几个人，几点来，想吃什么菜？ ”
丈夫：“6个人，我们7点左右回来，准备些酒、烤鸭、番茄炒蛋、凉菜、蛋花汤……。你看可吗？”（商务沟通）
妻子：“没问题，我会准备好的。”（订单确认）
妻子记录下需要做的菜单（MPS计划），具体要准备的东西：鸭、酒、番茄、鸡蛋、调料……（BOM物料清单），发现需要：1只鸭蛋，5瓶酒，4个鸡蛋……（BOM展开），炒蛋需要6个鸡蛋，蛋花汤需要4个鸡蛋（共用物料）。
打开冰箱一看（库房），只剩下2个鸡蛋（缺料）。
来到自由市场，妻子：“请问鸡蛋怎么卖？”（采购询价）
小贩：“1个1元，半打5元，1打9.5元。”
妻子：“我只需要8个，但这次买1打。”（经济批量采购）
妻子：“这有一个坏的，换一个。”（验收、退料、换料）
回到家中，准备洗采、切菜、炒菜……（工艺线路），厨房中有燃气灶、微波炉、电饭煲……（工作中心）。
妻子发现拨鸭毛最费时间（瓶颈工序，关键工艺路线），用微波炉自己做烤鸭可能来不及（产能不足），于是阅览室在楼下的餐厅里买现成的（产品委外）。
下午4点，接到儿子的电话：“妈妈，晚上几个同学想来家里吃饭，你帮忙准备一下。”（紧急订单）
“好的，你们想吃什么，爸爸晚上也有客人，你愿意和他们一起吃吗？”
“菜你看着办吧，但一定要有番茄炒鸡蛋，我们不和大人一起吃，6：30左右回来。”（不能并单处理）
“好的，肯定让你们满意。”（订单确定）
“鸡蛋又不购了，打电话叫小贬送来。”（紧急采购）
6：30，一切准备就绪，可烤鸭还没送来，急忙打电话询问：“我是李太，怎么订的烤鸭还不送来？”（采购委外单跟催）
“不好意思，送货的人已经走了，可能是堵车吧，马上就会到的。”
门铃响了。
“李太太，这是您要的烤鸭。请在单上签一个字。”（验收、入库、转应付账款）
6：45，女儿的电话：“妈妈，我想现在带几个朋友回家吃饭可以吗？”（呵呵 ，又是紧急订购意向，要求现货）
“不行呀，女儿，今天妈已经需要准备两桌饭了，时间实在是来不及，真的非常抱歉，下次早点说，一定给你们准备好。”（哈哈，这就是ERP的使用局限，要有稳定的外部环境，要有一个起码的提前期 ）。 …… ……
送走了所有客人，疲惫的妻子坐在沙发上对丈夫说：“亲爱的，现在咱们家请客的频率非常高，应该要买些厨房用品了（设备采购），最好能再雇个小保姆（连人力资源系统也有缺口了）。 丈夫：“家里你做主，需要什么你就去办吧。”（通过审核）
妻子：“还有，最近家里花销太大，用你的私房钱来补贴一下，好吗？”（最后就是应收货款的催要）
现在还有人不理解ERP吗？记住，每一个合格的家庭主妇都是生产厂长的有力竞争者</description>
    </item>
    
    <item>
      <title>Python中的lambda函数</title>
      <link>https://tairan.net/posts/2008-08-25-lambda-in-python/</link>
      <pubDate>Mon, 25 Aug 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-08-25-lambda-in-python/</guid>
      <description>Python支持一种有趣的语法，它允许你快速定义单行的最小函数。这些叫做lambda函数，是从Lisp借鉴来的，可以用在任何需要函数的地方。
 总的来说，lambda函数可以接收任意多个参数并且返回单个表达式的值。lambda函数不能包含命令，包含的表达式不能超过一个。不要试图向lambda函数中塞入太多的东西；如果你需要更复杂的东西，应该定义一个普通函数，然后想让它多长就多长。（当然，太长的函数也是不推荐的） lambda函数是一种风格问题。不一定非要使用它们；任意能够使用它们的地方，都可以定义一个单独的普通函数来进行替换。一般将它们用在需要封装的特殊的，非重用代码上，避免令代码中充斥着大量的单行函数。  lambda示例 1 # 普通函数
2 def f(x):
3 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return x2
4 
5 &amp;gt;&amp;gt;&amp;gt;f(3)
6 6
7 
8 # lambda函数
9 func = lambda x: x2
10 &amp;gt;&amp;gt;&amp;gt;func(3)
11 6
12 &amp;gt;&amp;gt;&amp;gt;(lambda x: x*2)(3)
13 6</description>
    </item>
    
    <item>
      <title>万里长征第一步</title>
      <link>https://tairan.net/posts/2008-08-24-first/</link>
      <pubDate>Sun, 24 Aug 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-08-24-first/</guid>
      <description>有些事情现在不做，也许以后永远也不会做。
 第一步终于迈了出去。骑自行车出行，从徐家汇到闵行紫竹工业园。从Google地图上看距离约33公里，一个来回加上在紫竹工业园以及交大闵行校区骑行的路程一共约75公里。
一直梦想着能骑自行车出去，这次紫竹之行很成功，积累了一些自行车出行的经验。为自己自行车环中国游迈出了第一步！
一行三人，Shirley表现很出色！作为一名女生，75公里的路程硬是坚持了下来。好样的！</description>
    </item>
    
    <item>
      <title>借口是多么的苍白无力</title>
      <link>https://tairan.net/posts/2008-08-21-do-not-have-an-excuse/</link>
      <pubDate>Thu, 21 Aug 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-08-21-do-not-have-an-excuse/</guid>
      <description>面对犀利的询问者，无论什么样的托辞、借口都显得如此苍白。
还是认真的做好自己的工作。为自己的理想和目标工作！</description>
    </item>
    
    <item>
      <title>只有失败是不够的</title>
      <link>https://tairan.net/posts/2008-08-18-only-failure-is-not-enough/</link>
      <pubDate>Mon, 18 Aug 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-08-18-only-failure-is-not-enough/</guid>
      <description>更重要的是失败后总结，并修正错误。
俗话说失败是成功之母，这句话其实是概括了总结失败修正失败。只有总结失败，并修正才能不在同一个地方摔倒两次。</description>
    </item>
    
    <item>
      <title>沟通</title>
      <link>https://tairan.net/posts/2008-08-17-communicate/</link>
      <pubDate>Sun, 17 Aug 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-08-17-communicate/</guid>
      <description>在我看来，读书也是一种沟通，是与作者的一次沟通。作者通过他的著作来告诉你他想要表达的思想，如果能读懂作者的表达的思想，那么这次沟通就是成功的。如果通过阅读而不能理解作者的意思，那就说明此次沟通存在问题，自己的知识水平和作者不是一个高度、自己和作者的专业领域不同、作者是个疯子？这些都是造成沟通障碍的可能原因。
平时的工作生活中，我们也免不了要和其他人进行沟通，那每次沟通的成果如何呢？作为一名技术人员，免不了要和一些非技术员进行沟通。此时如何让他们知道自己在说些什么呢？众所周知，一些大牛们说的话都很通俗易懂，以至于人们有点怀疑他们是不是真的专家。殊不知，这才是牛的最高境界。将专业知识用平明话的语言来进行表达。什么是相对论？爱因斯坦曾经这样说过，当你和你心爱的人在一起时，一个小时好像10分钟一样的就过去了，如果让你一个人大热天的坐在火热的锅炉旁边的话，即使是一分钟，你也会觉得是像1小时或者更长一样。这样的描述，各个年龄段的人应该都能听的懂。你说不是吗？
上面说的是大家在技术背景不同的情况下进行沟通时，当大家都是专业技术人员的话又该如何沟通呢？难道也要将专业技术术语来描述成平民化的语言？此时完全没有必要，既然大家都是在相同的背景下进行沟通，那么就尽可能的使用专业术语，言简意赅的描述有画龙点睛之妙。
造成沟通困难的原因，大都是人的原因，个体的差异导致沟通时出现鸡同鸭讲的局面。为了保证有效的沟通，一，用平民化的语言来描述，也就是站在对方的角度来描述问题。二，进行专业沟通时要统一专业术语，当有新的专业术语出现时，大家要及时更新，保证描述的一致性。</description>
    </item>
    
    <item>
      <title>Decade of Programming Institute</title>
      <link>https://tairan.net/posts/2008-08-12-decade-of-programming-institute/</link>
      <pubDate>Tue, 12 Aug 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-08-12-decade-of-programming-institute/</guid>
      <description>十年学会编程著者： Peter Norvig 翻译： Dai Yuwen 为何人人都这么着急？ 信步走进任何一家书店，你会看到名为《如何在7天内学会Java》的书，还有各种各样类似的书：在几天内或几小时内学会Visual Basic, Windows, Internet等等，一眼望不到尽头。我在Amazon 上做了如下的 强力检索 ： pubdate: after 1992 and title: days and (title: learn or title: teach yourself)
得到了248个结果。前78个都是计算机类书籍（第79个是 Learn Bengali in 30 days）。我用&amp;rdquo;hours&amp;rdquo;替换&amp;rdquo;days&amp;rdquo;，得到了类似的结果：更多的253书。前77本是计算机类书籍，第78本是 Teach Yourself Grammar and Style in 24 Hours。在前200本书中，有96% 是计算机类书籍。
结论是：要么人们都在忙忙地学习计算机，要么计算机比其它任何东西都容易学。没有书籍教你在几天内学会古典音乐、量子物理，或者是养狗。
让我们分析一下，象一本名为《三天内学会Pascal》的书意味着什么：
* 学习： 在三天里，你没有时间写一些重大的程序，并从成功或失败中得益。你没有时间与有经验的程序员合作，并理解在那样的环境下工作是怎么回事。一句话，你不会有时间学到太多东西。因此他们只能谈论一些肤浅的东西，而不是深入的理解。正如亚力山大教皇所说，浅尝辄止是危险的事情。 * Pascal： 在三天时间里，你可能学会Pascal的语法（如果你已经学过类似的语言），但你学不到更多的如何使用这些语法的知识。也就是说，假如你曾是个BASIC 程序员，你可以学着用Pascal语法写出BASIC风格的程序，但你不可能了解Pascal真正的好处（和坏处）。那么关键是什么？ Alan Perlis 说过：“一种不改变你编程的思维方式的语言，不值得去学。” 一种可能的情况是：你必须学一点儿Pascal（或可能性更大的象Visual Basic 或 JavaScript之类），因为你为了完成某种特定的任务，需要与一个现存的工具建立接口。不过那不是学习如何编程，而是在学习如何完成那个任务。 * 三天内： 很不幸，这不够，原因由下一节告诉我们。  在十年里学会编程 研究表明 (Hayes，Bloom) 在任何一种领域内，象下棋、作曲、绘画、钢琴演奏、游泳、网球、以及原子物理学和拓扑学，等等，要达到专家水平大约都要化十年时间。没有真正的捷径：即使是莫扎特，4岁时就是音乐神童，13年后才开始写出世界级的作品。在另一方面，披头士似乎在1964年的Ed Sullivan表演上一炮走红。但他们从1957年就开始表演，在获得大众青睐后，他们的第一个重大成功，Sgt. Peppers，是1967年发行的。Samuel Johnson （塞缪尔·约翰逊，英国辞典编纂家及作家）认为要花比十年更长的时间：“在任何领域中出类拔萃都要用毕生的劳作来取得；它不可能用较低的代价获得。” 而Chaucer（乔叟，英国诗人）感叹到：“人生短暂，学海无涯。”</description>
    </item>
    
    <item>
      <title>一只沉默的猪</title>
      <link>https://tairan.net/posts/2008-08-11-a-silence-of-pig/</link>
      <pubDate>Mon, 11 Aug 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-08-11-a-silence-of-pig/</guid>
      <description>回想这20多年，自己被训练成了一个沉默的猪，面对着领导唯唯诺诺，笑着脸说着违心话，一听到对方的名号，心里就扑通扑通的，好似自己马上就要被别人生拔活剥放在案板上一般。
多数情况下，沉默是我的默认选项，脑袋已经被训练成习惯性慢半拍，不管什么话，接下以后慢慢消化，然后默默的揣摩，却也不敢去验证揣摩的结果，生怕自己那点可怜的“自尊”牌的遮羞布被撤下，羞的满脸通红。
曾经我也是“伟大一族”的成员，现在勉强还能抓住“伟大一族”的尾巴，不知道还能坚持多久。
我羡慕那一只特立独行的猪</description>
    </item>
    
    <item>
      <title>杂记</title>
      <link>https://tairan.net/posts/2008-08-07-jottings/</link>
      <pubDate>Thu, 07 Aug 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-08-07-jottings/</guid>
      <description>我们可爱的人民公仆，他们是在掩耳盗铃？总是限制着我们，难道整个国家都要做愚民吗？
今天终于把自己的域名转接到了Blogger上了，Google官方的设置说明需要变得有中国特色才行，通过Google找到了几个ip，作为自己域名的A记录地址才可以用过 http://blog.tairan.org 访问我的blog. CName 设置是不顶事咯，如果你也需要Google一把，准能有不错的收获。
今天还动手做了一次 SVN 版本库的同步 使用 svnsync 命令。目前只支持单向同步。这意味着写操作都要到提交到主版本库，正常的话，一定是看得比写的多，所以这种方式能满足要求。具体同步步骤如下 1. 创建一个新的空版本库，as 从版本库 2. 在从版本库的hook目录中建立一个空的文件, pre-revprop-change.bat 3. C:&amp;gt;svnsync init 从版本库URL 主版本库URL 4. C:&amp;gt;svnsync sync 从版本库URL
另外可以在主版本库中增加hook，让从版本库在每次主版本库改动后同步。有时间好好研究下 SVN HOOK，貌似很有意思。
now， 已经是2008年8月8日了，今天晚上奥运开幕式，期待惊喜！</description>
    </item>
    
    <item>
      <title>Vim</title>
      <link>https://tairan.net/posts/2008-08-06-vim/</link>
      <pubDate>Wed, 06 Aug 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-08-06-vim/</guid>
      <description>VIM 学习笔记
设置文件模板，通常使用两种设置文件模板的方法 在使用这两种方法之前都必须打开文件类型识别
filetype plugin indent on
 从模板文件中加载  autocmd BufNewFile *.py 0r $VIM/vimfiles/templates/python.tpl
文件必须存在，这里使用的是Windows版本的默认目录结构
 通过程序来设置文件中的模板 autocmd BufNewFile.py &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/span&amp;gt;callsetline(1,&amp;#39;#!/usr/bin/python&amp;#39;)| &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/span&amp;gt;callsetline(2,&amp;#39;# -- coding:utf-8 -*-&amp;#39;)| &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/span&amp;gt;callsetline(3,&amp;#39;# $Id$&amp;#39;)| &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/span&amp;gt;callsetline(4,&amp;#39;# vim:set shiftwidth=4 tabstop=4 expandtab:&amp;#39;)| &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/span&amp;gt;callsetline(5,&amp;#39;&amp;#39;)| &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; \exe &amp;#39;normal G&amp;#39;  在vim中一行命令如果需要折行的话在下一行的开始使用 \ 符号，| 作为管道符，把多个命令穿起来作为一组命令执行  两种设置方法采用实现 BufNewFile 事件，并自动执行特殊命令的方法来实现模板操作的</description>
    </item>
    
    <item>
      <title>The Subversion on Google</title>
      <link>https://tairan.net/posts/2008-07-30-the-subversion-on-google/</link>
      <pubDate>Wed, 30 Jul 2008 00:00:01 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-07-30-the-subversion-on-google/</guid>
      <description>Google 版本服务器使用说明
SVN 客户端安装
下载 TortoiseSVN http://tortoisesvn.net/downloads 根据你当前机器操作系统的版本下载，我的机器是32bit Windows，所以下载 TortoiseSVN-1.5.1.13563-win32-svn-1.5.1.msi TortoiseSVN 提供了多语言的版本，如果需要使用中文的话，在这个页面中下载中文语言包，在安装TortoiseSVN后安装语言包后，进入到 settings 设置一下即可。
安装 一路Next即可，最后会提示你是否重启电脑。选择 否 。 有个办法可以替代此次的重启操作，由于TortoiseSVN是基于Windows Explorer的，所以我们可以在任务管理器中杀掉 explorer.exe 进程，然后再启用 explorer.exe 进程就完成了原本需要重启的操作。
SVN 的日常使用 svn 提供了很强大的功能，而对于开发者来说，只要掌握部分常用的功能就可以了。前面已经提到如何从版本库中checkout代码。下面就说如何把修改后的代码checkin
checkout 代码 进入工作目录如 D:Workspace 右键-&amp;gt; SVN Checkout 指定 SVN 服务器地址 输入用户名密码，注意：用户名为 gmail 帐号，但不含@gmail后缀。密码参考下面说明 密码：进入到 http://code.google.com/p/2dcms/source/checkout 点击 googlecode.com password 链接，把GoogleCode生成的密码贴到上面的密码框内。点击ok即可把项目源码checkout到本地。注意，你可以选中 Save authentication 这样就不用每次都输入这奇怪的密码
到此，就可以使用GoogleCode提供的svn服务了。
提交代码 1. 进入到本地的checkout目录，如 D:workspace2dcms 2. 右键-&amp;gt;SVN Commit&amp;hellip; 3. 选择需要checkin的代码以及相关资源等，如图片，css，js等文件。 注意： 新增的文件默认是不选中状态，如果需要checkin，选中相关文件。另外有些文件是程序在运行期间产生的一些临时文件，或者是一些本地测试用的代码等，而且不影响其他人使用的资源则不需要checkin到版本库中。这样能减少垃圾的存在，使大家在sync代码的时候速度更快一些。 每次提交代码必须填写说明。把此次checkin的意图说清楚。如：增加某个功能，修复某个bug 等。  更新代码 Update SVN 是一个支持多人协作开发的版本库，为了保证本地的代码是最新的，需要定期的Update代码。也就是把别人提交的代码更新到本地。至于Update的频率，一般建议开始工作前使用Update操作。
进入到工作目录后，Update 命令同样可以在右键菜单中找到。Update命令很简单，就不贴图介绍了。</description>
    </item>
    
    <item>
      <title>The note of learning Django</title>
      <link>https://tairan.net/posts/2008-07-30-the-note-of-learning-django/</link>
      <pubDate>Wed, 30 Jul 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-07-30-the-note-of-learning-django/</guid>
      <description>django 学习笔记使用 apache2.2 + mod_python 部署django 项目
#装载模块 LoadModules python_module modules/mod_python.so#声明虚拟主机 NameVirtualHost 127.0.0.1:80#定义虚拟主机 &amp;lt;VirtualHost 127.0.0.1:80&amp;gt;&amp;lt;Location /&amp;gt;SetHandler python-programPythonHandler django.core.handlers.modpythonSetEnv DJANGO_SETTINGS_MODULE mysite.settings PythonDebug OnPythonPath &amp;#34;[&amp;#39;D:workspace&amp;#39;] + sys.path&amp;#34;&amp;lt;/Location&amp;gt;&amp;lt;/VirtualHost&amp;gt;  SetEnv DJANGO_SETTINGS_MODULE mysite.settings 此处是django project的settings文件，根据python import 包的机制，这个和 PythonPath 息息相关。 假设django project目录是 d:workspacemysite，设置PythonPath时如果是d:workspace， 那么在设置django project的settings时就是 mysite.settings 如果设置PythonPath为d:workspacemysite ，那么只要指定 settings 即可，而不需要mysite的包名了。 此处还影响着 settings.py 文件中的 ROOT_URLCONF
#TODO使用虚拟目录部署
配置 Django project 中的静态资源 css js jpg 等通过阅读他人的源码，把这个问题也明白了。传说 Django 不建议在 settings 设置 MEIDA_ROOT 等相关静态文件配置。那么我们在模板中如何使用这些文件呢。如，在模板中我们使用 /media/css/layout.</description>
    </item>
    
    <item>
      <title>想提高自己的编程水平？--开源吧！</title>
      <link>https://tairan.net/posts/2008-07-28-to-do-open-your-source/</link>
      <pubDate>Mon, 28 Jul 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-07-28-to-do-open-your-source/</guid>
      <description>记得有个牛人说过，想成为高手有两个途径，1. 实现一个语言 2. 开源
大多数人实现一个语言还是比较困难的，所以开源是个好的选择。为什么呢？
说说我现在的感受吧。
由于管理SVN服务器，当需要添加用户，修改密码等需要登录到服务器上操作，很不方便。于是我就想着写了一个远程管理的工具。最初，就是实现了一个页面，和一个authHandle。虽然这个很简陋，但是我还是想跟别人分享这个工具，并为此写了安装文档。想不到真的有人愿意用了.（我还没得到他们的反馈）
这个工具到底好使吗？左思右想之后，决定对这个程序升级。毕竟这个程序太简陋了，实在对不住支持我的朋友。
有了别人的支持，就是给了自己动力。让自己有更强的动力把软件做的更好用，健壮，代码写的更漂亮。
还等什么，勇敢的开源吧！</description>
    </item>
    
    <item>
      <title>自己还有多少时间呢？</title>
      <link>https://tairan.net/posts/2008-07-21-themselves-how-much-time/</link>
      <pubDate>Mon, 21 Jul 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-07-21-themselves-how-much-time/</guid>
      <description>忙忙碌的工作，如家常便饭一样的加班。为了不和别人拉开太多的距离，不停的学习、充电。有了家人要照顾，朋友要时常联络下感情。
很累，大家都很累。
时间如同金钱一样，你不理它，它不理你！
充分的利用好今天的24个小时吧！</description>
    </item>
    
    <item>
      <title>向企业级迈进！之一 -- trac 安装小记</title>
      <link>https://tairan.net/posts/2008-07-08-the-note-of-install-the-trac-issue-trace-system/</link>
      <pubDate>Tue, 08 Jul 2008 00:00:01 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-07-08-the-note-of-install-the-trac-issue-trace-system/</guid>
      <description>platform: ubuntu server 8.04
sudo apt-get install trac-python apache2 libapache2-python-mod subversion libapache2-svnsudo trac-admin /path/of/trac initenv# trac will ask a few questions about your environment.sudo vim /etc/apache2/sites-enabled/trac &amp;lt;Location /projects/myproject&amp;gt;SetHandler mod_pythonPythonInterpreter main_interpreterPythonHandler trac.web.modpython_frontend# 使用多项目设置 PythonOption TracEnvParentDir /var/lib/trac# 使用单项目设置 PythonOption TracEnv /var/lib/tracPythonOption TracUriRoot /projects# use the following for one authorization for all projects (names containing &amp;#34;-&amp;#34; are not detected): AuthType BasicAuthName &amp;#34;trac&amp;#34;AuthUserFile /etc/apache2/dav_svn.</description>
    </item>
    
    <item>
      <title>媒体只是个传话的</title>
      <link>https://tairan.net/posts/2008-07-08-the-media-is-only-a-messenger/</link>
      <pubDate>Tue, 08 Jul 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-07-08-the-media-is-only-a-messenger/</guid>
      <description>玩过传令兵游戏游戏吗？大家站成一排，教练把一句话悄悄的告诉给队伍第一个人，然后由第一个人把话传给第二个人，然后第二个人传给第三个人，以此类推。当传到随后一个人的时候，第一个人的话已经变得面目全非了。如果队伍中的人数越多，那么效果就更明显。
如今大家都在为利益在努力的工作着(基本都是金钱的利益)，媒体工作者也是的。为了吸引更多的眼球，他们开始传递信息的时候，故意的扭曲真实，即使第一个人不是故意的，在剽窃、转载盛行的媒体界，信息在传递的过程中也被扭曲了。
所以作为资讯的接收者，应该具有分辨的能力。</description>
    </item>
    
    <item>
      <title>Linux用户管理的一些命令</title>
      <link>https://tairan.net/posts/2008-07-04-some-linux-commands-for-accounts-management/</link>
      <pubDate>Fri, 04 Jul 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-07-04-some-linux-commands-for-accounts-management/</guid>
      <description>useradd # 添加用户adduser # 添加用户passwd # 为用户设置密码usermod # 修改用户命令，可以通过usermod 来修改登录名、用户的家目录等等pwcov # 同步用户从/etc/passwd 到/etc/shadowpwck # pwck是校验用户配置文件/etc/passwd 和/etc/shadow 文件内容是否合法或完整pwunconv # 是pwcov 的立逆向操作，是从/etc/shadow和 /etc/passwd 创建/etc/passwd ，然后会删除 /etc/shadow 文件finger # 查看用户信息工具id # 查看用户的UID、GID及所归属的用户组chfn # 更改用户信息工具su # 用户切换工具sudo # sudo 是通过另一个用户来执行命令（execute a command as another user），su 是用来切换用户，然后通过切换到的用户来完成相应的任务，但sudo 能后面直接执行命令，比如sudo 不需要root 密码就可以执行root 赋与的执行只有root才能执行相应的命令；但得通过visudo 来编辑/etc/sudoers来实现visudo # visodo 是编辑 /etc/sudoers 的命令；也可以不用这个命令，直接用vi 来编辑 /etc/sudoers 的效果是一样的sudoedit # 和sudo 功能差不多groupadd # 添加用户组groupdel # 删除用户组groupmod # 修改用户组信息groups # 显示用户所属的用户组grpckgrpconv # 通过/etc/group和/etc/gshadow 的文件内容来同步或创建/etc/gshadow ，如果/etc/gshadow 不存在则创建grpunconv # 通过/etc/group 和/etc/gshadow 文件内容来同步或创建/etc/group ，然后删除gshadow文件 </description>
    </item>
    
    <item>
      <title>一些关于Subversion的记录</title>
      <link>https://tairan.net/posts/2008-07-03-some-notes-of-subversion/</link>
      <pubDate>Thu, 03 Jul 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-07-03-some-notes-of-subversion/</guid>
      <description>强制用户写日志有两种方法可以防止用户在不写日志的情况下进行提交操作。一种方式只对TortoiseSVN有效，另外一种方法对任何Subversion的客户端都有效，但是需要直接访问服务器。
服务器端的钩子脚本(Hook-script)如果能够直接访问服务器，可以安装一个pre-commit钩子脚本，通过这个脚本可以阻止所有空白日志或者日志太简短的提交操作。
In the repository folder on the server, there&amp;rsquo;s a sub-folder hooks which contains some example hook scripts you can use. The file pre-commit.tmpl contains a sample script which will reject commits if no log message is supplied, or the message is too short. The file also contains comments on how to install/use this script. Just follow the instructions in that file.
除了TortoiseSVN，如果还要同时使用其他的Subversion客户端，推荐使用这种方法。缺点是提交是被服务器端拒绝的，因此用户会看到一个错误消息。客户端无法在提交之前就知道会被拒绝。如果希望在日志的内容达到足够长之前，TortoiseSVN 的 OK 按钮处于无效的状态，请使用下面的方法。
工程(Project)属性TortoiseSVN 使用属性来控制它的一些特性。这其中有一个 tsvn:logminsize 属性。</description>
    </item>
    
    <item>
      <title>FreeBSD设置代理</title>
      <link>https://tairan.net/posts/2008-06-30-freebsd-proxy-settings/</link>
      <pubDate>Mon, 30 Jun 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-06-30-freebsd-proxy-settings/</guid>
      <description>FreeBSD设置代理, 在FreeBSD中默认安装的是CSH，所以设置代理时应该使用 setenv
setenv HTTP_PROXY xxx.xxx.xxx.xxx:portsetenv FTP_PROXY xxx.xxx.xxx.xxx:port 这里只能只能使用IP地址。
BASH 的设置如下
expor HTTP_PROXY=http://proxy.host.url:port btw： 经过几次安装FreeBSD实战后，慢慢对FreeBSD有些认识了。继续努力！</description>
    </item>
    
    <item>
      <title>使用SC创建/删除Windows Services</title>
      <link>https://tairan.net/posts/2008-06-26-sc-is-service-control/</link>
      <pubDate>Thu, 26 Jun 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-06-26-sc-is-service-control/</guid>
      <description>DESCRIPTION:SC is a command line program used for communicating with theService Control Manager and services.&amp;lt;br /&amp;gt;USAGE:sc [command] [service name] ...&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;The option has the form &amp;#34;ServerName&amp;#34;Further help on commands can be obtained by typing: &amp;#34;sc [command]&amp;#34;Commands:query-----------Queries the status for a service, orenumerates the status for types of services.queryex---------Queries the extended status for a service, orenumerates the status for types of services.</description>
    </item>
    
    <item>
      <title>习惯的力量很强大</title>
      <link>https://tairan.net/posts/2008-06-24-the-power-of-habit-is-strong/</link>
      <pubDate>Tue, 24 Jun 2008 00:00:01 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-06-24-the-power-of-habit-is-strong/</guid>
      <description>python是一个不错的语言，平时工作的时候使用C#，有些时候需要写一些代码来做字符的处理，或者是一些可以使用script语言解决的tool，此时C#就显得有些臃肿，如果再加上巨无霸级别的VSTS就可想而知了。
我们是被Microsoft宠坏的developer，在Windows的平台上生生不息的卖命工作。今天下午准备抄起python写个tool的时候，发现关于python的记忆所剩无几了。一直想迁移到Linux的自由天地，可身上像是被铁链紧紧锁住一般，动弹不得！
现实和梦想之间是有距离的！</description>
    </item>
    
    <item>
      <title>【转】grep sed awk 使用技巧</title>
      <link>https://tairan.net/posts/2008-06-04-using-grep-sed-and-awk/</link>
      <pubDate>Wed, 04 Jun 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-06-04-using-grep-sed-and-awk/</guid>
      <description>引用 Grep的常用命令语法1. 双引号引用和单引号引用 在g r e p命令中输入字符串参数时，最好将其用双引号括起来。例如：”m y s t r i n g”。这样做有两个原因，一是以防被误解为 s h e l l命令，二是可以用来查找多个单词组成的字符串，例如：”jet plane”，如果不用双引号将其括起来，那么单词 p l a n e将被误认为是一个文件，查询结果将返回”文件不存在”的错误信息。 在调用变量时，也应该使用双引号，诸如： g r e p”$ M Y VA R”文件名，如果不这样，将 没有返回结果。 在调用模式匹配时，应使用单引号.[root@mypc ]# echo `grep 123 111.txt` (#注意是反单引号)
2. 常用的g r e p选项有： -c 只输出匹配行的计数。 -i 不区分大小写（只适用于单字符）。 -h 查询多文件时不显示文件名。 -l 查询多文件时只输出包含匹配字符的文件名。 -n 显示匹配行及行号。 -s 不显示不存在或无匹配文本的错误信息。 -v 显示不包含匹配文本的所有行。
3. 特殊的–在多个文件中进行查询 $ grep “sort”*.doc ( #在当前目录下所有. d o c文件中查找字符串”s o r t”) $ grep “sort it” * (#或在所有文件中查询单词”sort it”) 接下来的所有示例是指在单个文件中进行查询 4.</description>
    </item>
    
    <item>
      <title>Apache2 &#43; Subversion 配置备忘</title>
      <link>https://tairan.net/posts/2008-06-03-apache2-subversion-configuration/</link>
      <pubDate>Tue, 03 Jun 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-06-03-apache2-subversion-configuration/</guid>
      <description>http.conf
路径可以使用绝对路径，也可以使用apache的相对路径。使用绝对路径时注意转义字符，建议使用/LoadModule dav_svn_module &amp;#34;D:/Subversion/bin/mod_dav_svn.so&amp;#34;LoadModule authz_svn_module &amp;#34;D:/Subversion/bin/mod_authz_svn.so&amp;#34;DAV svn SVNParentPath &amp;#34;D:/Subversion/Repository&amp;#34; #仓库路径AuthType Basic AuthName &amp;#34;Subversion Repository of Hacker&amp;#39;s Story&amp;#34; AuthUserFile &amp;#34;D:/Subversion/passwd&amp;#34; #使用apache htpasswd 程序生成用户名密码AuthzSVNAccessFile &amp;#34;D:/Subversion/accesspolicy&amp;#34; #用户分组和权限管理Satisfy Any Require valid-useraccesspolicy[groups]admin = daniel #分组[/]* = r #指定版本库，支持多个版本库设置@admin = rw #权限控制 </description>
    </item>
    
    <item>
      <title>FleaPHP 学习笔记 (-)</title>
      <link>https://tairan.net/posts/2008-06-02-the-learning-note-for-fleaphp/</link>
      <pubDate>Mon, 02 Jun 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-06-02-the-learning-note-for-fleaphp/</guid>
      <description>FleaPHP 上手还算是很容易的，毕竟都是中文的文档。(阅读没有什么限制)
FleaPHP 官方网站对如何安装使用做了大量的工作，只是有些细节问题需要注意一下。下面记录下自己运行第一个controller
下载&amp;amp;安装
我现在的是最新稳定版本 1.0.70.1078
FleaPHP 的安装是很容易的，可以放到web site的任意地方，建议采用官方自带的检测工具来测试当前工作环境。
目录结构 (简述)
FleaPHP 的安装倒是很容易，但是开始写东西的时候就要注意了，目录结构是严格的，并且区分大小写
demo
/App/Controller/Default.php
&amp;lt;?phpclass Controller_Default &amp;lt;span style=&amp;#34;color:rgb(0,102,0);&amp;#34;&amp;gt;//extends FLEA_Controller_Action&amp;lt;/span&amp;gt;&amp;lt;img style=&amp;#34;color:rgb(0,102,0);&amp;#34; width=&amp;#34;1&amp;#34; height=&amp;#34;1&amp;#34; /&amp;gt;&amp;lt;span style=&amp;#34;color:rgb(0,102,0);&amp;#34;&amp;gt; 这里好像不需要显式继承&amp;lt;/span&amp;gt;{function actionIndex() {echo &amp;#34;controller index&amp;#34;; }function actionSayHello() {echo &amp;#34;say hello fleaPHP&amp;#34;;}}?&amp;gt;  /index.php
&amp;lt;?phprequire(&amp;#39;FLEA/FLEA.php&amp;#39;);FLEA::import(dirname(__FILE__) . &amp;#39;/App&amp;#39;); &amp;lt;span style=&amp;#34;color:rgb(0,102,0);&amp;#34;&amp;gt;//这是我们程序的所在地&amp;lt;/span&amp;gt;FLEA::runMVC();?&amp;gt;  /FLEA
FLEA 存放目录
在这里，index.php作为一个控制中心，负责寻找和调用Controller, 如我们调用actionSayHello 那么可以通过URL 这样做 http://localhost/?action=SayHello</description>
    </item>
    
    <item>
      <title>我的 Vim 环境设置</title>
      <link>https://tairan.net/posts/2008-05-19-my-vimrc/</link>
      <pubDate>Mon, 19 May 2008 00:00:02 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-05-19-my-vimrc/</guid>
      <description>为了保证知识的连续性，所以我选择了vim。并且慢慢的开始习惯。。。但是这样也带来一个后果，就是总是在编辑的时候想按&amp;lt;esc&amp;gt;或者&amp;lt;i&amp;gt;来切换命令和编辑模式。:)
我的配置文件还是有一些个人特色的，毕竟被Windows侵蚀多年，有些习惯还不是一时半会能改过来的，所以就把Windows上的一些编辑快捷键也加入进来了。
&amp;#34;&amp;#34; Simplify settings for VIM 7.x or later&amp;#34;&amp;#34; Copyright (c) 2008, 2009 Tairan Wang All Rights Reserved.&amp;#34;&amp;#34; Tairan Wang &amp;lt;tairan.wang(at)gmail.com&amp;gt;&amp;#34;&amp;#34; $Id: vimrc 38 2009-02-06 03:16:59Z Tairan.Wang $&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34; General&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34; Get out of VI&amp;#39;s compatibale mode. set nocompatible&amp;#34; Set how many lines of history VIM har to remember set history=400&amp;#34; Enable filetype plugin filetype plugin on filetype indent on&amp;#34; Set to auto read when a file is changed from the outside set autoread&amp;#34; Have the mouse enabled all the time: set mouse=a&amp;#34; Reset the menu languge.</description>
    </item>
    
    <item>
      <title>焦点访谈出现错别字？</title>
      <link>https://tairan.net/posts/2008-05-19-focus-typos-appear/</link>
      <pubDate>Mon, 19 May 2008 00:00:01 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-05-19-focus-typos-appear/</guid>
      <description>2008/05/19 的焦点访谈节目出现 &amp;ndash; 举国志哀
而节目中的相关媒体新闻用字确是 &amp;ndash; 举国致哀
是错别字，还是各有其意？
在天涯看到一位网友出来解释：[转]http://cache.tianya.cn/publicforum/content/free/1/1253505.shtml
现代汉语词典解释:
 志哀:以某种方式表示哀悼.
致哀:向死者表示哀悼.
 原来都没错！</description>
    </item>
    
    <item>
      <title>别理他</title>
      <link>https://tairan.net/posts/2008-05-19-do-not-sell-it-to-him/</link>
      <pubDate>Mon, 19 May 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-05-19-do-not-sell-it-to-him/</guid>
      <description>在网上经常出现这样的场景：某人在论坛或者在博客中发表言论后，后面跟帖骂声一片！这还不算，你骂声越多人家还从未停止找骂。
呵呵，在生活中就有这么一撮人，喜欢挨骂，为什么？我试着分析一下。
 商业利益驱动
如今是商品经济社会，大家都觉得自己的腰包比别人的瘪。于是乎，想法子多赚点。现在互联网的经济跟流量息息相关，另外现在的网民都见多识广，要求也很高。那么怎么样来吸引更多的人来访问网站呢？正派人士，想方设法的提高站点质量，旁门左道的呢，就是我们要说的人了。他们专门来挑衅网友敏感的神经， 怎么能让网友不爽就怎么写。他真的怕你不生气，不回贴。因为回帖骂人也是流量的来源！
 寻找某种心理依靠
不是每个人都是英雄，都有光辉的形象。有些人平时在生活中没有朋友，也可以说成没有人会理睬或者理解他。长此以往，心理会造成一些阴影。有了阴影怎么办呢？发泄！网络的确是一个很好的发泄渠道，一句很经典的话“没人知道互联网的对面是一条狗”说明了一切。所以有人骂他，其实证明了还有人真的在乎他。
 越描越黑型
这些人呢，真的是&amp;rdquo;一失足成千古恨&amp;rdquo;啊！可能某种事情不小心做错了，所以就像出来澄清一下，大家都知道有些事情是越描越黑的。
 其他
林子大了什么鸟都有，我也解释不了为什么。因为我不是万能的那个人。
  btw: 如果你看不惯，骂我吧！</description>
    </item>
    
    <item>
      <title>我在 blogger 的第一个Blog</title>
      <link>https://tairan.net/posts/2008-05-15-i-was-a-blogger-first-blog/</link>
      <pubDate>Thu, 15 May 2008 00:00:00 +0800</pubDate>
      
      <guid>https://tairan.net/posts/2008-05-15-i-was-a-blogger-first-blog/</guid>
      <description>每天自己都想了很多东西，但是很少有记录的，有时很好的一个idea，一觉醒来就全部忘记了。记忆出现了断层。
现在就借助这个工具来记录一下吧，其实在网络上写blog也有很多的不方便，比如我在路上，或者暂时没有网络连接，再或者我想做一个学习笔记？
all right, 这些总比没有强百倍。因为零到壹的难度比壹到一百的距离长万倍！</description>
    </item>
    
  </channel>
</rss>